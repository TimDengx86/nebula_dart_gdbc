// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.schema_prop;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class SchemaProp implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SchemaProp");
  static final TField _TTL_DURATION_FIELD_DESC =
      new TField("ttl_duration", TType.I64, 1);
  static final TField _TTL_COL_FIELD_DESC =
      new TField("ttl_col", TType.STRING, 2);
  static final TField _COMMENT_FIELD_DESC =
      new TField("comment", TType.STRING, 3);

  int? _ttl_duration;
  static const int TTL_DURATION = 1;
  Int8List? _ttl_col;
  static const int TTL_COL = 2;
  Int8List? _comment;
  static const int COMMENT = 3;

  bool __isset_ttl_duration = false;

  SchemaProp() {}

  // ttl_duration
  int? get ttl_duration => this._ttl_duration;

  set ttl_duration(int? ttl_duration) {
    this._ttl_duration = ttl_duration;
    this.__isset_ttl_duration = true;
  }

  bool isSetTtl_duration() => this.__isset_ttl_duration;

  unsetTtl_duration() {
    this.__isset_ttl_duration = false;
  }

  // ttl_col
  Int8List? get ttl_col => this._ttl_col;

  set ttl_col(Int8List? ttl_col) {
    this._ttl_col = ttl_col;
  }

  bool isSetTtl_col() => this.ttl_col != null;

  unsetTtl_col() {
    this.ttl_col = null;
  }

  // comment
  Int8List? get comment => this._comment;

  set comment(Int8List? comment) {
    this._comment = comment;
  }

  bool isSetComment() => this.comment != null;

  unsetComment() {
    this.comment = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case TTL_DURATION:
        return this.ttl_duration;
      case TTL_COL:
        return this.ttl_col;
      case COMMENT:
        return this.comment;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case TTL_DURATION:
        if (value == null) {
          unsetTtl_duration();
        } else {
          this.ttl_duration = value as int?;
        }
        break;

      case TTL_COL:
        if (value == null) {
          unsetTtl_col();
        } else {
          this.ttl_col = value as Int8List?;
        }
        break;

      case COMMENT:
        if (value == null) {
          unsetComment();
        } else {
          this.comment = value as Int8List?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case TTL_DURATION:
        return isSetTtl_duration();
      case TTL_COL:
        return isSetTtl_col();
      case COMMENT:
        return isSetComment();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TTL_DURATION:
          if (field.type == TType.I64) {
            this.ttl_duration = iprot.readI64();
            this.__isset_ttl_duration = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TTL_COL:
          if (field.type == TType.STRING) {
            this.ttl_col = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMENT:
          if (field.type == TType.STRING) {
            this.comment = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetTtl_duration()) {
      oprot.writeFieldBegin(_TTL_DURATION_FIELD_DESC);
      oprot.writeI64(this.ttl_duration);
      oprot.writeFieldEnd();
    }
    if (isSetTtl_col()) {
      if (this.ttl_col != null) {
        oprot.writeFieldBegin(_TTL_COL_FIELD_DESC);
        oprot.writeBinary(this.ttl_col);
        oprot.writeFieldEnd();
      }
    }
    if (isSetComment()) {
      if (this.comment != null) {
        oprot.writeFieldBegin(_COMMENT_FIELD_DESC);
        oprot.writeBinary(this.comment);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SchemaProp(");

    if (isSetTtl_duration()) {
      ret.write("ttl_duration:");
      ret.write(this.ttl_duration);
    }

    if (isSetTtl_col()) {
      ret.write(", ");
      ret.write("ttl_col:");
      if (this.ttl_col == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetComment()) {
      ret.write(", ");
      ret.write("comment:");
      if (this.comment == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
