/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.update_sessions_resp;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class UpdateSessionsResp implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("UpdateSessionsResp");
  static final TField _CODE_FIELD_DESC = new TField("code", TType.I32, 1);
  static final TField _LEADER_FIELD_DESC =
      new TField("leader", TType.STRUCT, 2);
  static final TField _KILLED_QUERIES_FIELD_DESC =
      new TField("killed_queries", TType.MAP, 3);
  static final TField _KILLED_SESSIONS_FIELD_DESC =
      new TField("killed_sessions", TType.LIST, 4);

  int? _code;
  static const int CODE = 1;
  t_nebula.HostAddr? _leader;
  static const int LEADER = 2;
  Map<int, Map<int, QueryDesc>>? _killed_queries;
  static const int KILLED_QUERIES = 3;
  List<int>? _killed_sessions;
  static const int KILLED_SESSIONS = 4;

  bool __isset_code = false;

  UpdateSessionsResp() {}

  // code
  int? get code => this._code;

  set code(int? code) {
    this._code = code;
    this.__isset_code = true;
  }

  bool isSetCode() => this.__isset_code;

  unsetCode() {
    this.__isset_code = false;
  }

  // leader
  t_nebula.HostAddr? get leader => this._leader;

  set leader(t_nebula.HostAddr? leader) {
    this._leader = leader;
  }

  bool isSetLeader() => this.leader != null;

  unsetLeader() {
    this.leader = null;
  }

  // killed_queries
  Map<int, Map<int, QueryDesc>>? get killed_queries => this._killed_queries;

  set killed_queries(Map<int, Map<int, QueryDesc>>? killed_queries) {
    this._killed_queries = killed_queries;
  }

  bool isSetKilled_queries() => this.killed_queries != null;

  unsetKilled_queries() {
    this.killed_queries = null;
  }

  // killed_sessions
  List<int>? get killed_sessions => this._killed_sessions;

  set killed_sessions(List<int>? killed_sessions) {
    this._killed_sessions = killed_sessions;
  }

  bool isSetKilled_sessions() => this.killed_sessions != null;

  unsetKilled_sessions() {
    this.killed_sessions = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CODE:
        return this.code;
      case LEADER:
        return this.leader;
      case KILLED_QUERIES:
        return this.killed_queries;
      case KILLED_SESSIONS:
        return this.killed_sessions;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          this.code = value as int?;
        }
        break;

      case LEADER:
        if (value == null) {
          unsetLeader();
        } else {
          this.leader = value as t_nebula.HostAddr?;
        }
        break;

      case KILLED_QUERIES:
        if (value == null) {
          unsetKilled_queries();
        } else {
          this.killed_queries = value as Map<int, Map<int, QueryDesc>>?;
        }
        break;

      case KILLED_SESSIONS:
        if (value == null) {
          unsetKilled_sessions();
        } else {
          this.killed_sessions = value as List<int>?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CODE:
        return isSetCode();
      case LEADER:
        return isSetLeader();
      case KILLED_QUERIES:
        return isSetKilled_queries();
      case KILLED_SESSIONS:
        return isSetKilled_sessions();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CODE:
          if (field.type == TType.I32) {
            this.code = iprot.readI32();
            this.__isset_code = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LEADER:
          if (field.type == TType.STRUCT) {
            this.leader = new t_nebula.HostAddr();
            this.leader?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case KILLED_QUERIES:
          if (field.type == TType.MAP) {
            {
              TMap _map354 = iprot.readMapBegin();
              this.killed_queries = new Map<int, Map<int, QueryDesc>>();
              for (int _i355 = 0; _i355 < _map354.length; ++_i355) {
                int _key356;
                Map<int, QueryDesc> _val357;
                _key356 = iprot.readI64();
                {
                  TMap _map358 = iprot.readMapBegin();
                  _val357 = new Map<int, QueryDesc>();
                  for (int _i359 = 0; _i359 < _map358.length; ++_i359) {
                    int _key360;
                    QueryDesc _val361;
                    _key360 = iprot.readI64();
                    _val361 = new QueryDesc();
                    _val361.read(iprot);
                    _val357[_key360] = _val361;
                  }
                  iprot.readMapEnd();
                }
                this.killed_queries?[_key356] = _val357;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case KILLED_SESSIONS:
          if (field.type == TType.LIST) {
            {
              TList _list362 = iprot.readListBegin();
              this.killed_sessions = <int>[];
              for (int _i363 = 0; _i363 < _list362.length; ++_i363) {
                int _elem364;
                _elem364 = iprot.readI64();
                this.killed_sessions?.add(_elem364);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_CODE_FIELD_DESC);
    oprot.writeI32(this.code);
    oprot.writeFieldEnd();
    if (this.leader != null) {
      oprot.writeFieldBegin(_LEADER_FIELD_DESC);
      this.leader?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.killed_queries != null) {
      oprot.writeFieldBegin(_KILLED_QUERIES_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.I64, TType.MAP, this.killed_queries?.length));
        for (var elem366 in this.killed_queries?.keys ?? <int>[]) {
          oprot.writeI64(elem366);
          {
            oprot.writeMapBegin(new TMap(TType.I64, TType.STRUCT,
                this.killed_queries?[elem366]?.length));
            for (var elem368
                in this.killed_queries?[elem366]?.keys ?? <int>[]) {
              oprot.writeI64(elem368);
              this.killed_queries?[elem366]?[elem368]?.write(oprot);
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.killed_sessions != null) {
      oprot.writeFieldBegin(_KILLED_SESSIONS_FIELD_DESC);
      {
        oprot
            .writeListBegin(new TList(TType.I64, this.killed_sessions?.length));
        for (var elem369 in this.killed_sessions ?? <int>[]) {
          oprot.writeI64(elem369);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("UpdateSessionsResp(");

    ret.write("code:");
    String? code_name = t_nebula.ErrorCode.VALUES_TO_NAMES[this.code];
    if (code_name != null) {
      ret.write(code_name);
      ret.write(" (");
    }
    ret.write(this.code);
    if (code_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("leader:");
    if (this.leader == null) {
      ret.write("null");
    } else {
      ret.write(this.leader);
    }

    ret.write(", ");
    ret.write("killed_queries:");
    if (this.killed_queries == null) {
      ret.write("null");
    } else {
      ret.write(this.killed_queries);
    }

    ret.write(", ");
    ret.write("killed_sessions:");
    if (this.killed_sessions == null) {
      ret.write("null");
    } else {
      ret.write(this.killed_sessions);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCode() && !t_nebula.ErrorCode.VALID_VALUES.contains(code)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'code' has been assigned the invalid value $code");
    }
  }
}
