// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.alter_tag_req;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class AlterTagReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AlterTagReq");
  static final TField _SPACE_ID_FIELD_DESC =
      new TField("space_id", TType.I32, 1);
  static final TField _TAG_NAME_FIELD_DESC =
      new TField("tag_name", TType.STRING, 2);
  static final TField _TAG_ITEMS_FIELD_DESC =
      new TField("tag_items", TType.LIST, 3);
  static final TField _SCHEMA_PROP_FIELD_DESC =
      new TField("schema_prop", TType.STRUCT, 4);

  int _space_id = 0;
  static const int SPACE_ID = 1;
  Int8List? _tag_name;
  static const int TAG_NAME = 2;
  List<AlterSchemaItem>? _tag_items;
  static const int TAG_ITEMS = 3;
  SchemaProp? _schema_prop;
  static const int SCHEMA_PROP = 4;

  bool __isset_space_id = false;

  AlterTagReq() {}

  // space_id
  int get space_id => this._space_id;

  set space_id(int space_id) {
    this._space_id = space_id;
    this.__isset_space_id = true;
  }

  bool isSetSpace_id() => this.__isset_space_id;

  unsetSpace_id() {
    this.__isset_space_id = false;
  }

  // tag_name
  Int8List? get tag_name => this._tag_name;

  set tag_name(Int8List? tag_name) {
    this._tag_name = tag_name;
  }

  bool isSetTag_name() => this.tag_name != null;

  unsetTag_name() {
    this.tag_name = null;
  }

  // tag_items
  List<AlterSchemaItem>? get tag_items => this._tag_items;

  set tag_items(List<AlterSchemaItem>? tag_items) {
    this._tag_items = tag_items;
  }

  bool isSetTag_items() => this.tag_items != null;

  unsetTag_items() {
    this.tag_items = null;
  }

  // schema_prop
  SchemaProp? get schema_prop => this._schema_prop;

  set schema_prop(SchemaProp? schema_prop) {
    this._schema_prop = schema_prop;
  }

  bool isSetSchema_prop() => this.schema_prop != null;

  unsetSchema_prop() {
    this.schema_prop = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return this.space_id;
      case TAG_NAME:
        return this.tag_name;
      case TAG_ITEMS:
        return this.tag_items;
      case SCHEMA_PROP:
        return this.schema_prop;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          this.space_id = value as int;
        }
        break;

      case TAG_NAME:
        if (value == null) {
          unsetTag_name();
        } else {
          this.tag_name = value as Int8List;
        }
        break;

      case TAG_ITEMS:
        if (value == null) {
          unsetTag_items();
        } else {
          this.tag_items = value as List<AlterSchemaItem>;
        }
        break;

      case SCHEMA_PROP:
        if (value == null) {
          unsetSchema_prop();
        } else {
          this.schema_prop = value as SchemaProp;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return isSetSpace_id();
      case TAG_NAME:
        return isSetTag_name();
      case TAG_ITEMS:
        return isSetTag_items();
      case SCHEMA_PROP:
        return isSetSchema_prop();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            this.__isset_space_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TAG_NAME:
          if (field.type == TType.STRING) {
            this.tag_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TAG_ITEMS:
          if (field.type == TType.LIST) {
            {
              TList _list88 = iprot.readListBegin();
              this.tag_items = <AlterSchemaItem>[];
              for (int _i89 = 0; _i89 < _list88.length; ++_i89) {
                AlterSchemaItem _elem90;
                _elem90 = new AlterSchemaItem();
                _elem90.read(iprot);
                this.tag_items?.add(_elem90);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCHEMA_PROP:
          if (field.type == TType.STRUCT) {
            this.schema_prop = new SchemaProp();
            this.schema_prop?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    if (this.tag_name != null) {
      oprot.writeFieldBegin(_TAG_NAME_FIELD_DESC);
      oprot.writeBinary(this.tag_name);
      oprot.writeFieldEnd();
    }
    if (this.tag_items != null) {
      oprot.writeFieldBegin(_TAG_ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.tag_items?.length));
        for (var elem91 in this.tag_items ?? []) {
          elem91.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.schema_prop != null) {
      oprot.writeFieldBegin(_SCHEMA_PROP_FIELD_DESC);
      this.schema_prop?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AlterTagReq(");

    ret.write("space_id:");
    ret.write(this.space_id);

    ret.write(", ");
    ret.write("tag_name:");
    if (this.tag_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("tag_items:");
    if (this.tag_items == null) {
      ret.write("null");
    } else {
      ret.write(this.tag_items);
    }

    ret.write(", ");
    ret.write("schema_prop:");
    if (this.schema_prop == null) {
      ret.write("null");
    } else {
      ret.write(this.schema_prop);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
