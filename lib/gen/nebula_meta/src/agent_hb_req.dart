// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.agent_hb_req;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class AgentHBReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AgentHBReq");
  static final TField _HOST_FIELD_DESC = new TField("host", TType.STRUCT, 1);
  static final TField _GIT_INFO_SHA_FIELD_DESC =
      new TField("git_info_sha", TType.STRING, 2);
  static final TField _VERSION_FIELD_DESC =
      new TField("version", TType.STRING, 3);

  t_nebula.HostAddr? _host;
  static const int HOST = 1;
  Int8List? _git_info_sha;
  static const int GIT_INFO_SHA = 2;
  Int8List? _version;
  static const int VERSION = 3;

  AgentHBReq() {}

  // host
  t_nebula.HostAddr? get host => this._host;

  set host(t_nebula.HostAddr? host) {
    this._host = host;
  }

  bool isSetHost() => this.host != null;

  unsetHost() {
    this.host = null;
  }

  // git_info_sha
  Int8List? get git_info_sha => this._git_info_sha;

  set git_info_sha(Int8List? git_info_sha) {
    this._git_info_sha = git_info_sha;
  }

  bool isSetGit_info_sha() => this.git_info_sha != null;

  unsetGit_info_sha() {
    this.git_info_sha = null;
  }

  // version
  Int8List? get version => this._version;

  set version(Int8List? version) {
    this._version = version;
  }

  bool isSetVersion() => this.version != null;

  unsetVersion() {
    this.version = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HOST:
        return this.host;
      case GIT_INFO_SHA:
        return this.git_info_sha;
      case VERSION:
        return this.version;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          this.host = value as t_nebula.HostAddr;
        }
        break;

      case GIT_INFO_SHA:
        if (value == null) {
          unsetGit_info_sha();
        } else {
          this.git_info_sha = value as Int8List;
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          this.version = value as Int8List;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HOST:
        return isSetHost();
      case GIT_INFO_SHA:
        return isSetGit_info_sha();
      case VERSION:
        return isSetVersion();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HOST:
          if (field.type == TType.STRUCT) {
            this.host = new t_nebula.HostAddr();
            this.host?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GIT_INFO_SHA:
          if (field.type == TType.STRING) {
            this.git_info_sha = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERSION:
          if (field.type == TType.STRING) {
            this.version = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.host != null) {
      oprot.writeFieldBegin(_HOST_FIELD_DESC);
      this.host?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.git_info_sha != null) {
      oprot.writeFieldBegin(_GIT_INFO_SHA_FIELD_DESC);
      oprot.writeBinary(this.git_info_sha);
      oprot.writeFieldEnd();
    }
    if (isSetVersion()) {
      if (this.version != null) {
        oprot.writeFieldBegin(_VERSION_FIELD_DESC);
        oprot.writeBinary(this.version);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AgentHBReq(");

    ret.write("host:");
    if (this.host == null) {
      ret.write("null");
    } else {
      ret.write(this.host);
    }

    ret.write(", ");
    ret.write("git_info_sha:");
    if (this.git_info_sha == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    if (isSetVersion()) {
      ret.write(", ");
      ret.write("version:");
      if (this.version == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
