// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.config_item;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class ConfigItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ConfigItem");
  static final TField _MODULE_FIELD_DESC = new TField("module", TType.I32, 1);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 2);
  static final TField _MODE_FIELD_DESC = new TField("mode", TType.I32, 3);
  static final TField _VALUE_FIELD_DESC = new TField("value", TType.STRUCT, 4);

  int? _module;
  static const int MODULE = 1;
  Int8List? _name;
  static const int NAME = 2;
  int? _mode;
  static const int MODE = 3;
  t_nebula.Value? _value;
  static const int VALUE = 4;

  bool __isset_module = false;
  bool __isset_mode = false;

  ConfigItem() {}

  // module
  int? get module => this._module;

  set module(int? module) {
    this._module = module;
    this.__isset_module = true;
  }

  bool isSetModule() => this.__isset_module;

  unsetModule() {
    this.__isset_module = false;
  }

  // name
  Int8List? get name => this._name;

  set name(Int8List? name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // mode
  int? get mode => this._mode;

  set mode(int? mode) {
    this._mode = mode;
    this.__isset_mode = true;
  }

  bool isSetMode() => this.__isset_mode;

  unsetMode() {
    this.__isset_mode = false;
  }

  // value
  t_nebula.Value? get value => this._value;

  set value(t_nebula.Value? value) {
    this._value = value;
  }

  bool isSetValue() => this.value != null;

  unsetValue() {
    this.value = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MODULE:
        return this.module;
      case NAME:
        return this.name;
      case MODE:
        return this.mode;
      case VALUE:
        return this.value;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case MODULE:
        if (value == null) {
          unsetModule();
        } else {
          this.module = value as int?;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value as Int8List?;
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          this.mode = value as int?;
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          this.value = value as t_nebula.Value?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MODULE:
        return isSetModule();
      case NAME:
        return isSetName();
      case MODE:
        return isSetMode();
      case VALUE:
        return isSetValue();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MODULE:
          if (field.type == TType.I32) {
            this.module = iprot.readI32();
            this.__isset_module = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MODE:
          if (field.type == TType.I32) {
            this.mode = iprot.readI32();
            this.__isset_mode = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VALUE:
          if (field.type == TType.STRUCT) {
            this.value = new t_nebula.Value();
            this.value?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_MODULE_FIELD_DESC);
    oprot.writeI32(this.module);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeBinary(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_MODE_FIELD_DESC);
    oprot.writeI32(this.mode);
    oprot.writeFieldEnd();
    if (this.value != null) {
      oprot.writeFieldBegin(_VALUE_FIELD_DESC);
      this.value?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ConfigItem(");

    ret.write("module:");
    String? module_name = ConfigModule.VALUES_TO_NAMES[this.module];
    if (module_name != null) {
      ret.write(module_name);
      ret.write(" (");
    }
    ret.write(this.module);
    if (module_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("mode:");
    String? mode_name = ConfigMode.VALUES_TO_NAMES[this.mode];
    if (mode_name != null) {
      ret.write(mode_name);
      ret.write(" (");
    }
    ret.write(this.mode);
    if (mode_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("value:");
    if (this.value == null) {
      ret.write("null");
    } else {
      ret.write(this.value);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetModule() && !ConfigModule.VALID_VALUES.contains(module)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'module' has been assigned the invalid value $module");
    }
    if (isSetMode() && !ConfigMode.VALID_VALUES.contains(mode)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'mode' has been assigned the invalid value $mode");
    }
  }
}
