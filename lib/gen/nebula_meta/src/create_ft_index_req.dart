/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.create_ft_index_req;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class CreateFTIndexReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CreateFTIndexReq");
  static final TField _FULLTEXT_INDEX_NAME_FIELD_DESC =
      new TField("fulltext_index_name", TType.STRING, 1);
  static final TField _INDEX_FIELD_DESC = new TField("index", TType.STRUCT, 2);

  Int8List? _fulltext_index_name;
  static const int FULLTEXT_INDEX_NAME = 1;
  FTIndex? _index;
  static const int INDEX = 2;

  CreateFTIndexReq() {}

  // fulltext_index_name
  Int8List? get fulltext_index_name => this._fulltext_index_name;

  set fulltext_index_name(Int8List? fulltext_index_name) {
    this._fulltext_index_name = fulltext_index_name;
  }

  bool isSetFulltext_index_name() => this.fulltext_index_name != null;

  unsetFulltext_index_name() {
    this.fulltext_index_name = null;
  }

  // index
  FTIndex? get index => this._index;

  set index(FTIndex? index) {
    this._index = index;
  }

  bool isSetIndex() => this.index != null;

  unsetIndex() {
    this.index = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case FULLTEXT_INDEX_NAME:
        return this.fulltext_index_name;
      case INDEX:
        return this.index;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case FULLTEXT_INDEX_NAME:
        if (value == null) {
          unsetFulltext_index_name();
        } else {
          this.fulltext_index_name = value as Int8List?;
        }
        break;

      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          this.index = value as FTIndex?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case FULLTEXT_INDEX_NAME:
        return isSetFulltext_index_name();
      case INDEX:
        return isSetIndex();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case FULLTEXT_INDEX_NAME:
          if (field.type == TType.STRING) {
            this.fulltext_index_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INDEX:
          if (field.type == TType.STRUCT) {
            this.index = new FTIndex();
            this.index?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.fulltext_index_name != null) {
      oprot.writeFieldBegin(_FULLTEXT_INDEX_NAME_FIELD_DESC);
      oprot.writeBinary(this.fulltext_index_name);
      oprot.writeFieldEnd();
    }
    if (this.index != null) {
      oprot.writeFieldBegin(_INDEX_FIELD_DESC);
      this.index?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CreateFTIndexReq(");

    ret.write("fulltext_index_name:");
    if (this.fulltext_index_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("index:");
    if (this.index == null) {
      ret.write("null");
    } else {
      ret.write(this.index);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
