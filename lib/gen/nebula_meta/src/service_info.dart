/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.service_info;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class ServiceInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ServiceInfo");
  static final TField _DIR_FIELD_DESC = new TField("dir", TType.STRUCT, 1);
  static final TField _ADDR_FIELD_DESC = new TField("addr", TType.STRUCT, 2);
  static final TField _ROLE_FIELD_DESC = new TField("role", TType.I32, 3);

  t_nebula.DirInfo? _dir;
  static const int DIR = 1;
  t_nebula.HostAddr? _addr;
  static const int ADDR = 2;
  int? _role;
  static const int ROLE = 3;

  bool __isset_role = false;

  ServiceInfo() {}

  // dir
  t_nebula.DirInfo? get dir => this._dir;

  set dir(t_nebula.DirInfo? dir) {
    this._dir = dir;
  }

  bool isSetDir() => this.dir != null;

  unsetDir() {
    this.dir = null;
  }

  // addr
  t_nebula.HostAddr? get addr => this._addr;

  set addr(t_nebula.HostAddr? addr) {
    this._addr = addr;
  }

  bool isSetAddr() => this.addr != null;

  unsetAddr() {
    this.addr = null;
  }

  // role
  int? get role => this._role;

  set role(int? role) {
    this._role = role;
    this.__isset_role = true;
  }

  bool isSetRole() => this.__isset_role;

  unsetRole() {
    this.__isset_role = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case DIR:
        return this.dir;
      case ADDR:
        return this.addr;
      case ROLE:
        return this.role;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case DIR:
        if (value == null) {
          unsetDir();
        } else {
          this.dir = value as t_nebula.DirInfo;
        }
        break;

      case ADDR:
        if (value == null) {
          unsetAddr();
        } else {
          this.addr = value as t_nebula.HostAddr;
        }
        break;

      case ROLE:
        if (value == null) {
          unsetRole();
        } else {
          this.role = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case DIR:
        return isSetDir();
      case ADDR:
        return isSetAddr();
      case ROLE:
        return isSetRole();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case DIR:
          if (field.type == TType.STRUCT) {
            this.dir = new t_nebula.DirInfo();
            this.dir?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ADDR:
          if (field.type == TType.STRUCT) {
            this.addr = new t_nebula.HostAddr();
            this.addr?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROLE:
          if (field.type == TType.I32) {
            this.role = iprot.readI32();
            this.__isset_role = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.dir != null) {
      oprot.writeFieldBegin(_DIR_FIELD_DESC);
      this.dir?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.addr != null) {
      oprot.writeFieldBegin(_ADDR_FIELD_DESC);
      this.addr?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ROLE_FIELD_DESC);
    oprot.writeI32(this.role);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ServiceInfo(");

    ret.write("dir:");
    if (this.dir == null) {
      ret.write("null");
    } else {
      ret.write(this.dir);
    }

    ret.write(", ");
    ret.write("addr:");
    if (this.addr == null) {
      ret.write("null");
    } else {
      ret.write(this.addr);
    }

    ret.write(", ");
    ret.write("role:");
    String? role_name = HostRole.VALUES_TO_NAMES[this.role];
    if (role_name != null) {
      ret.write(role_name);
      ret.write(" (");
    }
    ret.write(this.role);
    if (role_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetRole() && !HostRole.VALID_VALUES.contains(role)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'role' has been assigned the invalid value $role");
    }
  }
}
