/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.restore_meta_req;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class RestoreMetaReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("RestoreMetaReq");
  static final TField _FILES_FIELD_DESC = new TField("files", TType.LIST, 1);
  static final TField _HOSTS_FIELD_DESC = new TField("hosts", TType.LIST, 2);

  List<Int8List>? _files;
  static const int FILES = 1;
  List<HostPair>? _hosts;
  static const int HOSTS = 2;

  RestoreMetaReq() {}

  // files
  List<Int8List>? get files => this._files;

  set files(List<Int8List>? files) {
    this._files = files;
  }

  bool isSetFiles() => this.files != null;

  unsetFiles() {
    this.files = null;
  }

  // hosts
  List<HostPair>? get hosts => this._hosts;

  set hosts(List<HostPair>? hosts) {
    this._hosts = hosts;
  }

  bool isSetHosts() => this.hosts != null;

  unsetHosts() {
    this.hosts = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case FILES:
        return this.files;
      case HOSTS:
        return this.hosts;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case FILES:
        if (value == null) {
          unsetFiles();
        } else {
          this.files = value as List<Int8List>;
        }
        break;

      case HOSTS:
        if (value == null) {
          unsetHosts();
        } else {
          this.hosts = value as List<HostPair>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case FILES:
        return isSetFiles();
      case HOSTS:
        return isSetHosts();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case FILES:
          if (field.type == TType.LIST) {
            {
              TList _list292 = iprot.readListBegin();
              this.files = <Int8List>[];
              for (int _i293 = 0; _i293 < _list292.length; ++_i293) {
                Int8List _elem294;
                _elem294 = iprot.readBinary();
                this.files?.add(_elem294);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOSTS:
          if (field.type == TType.LIST) {
            {
              TList _list295 = iprot.readListBegin();
              this.hosts = <HostPair>[];
              for (int _i296 = 0; _i296 < _list295.length; ++_i296) {
                HostPair _elem297;
                _elem297 = new HostPair();
                _elem297.read(iprot);
                this.hosts?.add(_elem297);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.files != null) {
      oprot.writeFieldBegin(_FILES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.files?.length));
        for (var elem298 in this.files ?? []) {
          oprot.writeBinary(elem298);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.hosts != null) {
      oprot.writeFieldBegin(_HOSTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.hosts?.length));
        for (var elem299 in this.hosts ?? []) {
          elem299.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("RestoreMetaReq(");

    ret.write("files:");
    if (this.files == null) {
      ret.write("null");
    } else {
      ret.write(this.files);
    }

    ret.write(", ");
    ret.write("hosts:");
    if (this.hosts == null) {
      ret.write("null");
    } else {
      ret.write(this.hosts);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
