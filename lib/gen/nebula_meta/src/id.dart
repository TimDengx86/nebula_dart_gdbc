/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.id;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class ID implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ID");
  static final TField _SPACE_ID_FIELD_DESC =
      new TField("space_id", TType.I32, 1);
  static final TField _TAG_ID_FIELD_DESC = new TField("tag_id", TType.I32, 2);
  static final TField _EDGE_TYPE_FIELD_DESC =
      new TField("edge_type", TType.I32, 3);
  static final TField _INDEX_ID_FIELD_DESC =
      new TField("index_id", TType.I32, 4);
  static final TField _CLUSTER_ID_FIELD_DESC =
      new TField("cluster_id", TType.I64, 5);

  int? _space_id;
  static const int SPACE_ID = 1;
  int? _tag_id;
  static const int TAG_ID = 2;
  int? _edge_type;
  static const int EDGE_TYPE = 3;
  int? _index_id;
  static const int INDEX_ID = 4;
  int? _cluster_id;
  static const int CLUSTER_ID = 5;

  bool __isset_space_id = false;
  bool __isset_tag_id = false;
  bool __isset_edge_type = false;
  bool __isset_index_id = false;
  bool __isset_cluster_id = false;

  ID() {}

  // space_id
  int? get space_id => this._space_id;

  set space_id(int? space_id) {
    this._space_id = space_id;
    this.__isset_space_id = true;
  }

  bool isSetSpace_id() => this.__isset_space_id;

  unsetSpace_id() {
    this.__isset_space_id = false;
  }

  // tag_id
  int? get tag_id => this._tag_id;

  set tag_id(int? tag_id) {
    this._tag_id = tag_id;
    this.__isset_tag_id = true;
  }

  bool isSetTag_id() => this.__isset_tag_id;

  unsetTag_id() {
    this.__isset_tag_id = false;
  }

  // edge_type
  int? get edge_type => this._edge_type;

  set edge_type(int? edge_type) {
    this._edge_type = edge_type;
    this.__isset_edge_type = true;
  }

  bool isSetEdge_type() => this.__isset_edge_type;

  unsetEdge_type() {
    this.__isset_edge_type = false;
  }

  // index_id
  int? get index_id => this._index_id;

  set index_id(int? index_id) {
    this._index_id = index_id;
    this.__isset_index_id = true;
  }

  bool isSetIndex_id() => this.__isset_index_id;

  unsetIndex_id() {
    this.__isset_index_id = false;
  }

  // cluster_id
  int? get cluster_id => this._cluster_id;

  set cluster_id(int? cluster_id) {
    this._cluster_id = cluster_id;
    this.__isset_cluster_id = true;
  }

  bool isSetCluster_id() => this.__isset_cluster_id;

  unsetCluster_id() {
    this.__isset_cluster_id = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return this.space_id;
      case TAG_ID:
        return this.tag_id;
      case EDGE_TYPE:
        return this.edge_type;
      case INDEX_ID:
        return this.index_id;
      case CLUSTER_ID:
        return this.cluster_id;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          this.space_id = value as int?;
        }
        break;

      case TAG_ID:
        if (value == null) {
          unsetTag_id();
        } else {
          this.tag_id = value as int?;
        }
        break;

      case EDGE_TYPE:
        if (value == null) {
          unsetEdge_type();
        } else {
          this.edge_type = value as int?;
        }
        break;

      case INDEX_ID:
        if (value == null) {
          unsetIndex_id();
        } else {
          this.index_id = value as int?;
        }
        break;

      case CLUSTER_ID:
        if (value == null) {
          unsetCluster_id();
        } else {
          this.cluster_id = value as int?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return isSetSpace_id();
      case TAG_ID:
        return isSetTag_id();
      case EDGE_TYPE:
        return isSetEdge_type();
      case INDEX_ID:
        return isSetIndex_id();
      case CLUSTER_ID:
        return isSetCluster_id();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            this.__isset_space_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TAG_ID:
          if (field.type == TType.I32) {
            this.tag_id = iprot.readI32();
            this.__isset_tag_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDGE_TYPE:
          if (field.type == TType.I32) {
            this.edge_type = iprot.readI32();
            this.__isset_edge_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INDEX_ID:
          if (field.type == TType.I32) {
            this.index_id = iprot.readI32();
            this.__isset_index_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLUSTER_ID:
          if (field.type == TType.I64) {
            this.cluster_id = iprot.readI64();
            this.__isset_cluster_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSpace_id()) {
      oprot.writeFieldBegin(_SPACE_ID_FIELD_DESC);
      oprot.writeI32(this.space_id);
      oprot.writeFieldEnd();
    }
    if (isSetTag_id()) {
      oprot.writeFieldBegin(_TAG_ID_FIELD_DESC);
      oprot.writeI32(this.tag_id);
      oprot.writeFieldEnd();
    }
    if (isSetEdge_type()) {
      oprot.writeFieldBegin(_EDGE_TYPE_FIELD_DESC);
      oprot.writeI32(this.edge_type);
      oprot.writeFieldEnd();
    }
    if (isSetIndex_id()) {
      oprot.writeFieldBegin(_INDEX_ID_FIELD_DESC);
      oprot.writeI32(this.index_id);
      oprot.writeFieldEnd();
    }
    if (isSetCluster_id()) {
      oprot.writeFieldBegin(_CLUSTER_ID_FIELD_DESC);
      oprot.writeI64(this.cluster_id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ID(");

    if (isSetSpace_id()) {
      ret.write("space_id:");
      ret.write(this.space_id);
    }

    if (isSetTag_id()) {
      ret.write(", ");
      ret.write("tag_id:");
      ret.write(this.tag_id);
    }

    if (isSetEdge_type()) {
      ret.write(", ");
      ret.write("edge_type:");
      ret.write(this.edge_type);
    }

    if (isSetIndex_id()) {
      ret.write(", ");
      ret.write("index_id:");
      ret.write(this.index_id);
    }

    if (isSetCluster_id()) {
      ret.write(", ");
      ret.write("cluster_id:");
      ret.write(this.cluster_id);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
