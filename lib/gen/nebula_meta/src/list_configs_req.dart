// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.list_configs_req;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class ListConfigsReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ListConfigsReq");
  static final TField _SPACE_FIELD_DESC = new TField("space", TType.STRING, 1);
  static final TField _MODULE_FIELD_DESC = new TField("module", TType.I32, 2);

  Int8List? _space;
  static const int SPACE = 1;
  int? _module;
  static const int MODULE = 2;

  bool __isset_module = false;

  ListConfigsReq() {}

  // space
  Int8List? get space => this._space;

  set space(Int8List? space) {
    this._space = space;
  }

  bool isSetSpace() => this.space != null;

  unsetSpace() {
    this.space = null;
  }

  // module
  int? get module => this._module;

  set module(int? module) {
    this._module = module;
    this.__isset_module = true;
  }

  bool isSetModule() => this.__isset_module;

  unsetModule() {
    this.__isset_module = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE:
        return this.space;
      case MODULE:
        return this.module;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE:
        if (value == null) {
          unsetSpace();
        } else {
          this.space = value as Int8List?;
        }
        break;

      case MODULE:
        if (value == null) {
          unsetModule();
        } else {
          this.module = value as int?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE:
        return isSetSpace();
      case MODULE:
        return isSetModule();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE:
          if (field.type == TType.STRING) {
            this.space = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MODULE:
          if (field.type == TType.I32) {
            this.module = iprot.readI32();
            this.__isset_module = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.space != null) {
      oprot.writeFieldBegin(_SPACE_FIELD_DESC);
      oprot.writeBinary(this.space);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_MODULE_FIELD_DESC);
    oprot.writeI32(this.module);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ListConfigsReq(");

    ret.write("space:");
    if (this.space == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("module:");
    String? module_name = ConfigModule.VALUES_TO_NAMES[this.module];
    if (module_name != null) {
      ret.write(module_name);
      ret.write(" (");
    }
    ret.write(this.module);
    if (module_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetModule() && !ConfigModule.VALID_VALUES.contains(module)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'module' has been assigned the invalid value $module");
    }
  }
}
