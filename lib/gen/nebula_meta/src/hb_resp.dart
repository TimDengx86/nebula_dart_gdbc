// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.hb_resp;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class HBResp implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("HBResp");
  static final TField _CODE_FIELD_DESC = new TField("code", TType.I32, 1);
  static final TField _LEADER_FIELD_DESC =
      new TField("leader", TType.STRUCT, 2);
  static final TField _CLUSTER_ID_FIELD_DESC =
      new TField("cluster_id", TType.I64, 3);
  static final TField _LAST_UPDATE_TIME_IN_MS_FIELD_DESC =
      new TField("last_update_time_in_ms", TType.I64, 4);
  static final TField _META_VERSION_FIELD_DESC =
      new TField("meta_version", TType.I32, 5);

  int? _code;
  static const int CODE = 1;
  t_nebula.HostAddr? _leader;
  static const int LEADER = 2;
  int _cluster_id = 0;
  static const int CLUSTER_ID = 3;
  int _last_update_time_in_ms = 0;
  static const int LAST_UPDATE_TIME_IN_MS = 4;
  int _meta_version = 0;
  static const int META_VERSION = 5;

  bool __isset_code = false;
  bool __isset_cluster_id = false;
  bool __isset_last_update_time_in_ms = false;
  bool __isset_meta_version = false;

  HBResp() {}

  // code
  int? get code => this._code;

  set code(int? code) {
    this._code = code;
    this.__isset_code = true;
  }

  bool isSetCode() => this.__isset_code;

  unsetCode() {
    this.__isset_code = false;
  }

  // leader
  t_nebula.HostAddr? get leader => this._leader;

  set leader(t_nebula.HostAddr? leader) {
    this._leader = leader;
  }

  bool isSetLeader() => this.leader != null;

  unsetLeader() {
    this.leader = null;
  }

  // cluster_id
  int get cluster_id => this._cluster_id;

  set cluster_id(int cluster_id) {
    this._cluster_id = cluster_id;
    this.__isset_cluster_id = true;
  }

  bool isSetCluster_id() => this.__isset_cluster_id;

  unsetCluster_id() {
    this.__isset_cluster_id = false;
  }

  // last_update_time_in_ms
  int get last_update_time_in_ms => this._last_update_time_in_ms;

  set last_update_time_in_ms(int last_update_time_in_ms) {
    this._last_update_time_in_ms = last_update_time_in_ms;
    this.__isset_last_update_time_in_ms = true;
  }

  bool isSetLast_update_time_in_ms() => this.__isset_last_update_time_in_ms;

  unsetLast_update_time_in_ms() {
    this.__isset_last_update_time_in_ms = false;
  }

  // meta_version
  int get meta_version => this._meta_version;

  set meta_version(int meta_version) {
    this._meta_version = meta_version;
    this.__isset_meta_version = true;
  }

  bool isSetMeta_version() => this.__isset_meta_version;

  unsetMeta_version() {
    this.__isset_meta_version = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CODE:
        return this.code;
      case LEADER:
        return this.leader;
      case CLUSTER_ID:
        return this.cluster_id;
      case LAST_UPDATE_TIME_IN_MS:
        return this.last_update_time_in_ms;
      case META_VERSION:
        return this.meta_version;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          this.code = value as int?;
        }
        break;

      case LEADER:
        if (value == null) {
          unsetLeader();
        } else {
          this.leader = value as t_nebula.HostAddr?;
        }
        break;

      case CLUSTER_ID:
        if (value == null) {
          unsetCluster_id();
        } else {
          this.cluster_id = value as int;
        }
        break;

      case LAST_UPDATE_TIME_IN_MS:
        if (value == null) {
          unsetLast_update_time_in_ms();
        } else {
          this.last_update_time_in_ms = value as int;
        }
        break;

      case META_VERSION:
        if (value == null) {
          unsetMeta_version();
        } else {
          this.meta_version = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CODE:
        return isSetCode();
      case LEADER:
        return isSetLeader();
      case CLUSTER_ID:
        return isSetCluster_id();
      case LAST_UPDATE_TIME_IN_MS:
        return isSetLast_update_time_in_ms();
      case META_VERSION:
        return isSetMeta_version();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CODE:
          if (field.type == TType.I32) {
            this.code = iprot.readI32();
            this.__isset_code = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LEADER:
          if (field.type == TType.STRUCT) {
            this.leader = new t_nebula.HostAddr();
            this.leader?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLUSTER_ID:
          if (field.type == TType.I64) {
            this.cluster_id = iprot.readI64();
            this.__isset_cluster_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LAST_UPDATE_TIME_IN_MS:
          if (field.type == TType.I64) {
            this.last_update_time_in_ms = iprot.readI64();
            this.__isset_last_update_time_in_ms = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case META_VERSION:
          if (field.type == TType.I32) {
            this.meta_version = iprot.readI32();
            this.__isset_meta_version = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_CODE_FIELD_DESC);
    oprot.writeI32(this.code);
    oprot.writeFieldEnd();
    if (this.leader != null) {
      oprot.writeFieldBegin(_LEADER_FIELD_DESC);
      this.leader?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CLUSTER_ID_FIELD_DESC);
    oprot.writeI64(this.cluster_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LAST_UPDATE_TIME_IN_MS_FIELD_DESC);
    oprot.writeI64(this.last_update_time_in_ms);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_META_VERSION_FIELD_DESC);
    oprot.writeI32(this.meta_version);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("HBResp(");

    ret.write("code:");
    String? code_name = t_nebula.ErrorCode.VALUES_TO_NAMES[this.code];
    if (code_name != null) {
      ret.write(code_name);
      ret.write(" (");
    }
    ret.write(this.code);
    if (code_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("leader:");
    if (this.leader == null) {
      ret.write("null");
    } else {
      ret.write(this.leader);
    }

    ret.write(", ");
    ret.write("cluster_id:");
    ret.write(this.cluster_id);

    ret.write(", ");
    ret.write("last_update_time_in_ms:");
    ret.write(this.last_update_time_in_ms);

    ret.write(", ");
    ret.write("meta_version:");
    ret.write(this.meta_version);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCode() && !t_nebula.ErrorCode.VALID_VALUES.contains(code)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'code' has been assigned the invalid value $code");
    }
  }
}
