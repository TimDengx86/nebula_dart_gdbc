/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.tag_item;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class TagItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TagItem");
  static final TField _TAG_ID_FIELD_DESC = new TField("tag_id", TType.I32, 1);
  static final TField _TAG_NAME_FIELD_DESC =
      new TField("tag_name", TType.STRING, 2);
  static final TField _VERSION_FIELD_DESC = new TField("version", TType.I64, 3);
  static final TField _SCHEMA_FIELD_DESC =
      new TField("schema", TType.STRUCT, 4);

  int _tag_id = 0;
  static const int TAG_ID = 1;
  Int8List? _tag_name;
  static const int TAG_NAME = 2;
  int _version = 0;
  static const int VERSION = 3;
  Schema? _schema;
  static const int SCHEMA = 4;

  bool __isset_tag_id = false;
  bool __isset_version = false;

  TagItem() {}

  // tag_id
  int get tag_id => this._tag_id;

  set tag_id(int tag_id) {
    this._tag_id = tag_id;
    this.__isset_tag_id = true;
  }

  bool isSetTag_id() => this.__isset_tag_id;

  unsetTag_id() {
    this.__isset_tag_id = false;
  }

  // tag_name
  Int8List? get tag_name => this._tag_name;

  set tag_name(Int8List? tag_name) {
    this._tag_name = tag_name;
  }

  bool isSetTag_name() => this.tag_name != null;

  unsetTag_name() {
    this.tag_name = null;
  }

  // version
  int get version => this._version;

  set version(int version) {
    this._version = version;
    this.__isset_version = true;
  }

  bool isSetVersion() => this.__isset_version;

  unsetVersion() {
    this.__isset_version = false;
  }

  // schema
  Schema? get schema => this._schema;

  set schema(Schema? schema) {
    this._schema = schema;
  }

  bool isSetSchema() => this.schema != null;

  unsetSchema() {
    this.schema = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case TAG_ID:
        return this.tag_id;
      case TAG_NAME:
        return this.tag_name;
      case VERSION:
        return this.version;
      case SCHEMA:
        return this.schema;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case TAG_ID:
        if (value == null) {
          unsetTag_id();
        } else {
          this.tag_id = value as int;
        }
        break;

      case TAG_NAME:
        if (value == null) {
          unsetTag_name();
        } else {
          this.tag_name = value as Int8List;
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          this.version = value as int;
        }
        break;

      case SCHEMA:
        if (value == null) {
          unsetSchema();
        } else {
          this.schema = value as Schema;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case TAG_ID:
        return isSetTag_id();
      case TAG_NAME:
        return isSetTag_name();
      case VERSION:
        return isSetVersion();
      case SCHEMA:
        return isSetSchema();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TAG_ID:
          if (field.type == TType.I32) {
            this.tag_id = iprot.readI32();
            this.__isset_tag_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TAG_NAME:
          if (field.type == TType.STRING) {
            this.tag_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERSION:
          if (field.type == TType.I64) {
            this.version = iprot.readI64();
            this.__isset_version = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCHEMA:
          if (field.type == TType.STRUCT) {
            this.schema = new Schema();
            this.schema?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_TAG_ID_FIELD_DESC);
    oprot.writeI32(this.tag_id);
    oprot.writeFieldEnd();
    if (this.tag_name != null) {
      oprot.writeFieldBegin(_TAG_NAME_FIELD_DESC);
      oprot.writeBinary(this.tag_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_VERSION_FIELD_DESC);
    oprot.writeI64(this.version);
    oprot.writeFieldEnd();
    if (this.schema != null) {
      oprot.writeFieldBegin(_SCHEMA_FIELD_DESC);
      this.schema?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TagItem(");

    ret.write("tag_id:");
    ret.write(this.tag_id);

    ret.write(", ");
    ret.write("tag_name:");
    if (this.tag_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("version:");
    ret.write(this.version);

    ret.write(", ");
    ret.write("schema:");
    if (this.schema == null) {
      ret.write("null");
    } else {
      ret.write(this.schema);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
