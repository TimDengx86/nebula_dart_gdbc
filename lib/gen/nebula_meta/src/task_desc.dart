/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.task_desc;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class TaskDesc implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TaskDesc");
  static final TField _SPACE_ID_FIELD_DESC =
      new TField("space_id", TType.I32, 1);
  static final TField _JOB_ID_FIELD_DESC = new TField("job_id", TType.I32, 2);
  static final TField _TASK_ID_FIELD_DESC = new TField("task_id", TType.I32, 3);
  static final TField _HOST_FIELD_DESC = new TField("host", TType.STRUCT, 4);
  static final TField _STATUS_FIELD_DESC = new TField("status", TType.I32, 5);
  static final TField _START_TIME_FIELD_DESC =
      new TField("start_time", TType.I64, 6);
  static final TField _STOP_TIME_FIELD_DESC =
      new TField("stop_time", TType.I64, 7);
  static final TField _CODE_FIELD_DESC = new TField("code", TType.I32, 8);

  int _space_id = 0;
  static const int SPACE_ID = 1;
  int _job_id = 0;
  static const int JOB_ID = 2;
  int _task_id = 0;
  static const int TASK_ID = 3;
  t_nebula.HostAddr? _host;
  static const int HOST = 4;
  int? _status;
  static const int STATUS = 5;
  int _start_time = 0;
  static const int START_TIME = 6;
  int _stop_time = 0;
  static const int STOP_TIME = 7;
  int? _code;
  static const int CODE = 8;

  bool __isset_space_id = false;
  bool __isset_job_id = false;
  bool __isset_task_id = false;
  bool __isset_status = false;
  bool __isset_start_time = false;
  bool __isset_stop_time = false;
  bool __isset_code = false;

  TaskDesc() {}

  // space_id
  int get space_id => this._space_id;

  set space_id(int space_id) {
    this._space_id = space_id;
    this.__isset_space_id = true;
  }

  bool isSetSpace_id() => this.__isset_space_id;

  unsetSpace_id() {
    this.__isset_space_id = false;
  }

  // job_id
  int get job_id => this._job_id;

  set job_id(int job_id) {
    this._job_id = job_id;
    this.__isset_job_id = true;
  }

  bool isSetJob_id() => this.__isset_job_id;

  unsetJob_id() {
    this.__isset_job_id = false;
  }

  // task_id
  int get task_id => this._task_id;

  set task_id(int task_id) {
    this._task_id = task_id;
    this.__isset_task_id = true;
  }

  bool isSetTask_id() => this.__isset_task_id;

  unsetTask_id() {
    this.__isset_task_id = false;
  }

  // host
  t_nebula.HostAddr? get host => this._host;

  set host(t_nebula.HostAddr? host) {
    this._host = host;
  }

  bool isSetHost() => this.host != null;

  unsetHost() {
    this.host = null;
  }

  // status
  int? get status => this._status;

  set status(int? status) {
    this._status = status;
    this.__isset_status = true;
  }

  bool isSetStatus() => this.__isset_status;

  unsetStatus() {
    this.__isset_status = false;
  }

  // start_time
  int get start_time => this._start_time;

  set start_time(int start_time) {
    this._start_time = start_time;
    this.__isset_start_time = true;
  }

  bool isSetStart_time() => this.__isset_start_time;

  unsetStart_time() {
    this.__isset_start_time = false;
  }

  // stop_time
  int get stop_time => this._stop_time;

  set stop_time(int stop_time) {
    this._stop_time = stop_time;
    this.__isset_stop_time = true;
  }

  bool isSetStop_time() => this.__isset_stop_time;

  unsetStop_time() {
    this.__isset_stop_time = false;
  }

  // code
  int? get code => this._code;

  set code(int? code) {
    this._code = code;
    this.__isset_code = true;
  }

  bool isSetCode() => this.__isset_code;

  unsetCode() {
    this.__isset_code = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return this.space_id;
      case JOB_ID:
        return this.job_id;
      case TASK_ID:
        return this.task_id;
      case HOST:
        return this.host;
      case STATUS:
        return this.status;
      case START_TIME:
        return this.start_time;
      case STOP_TIME:
        return this.stop_time;
      case CODE:
        return this.code;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          this.space_id = value as int;
        }
        break;

      case JOB_ID:
        if (value == null) {
          unsetJob_id();
        } else {
          this.job_id = value as int;
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTask_id();
        } else {
          this.task_id = value as int;
        }
        break;

      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          this.host = value as t_nebula.HostAddr?;
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          this.status = value as int?;
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStart_time();
        } else {
          this.start_time = value as int;
        }
        break;

      case STOP_TIME:
        if (value == null) {
          unsetStop_time();
        } else {
          this.stop_time = value as int;
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          this.code = value as int?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return isSetSpace_id();
      case JOB_ID:
        return isSetJob_id();
      case TASK_ID:
        return isSetTask_id();
      case HOST:
        return isSetHost();
      case STATUS:
        return isSetStatus();
      case START_TIME:
        return isSetStart_time();
      case STOP_TIME:
        return isSetStop_time();
      case CODE:
        return isSetCode();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            this.__isset_space_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case JOB_ID:
          if (field.type == TType.I32) {
            this.job_id = iprot.readI32();
            this.__isset_job_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TASK_ID:
          if (field.type == TType.I32) {
            this.task_id = iprot.readI32();
            this.__isset_task_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOST:
          if (field.type == TType.STRUCT) {
            this.host = new t_nebula.HostAddr();
            this.host?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            this.__isset_status = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case START_TIME:
          if (field.type == TType.I64) {
            this.start_time = iprot.readI64();
            this.__isset_start_time = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STOP_TIME:
          if (field.type == TType.I64) {
            this.stop_time = iprot.readI64();
            this.__isset_stop_time = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CODE:
          if (field.type == TType.I32) {
            this.code = iprot.readI32();
            this.__isset_code = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_JOB_ID_FIELD_DESC);
    oprot.writeI32(this.job_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TASK_ID_FIELD_DESC);
    oprot.writeI32(this.task_id);
    oprot.writeFieldEnd();
    if (this.host != null) {
      oprot.writeFieldBegin(_HOST_FIELD_DESC);
      this.host?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_START_TIME_FIELD_DESC);
    oprot.writeI64(this.start_time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_STOP_TIME_FIELD_DESC);
    oprot.writeI64(this.stop_time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CODE_FIELD_DESC);
    oprot.writeI32(this.code);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TaskDesc(");

    ret.write("space_id:");
    ret.write(this.space_id);

    ret.write(", ");
    ret.write("job_id:");
    ret.write(this.job_id);

    ret.write(", ");
    ret.write("task_id:");
    ret.write(this.task_id);

    ret.write(", ");
    ret.write("host:");
    if (this.host == null) {
      ret.write("null");
    } else {
      ret.write(this.host);
    }

    ret.write(", ");
    ret.write("status:");
    String? status_name = JobStatus.VALUES_TO_NAMES[this.status];
    if (status_name != null) {
      ret.write(status_name);
      ret.write(" (");
    }
    ret.write(this.status);
    if (status_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("start_time:");
    ret.write(this.start_time);

    ret.write(", ");
    ret.write("stop_time:");
    ret.write(this.stop_time);

    ret.write(", ");
    ret.write("code:");
    String? code_name = t_nebula.ErrorCode.VALUES_TO_NAMES[this.code];
    if (code_name != null) {
      ret.write(code_name);
      ret.write(" (");
    }
    ret.write(this.code);
    if (code_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !JobStatus.VALID_VALUES.contains(status)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'status' has been assigned the invalid value $status");
    }
    if (isSetCode() && !t_nebula.ErrorCode.VALID_VALUES.contains(code)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'code' has been assigned the invalid value $code");
    }
  }
}
