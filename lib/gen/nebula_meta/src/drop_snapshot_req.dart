// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.drop_snapshot_req;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class DropSnapshotReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("DropSnapshotReq");
  static final TField _NAMES_FIELD_DESC = new TField("names", TType.LIST, 1);

  List<Int8List>? _names;
  static const int NAMES = 1;

  DropSnapshotReq() {}

  // names
  List<Int8List>? get names => this._names;

  set names(List<Int8List>? names) {
    this._names = names;
  }

  bool isSetNames() => this.names != null;

  unsetNames() {
    this.names = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NAMES:
        return this.names;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case NAMES:
        if (value == null) {
          unsetNames();
        } else {
          this.names = value as List<Int8List>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NAMES:
        return isSetNames();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NAMES:
          if (field.type == TType.LIST) {
            {
              TList _list216 = iprot.readListBegin();
              this.names = <Int8List>[];
              for (int _i217 = 0; _i217 < _list216.length; ++_i217) {
                Int8List _elem218;
                _elem218 = iprot.readBinary();
                this.names?.add(_elem218);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.names != null) {
      oprot.writeFieldBegin(_NAMES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.names?.length));
        for (var elem219 in this.names ?? []) {
          oprot.writeBinary(elem219);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("DropSnapshotReq(");

    ret.write("names:");
    if (this.names == null) {
      ret.write("null");
    } else {
      ret.write(this.names);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
