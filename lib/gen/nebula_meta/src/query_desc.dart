/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.query_desc;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class QueryDesc implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("QueryDesc");
  static final TField _START_TIME_FIELD_DESC =
      new TField("start_time", TType.I64, 1);
  static final TField _STATUS_FIELD_DESC = new TField("status", TType.I32, 2);
  static final TField _DURATION_FIELD_DESC =
      new TField("duration", TType.I64, 3);
  static final TField _QUERY_FIELD_DESC = new TField("query", TType.STRING, 4);
  static final TField _GRAPH_ADDR_FIELD_DESC =
      new TField("graph_addr", TType.STRUCT, 5);

  int _start_time = 0;
  static const int START_TIME = 1;
  int? _status;
  static const int STATUS = 2;
  int? _duration = 0;
  static const int DURATION = 3;
  Int8List? _query;
  static const int QUERY = 4;
  t_nebula.HostAddr? _graph_addr;
  static const int GRAPH_ADDR = 5;

  bool __isset_start_time = false;
  bool __isset_status = false;
  bool __isset_duration = false;

  QueryDesc() {}

  // start_time
  int get start_time => this._start_time;

  set start_time(int start_time) {
    this._start_time = start_time;
    this.__isset_start_time = true;
  }

  bool isSetStart_time() => this.__isset_start_time;

  unsetStart_time() {
    this.__isset_start_time = false;
  }

  // status
  int? get status => this._status;

  set status(int? status) {
    this._status = status;
    this.__isset_status = true;
  }

  bool isSetStatus() => this.__isset_status;

  unsetStatus() {
    this.__isset_status = false;
  }

  // duration
  int? get duration => this._duration;

  set duration(int? duration) {
    this._duration = duration;
    this.__isset_duration = true;
  }

  bool isSetDuration() => this.__isset_duration;

  unsetDuration() {
    this.__isset_duration = false;
  }

  // query
  Int8List? get query => this._query;

  set query(Int8List? query) {
    this._query = query;
  }

  bool isSetQuery() => this.query != null;

  unsetQuery() {
    this.query = null;
  }

  // graph_addr
  t_nebula.HostAddr? get graph_addr => this._graph_addr;

  set graph_addr(t_nebula.HostAddr? graph_addr) {
    this._graph_addr = graph_addr;
  }

  bool isSetGraph_addr() => this.graph_addr != null;

  unsetGraph_addr() {
    this.graph_addr = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case START_TIME:
        return this.start_time;
      case STATUS:
        return this.status;
      case DURATION:
        return this.duration;
      case QUERY:
        return this.query;
      case GRAPH_ADDR:
        return this.graph_addr;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case START_TIME:
        if (value == null) {
          unsetStart_time();
        } else {
          this.start_time = value as int;
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          this.status = value as int;
        }
        break;

      case DURATION:
        if (value == null) {
          unsetDuration();
        } else {
          this.duration = value as int;
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          this.query = value as Int8List;
        }
        break;

      case GRAPH_ADDR:
        if (value == null) {
          unsetGraph_addr();
        } else {
          this.graph_addr = value as t_nebula.HostAddr;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case START_TIME:
        return isSetStart_time();
      case STATUS:
        return isSetStatus();
      case DURATION:
        return isSetDuration();
      case QUERY:
        return isSetQuery();
      case GRAPH_ADDR:
        return isSetGraph_addr();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case START_TIME:
          if (field.type == TType.I64) {
            this.start_time = iprot.readI64();
            this.__isset_start_time = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            this.__isset_status = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DURATION:
          if (field.type == TType.I64) {
            this.duration = iprot.readI64();
            this.__isset_duration = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case QUERY:
          if (field.type == TType.STRING) {
            this.query = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GRAPH_ADDR:
          if (field.type == TType.STRUCT) {
            this.graph_addr = new t_nebula.HostAddr();
            this.graph_addr?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_START_TIME_FIELD_DESC);
    oprot.writeI64(this.start_time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_DURATION_FIELD_DESC);
    oprot.writeI64(this.duration);
    oprot.writeFieldEnd();
    if (this.query != null) {
      oprot.writeFieldBegin(_QUERY_FIELD_DESC);
      oprot.writeBinary(this.query);
      oprot.writeFieldEnd();
    }
    if (this.graph_addr != null) {
      oprot.writeFieldBegin(_GRAPH_ADDR_FIELD_DESC);
      this.graph_addr?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("QueryDesc(");

    ret.write("start_time:");
    ret.write(this.start_time);

    ret.write(", ");
    ret.write("status:");
    String? status_name = QueryStatus.VALUES_TO_NAMES[this.status];
    if (status_name != null) {
      ret.write(status_name);
      ret.write(" (");
    }
    ret.write(this.status);
    if (status_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("duration:");
    ret.write(this.duration);

    ret.write(", ");
    ret.write("query:");
    if (this.query == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("graph_addr:");
    if (this.graph_addr == null) {
      ret.write("null");
    } else {
      ret.write(this.graph_addr);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !QueryStatus.VALID_VALUES.contains(status)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'status' has been assigned the invalid value $status");
    }
  }
}
