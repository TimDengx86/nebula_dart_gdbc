/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.space_backup_info;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class SpaceBackupInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SpaceBackupInfo");
  static final TField _SPACE_FIELD_DESC = new TField("space", TType.STRUCT, 1);
  static final TField _HOST_BACKUPS_FIELD_DESC =
      new TField("host_backups", TType.LIST, 2);

  SpaceDesc? _space;
  static const int SPACE = 1;
  List<HostBackupInfo>? _host_backups;
  static const int HOST_BACKUPS = 2;

  SpaceBackupInfo() {}

  // space
  SpaceDesc? get space => this._space;

  set space(SpaceDesc? space) {
    this._space = space;
  }

  bool isSetSpace() => this.space != null;

  unsetSpace() {
    this.space = null;
  }

  // host_backups
  List<HostBackupInfo>? get host_backups => this._host_backups;

  set host_backups(List<HostBackupInfo>? host_backups) {
    this._host_backups = host_backups;
  }

  bool isSetHost_backups() => this.host_backups != null;

  unsetHost_backups() {
    this.host_backups = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE:
        return this.space;
      case HOST_BACKUPS:
        return this.host_backups;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE:
        if (value == null) {
          unsetSpace();
        } else {
          this.space = value as SpaceDesc;
        }
        break;

      case HOST_BACKUPS:
        if (value == null) {
          unsetHost_backups();
        } else {
          this.host_backups = value as List<HostBackupInfo>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE:
        return isSetSpace();
      case HOST_BACKUPS:
        return isSetHost_backups();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE:
          if (field.type == TType.STRUCT) {
            this.space = new SpaceDesc();
            this.space?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOST_BACKUPS:
          if (field.type == TType.LIST) {
            {
              TList _list270 = iprot.readListBegin();
              this.host_backups = <HostBackupInfo>[];
              for (int _i271 = 0; _i271 < _list270.length; ++_i271) {
                HostBackupInfo _elem272;
                _elem272 = new HostBackupInfo();
                _elem272.read(iprot);
                this.host_backups?.add(_elem272);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.space != null) {
      oprot.writeFieldBegin(_SPACE_FIELD_DESC);
      this.space?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.host_backups != null) {
      oprot.writeFieldBegin(_HOST_BACKUPS_FIELD_DESC);
      {
        oprot
            .writeListBegin(new TList(TType.STRUCT, this.host_backups?.length));
        for (var elem273 in this.host_backups ?? []) {
          elem273.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SpaceBackupInfo(");

    ret.write("space:");
    if (this.space == null) {
      ret.write("null");
    } else {
      ret.write(this.space);
    }

    ret.write(", ");
    ret.write("host_backups:");
    if (this.host_backups == null) {
      ret.write("null");
    } else {
      ret.write(this.host_backups);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
