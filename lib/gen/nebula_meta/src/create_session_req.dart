// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.create_session_req;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class CreateSessionReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CreateSessionReq");
  static final TField _USER_FIELD_DESC = new TField("user", TType.STRING, 1);
  static final TField _GRAPH_ADDR_FIELD_DESC =
      new TField("graph_addr", TType.STRUCT, 2);
  static final TField _CLIENT_IP_FIELD_DESC =
      new TField("client_ip", TType.STRING, 3);

  Int8List? _user;
  static const int USER = 1;
  t_nebula.HostAddr? _graph_addr;
  static const int GRAPH_ADDR = 2;
  Int8List? _client_ip;
  static const int CLIENT_IP = 3;

  CreateSessionReq() {}

  // user
  Int8List? get user => this._user;

  set user(Int8List? user) {
    this._user = user;
  }

  bool isSetUser() => this.user != null;

  unsetUser() {
    this.user = null;
  }

  // graph_addr
  t_nebula.HostAddr? get graph_addr => this._graph_addr;

  set graph_addr(t_nebula.HostAddr? graph_addr) {
    this._graph_addr = graph_addr;
  }

  bool isSetGraph_addr() => this.graph_addr != null;

  unsetGraph_addr() {
    this.graph_addr = null;
  }

  // client_ip
  Int8List? get client_ip => this._client_ip;

  set client_ip(Int8List? client_ip) {
    this._client_ip = client_ip;
  }

  bool isSetClient_ip() => this.client_ip != null;

  unsetClient_ip() {
    this.client_ip = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case USER:
        return this.user;
      case GRAPH_ADDR:
        return this.graph_addr;
      case CLIENT_IP:
        return this.client_ip;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          this.user = value as Int8List;
        }
        break;

      case GRAPH_ADDR:
        if (value == null) {
          unsetGraph_addr();
        } else {
          this.graph_addr = value as t_nebula.HostAddr;
        }
        break;

      case CLIENT_IP:
        if (value == null) {
          unsetClient_ip();
        } else {
          this.client_ip = value as Int8List;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case USER:
        return isSetUser();
      case GRAPH_ADDR:
        return isSetGraph_addr();
      case CLIENT_IP:
        return isSetClient_ip();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case USER:
          if (field.type == TType.STRING) {
            this.user = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GRAPH_ADDR:
          if (field.type == TType.STRUCT) {
            this.graph_addr = new t_nebula.HostAddr();
            this.graph_addr?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLIENT_IP:
          if (field.type == TType.STRING) {
            this.client_ip = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.user != null) {
      oprot.writeFieldBegin(_USER_FIELD_DESC);
      oprot.writeBinary(this.user);
      oprot.writeFieldEnd();
    }
    if (this.graph_addr != null) {
      oprot.writeFieldBegin(_GRAPH_ADDR_FIELD_DESC);
      this.graph_addr?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.client_ip != null) {
      oprot.writeFieldBegin(_CLIENT_IP_FIELD_DESC);
      oprot.writeBinary(this.client_ip);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CreateSessionReq(");

    ret.write("user:");
    if (this.user == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("graph_addr:");
    if (this.graph_addr == null) {
      ret.write("null");
    } else {
      ret.write(this.graph_addr);
    }

    ret.write(", ");
    ret.write("client_ip:");
    if (this.client_ip == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
