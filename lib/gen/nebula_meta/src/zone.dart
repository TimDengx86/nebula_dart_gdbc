// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.zone;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class Zone implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Zone");
  static final TField _ZONE_NAME_FIELD_DESC =
      new TField("zone_name", TType.STRING, 1);
  static final TField _NODES_FIELD_DESC = new TField("nodes", TType.LIST, 2);

  Int8List? _zone_name;
  static const int ZONE_NAME = 1;
  List<t_nebula.HostAddr>? _nodes;
  static const int NODES = 2;

  Zone() {}

  // zone_name
  Int8List? get zone_name => this._zone_name;

  set zone_name(Int8List? zone_name) {
    this._zone_name = zone_name;
  }

  bool isSetZone_name() => this.zone_name != null;

  unsetZone_name() {
    this.zone_name = null;
  }

  // nodes
  List<t_nebula.HostAddr>? get nodes => this._nodes;

  set nodes(List<t_nebula.HostAddr>? nodes) {
    this._nodes = nodes;
  }

  bool isSetNodes() => this.nodes != null;

  unsetNodes() {
    this.nodes = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ZONE_NAME:
        return this.zone_name;
      case NODES:
        return this.nodes;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case ZONE_NAME:
        if (value == null) {
          unsetZone_name();
        } else {
          this.zone_name = value as Int8List?;
        }
        break;

      case NODES:
        if (value == null) {
          unsetNodes();
        } else {
          this.nodes = value as List<t_nebula.HostAddr>?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ZONE_NAME:
        return isSetZone_name();
      case NODES:
        return isSetNodes();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ZONE_NAME:
          if (field.type == TType.STRING) {
            this.zone_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NODES:
          if (field.type == TType.LIST) {
            {
              TList _list250 = iprot.readListBegin();
              this.nodes = <t_nebula.HostAddr>[];
              for (int _i251 = 0; _i251 < _list250.length; ++_i251) {
                t_nebula.HostAddr _elem252;
                _elem252 = new t_nebula.HostAddr();
                _elem252.read(iprot);
                this.nodes?.add(_elem252);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.zone_name != null) {
      oprot.writeFieldBegin(_ZONE_NAME_FIELD_DESC);
      oprot.writeBinary(this.zone_name);
      oprot.writeFieldEnd();
    }
    if (this.nodes != null) {
      oprot.writeFieldBegin(_NODES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.nodes?.length));
        for (var elem253 in this.nodes ?? []) {
          elem253.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Zone(");

    ret.write("zone_name:");
    if (this.zone_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("nodes:");
    if (this.nodes == null) {
      ret.write("null");
    } else {
      ret.write(this.nodes);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
