/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.alter_schema_item;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class AlterSchemaItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AlterSchemaItem");
  static final TField _OP_FIELD_DESC = new TField("op", TType.I32, 1);
  static final TField _SCHEMA_FIELD_DESC =
      new TField("schema", TType.STRUCT, 2);

  int? _op;
  static const int OP = 1;
  Schema? _schema;
  static const int SCHEMA = 2;

  bool __isset_op = false;

  AlterSchemaItem() {}

  // op
  int? get op => this._op;

  set op(int? op) {
    this._op = op;
    this.__isset_op = true;
  }

  bool isSetOp() => this.__isset_op;

  unsetOp() {
    this.__isset_op = false;
  }

  // schema
  Schema? get schema => this._schema;

  set schema(Schema? schema) {
    this._schema = schema;
  }

  bool isSetSchema() => this.schema != null;

  unsetSchema() {
    this.schema = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case OP:
        return this.op;
      case SCHEMA:
        return this.schema;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case OP:
        if (value == null) {
          unsetOp();
        } else {
          this.op = value as int;
        }
        break;

      case SCHEMA:
        if (value == null) {
          unsetSchema();
        } else {
          this.schema = value as Schema;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case OP:
        return isSetOp();
      case SCHEMA:
        return isSetSchema();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case OP:
          if (field.type == TType.I32) {
            this.op = iprot.readI32();
            this.__isset_op = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCHEMA:
          if (field.type == TType.STRUCT) {
            this.schema = new Schema();
            this.schema?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_OP_FIELD_DESC);
    oprot.writeI32(this.op);
    oprot.writeFieldEnd();
    if (this.schema != null) {
      oprot.writeFieldBegin(_SCHEMA_FIELD_DESC);
      this.schema?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AlterSchemaItem(");

    ret.write("op:");
    String? op_name = AlterSchemaOp.VALUES_TO_NAMES[this.op];
    if (op_name != null) {
      ret.write(op_name);
      ret.write(" (");
    }
    ret.write(this.op);
    if (op_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("schema:");
    if (this.schema == null) {
      ret.write("null");
    } else {
      ret.write(this.schema);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetOp() && !AlterSchemaOp.VALID_VALUES.contains(op)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'op' has been assigned the invalid value $op");
    }
  }
}
