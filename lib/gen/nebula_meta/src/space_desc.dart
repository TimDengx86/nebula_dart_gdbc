/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.space_desc;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class SpaceDesc implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SpaceDesc");
  static final TField _SPACE_NAME_FIELD_DESC =
      new TField("space_name", TType.STRING, 1);
  static final TField _PARTITION_NUM_FIELD_DESC =
      new TField("partition_num", TType.I32, 2);
  static final TField _REPLICA_FACTOR_FIELD_DESC =
      new TField("replica_factor", TType.I32, 3);
  static final TField _CHARSET_NAME_FIELD_DESC =
      new TField("charset_name", TType.STRING, 4);
  static final TField _COLLATE_NAME_FIELD_DESC =
      new TField("collate_name", TType.STRING, 5);
  static final TField _VID_TYPE_FIELD_DESC =
      new TField("vid_type", TType.STRUCT, 6);
  static final TField _ZONE_NAMES_FIELD_DESC =
      new TField("zone_names", TType.LIST, 7);
  static final TField _ISOLATION_LEVEL_FIELD_DESC =
      new TField("isolation_level", TType.I32, 8);
  static final TField _COMMENT_FIELD_DESC =
      new TField("comment", TType.STRING, 9);

  Int8List? _space_name;
  static const int SPACE_NAME = 1;
  int _partition_num = 0;
  static const int PARTITION_NUM = 2;
  int _replica_factor = 0;
  static const int REPLICA_FACTOR = 3;
  Int8List? _charset_name;
  static const int CHARSET_NAME = 4;
  Int8List? _collate_name;
  static const int COLLATE_NAME = 5;
  ColumnTypeDef? _vid_type;
  static const int VID_TYPE = 6;
  List<Int8List>? _zone_names;
  static const int ZONE_NAMES = 7;
  int? _isolation_level;
  static const int ISOLATION_LEVEL = 8;
  Int8List? _comment;
  static const int COMMENT = 9;

  bool __isset_partition_num = false;
  bool __isset_replica_factor = false;
  bool __isset_isolation_level = false;

  SpaceDesc() {
    this.partition_num = 0;

    this.replica_factor = 0;

    this.vid_type = new ColumnTypeDef()
      ..type = 7
      ..type_length = 8;
  }

  // space_name
  Int8List? get space_name => this._space_name;

  set space_name(Int8List? space_name) {
    this._space_name = space_name;
  }

  bool isSetSpace_name() => this.space_name != null;

  unsetSpace_name() {
    this.space_name = null;
  }

  // partition_num
  int get partition_num => this._partition_num;

  set partition_num(int partition_num) {
    this._partition_num = partition_num;
    this.__isset_partition_num = true;
  }

  bool isSetPartition_num() => this.__isset_partition_num;

  unsetPartition_num() {
    this.__isset_partition_num = false;
  }

  // replica_factor
  int get replica_factor => this._replica_factor;

  set replica_factor(int replica_factor) {
    this._replica_factor = replica_factor;
    this.__isset_replica_factor = true;
  }

  bool isSetReplica_factor() => this.__isset_replica_factor;

  unsetReplica_factor() {
    this.__isset_replica_factor = false;
  }

  // charset_name
  Int8List? get charset_name => this._charset_name;

  set charset_name(Int8List? charset_name) {
    this._charset_name = charset_name;
  }

  bool isSetCharset_name() => this.charset_name != null;

  unsetCharset_name() {
    this.charset_name = null;
  }

  // collate_name
  Int8List? get collate_name => this._collate_name;

  set collate_name(Int8List? collate_name) {
    this._collate_name = collate_name;
  }

  bool isSetCollate_name() => this.collate_name != null;

  unsetCollate_name() {
    this.collate_name = null;
  }

  // vid_type
  ColumnTypeDef? get vid_type => this._vid_type;

  set vid_type(ColumnTypeDef? vid_type) {
    this._vid_type = vid_type;
  }

  bool isSetVid_type() => this.vid_type != null;

  unsetVid_type() {
    this.vid_type = null;
  }

  // zone_names
  List<Int8List>? get zone_names => this._zone_names;

  set zone_names(List<Int8List>? zone_names) {
    this._zone_names = zone_names;
  }

  bool isSetZone_names() => this.zone_names != null;

  unsetZone_names() {
    this.zone_names = null;
  }

  // isolation_level
  int? get isolation_level => this._isolation_level;

  set isolation_level(int? isolation_level) {
    this._isolation_level = isolation_level;
    this.__isset_isolation_level = true;
  }

  bool isSetIsolation_level() => this.__isset_isolation_level;

  unsetIsolation_level() {
    this.__isset_isolation_level = false;
  }

  // comment
  Int8List? get comment => this._comment;

  set comment(Int8List? comment) {
    this._comment = comment;
  }

  bool isSetComment() => this.comment != null;

  unsetComment() {
    this.comment = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_NAME:
        return this.space_name;
      case PARTITION_NUM:
        return this.partition_num;
      case REPLICA_FACTOR:
        return this.replica_factor;
      case CHARSET_NAME:
        return this.charset_name;
      case COLLATE_NAME:
        return this.collate_name;
      case VID_TYPE:
        return this.vid_type;
      case ZONE_NAMES:
        return this.zone_names;
      case ISOLATION_LEVEL:
        return this.isolation_level;
      case COMMENT:
        return this.comment;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE_NAME:
        if (value == null) {
          unsetSpace_name();
        } else {
          this.space_name = value as Int8List?;
        }
        break;

      case PARTITION_NUM:
        if (value == null) {
          unsetPartition_num();
        } else {
          this.partition_num = value as int;
        }
        break;

      case REPLICA_FACTOR:
        if (value == null) {
          unsetReplica_factor();
        } else {
          this.replica_factor = value as int;
        }
        break;

      case CHARSET_NAME:
        if (value == null) {
          unsetCharset_name();
        } else {
          this.charset_name = value as Int8List?;
        }
        break;

      case COLLATE_NAME:
        if (value == null) {
          unsetCollate_name();
        } else {
          this.collate_name = value as Int8List?;
        }
        break;

      case VID_TYPE:
        if (value == null) {
          unsetVid_type();
        } else {
          this.vid_type = value as ColumnTypeDef?;
        }
        break;

      case ZONE_NAMES:
        if (value == null) {
          unsetZone_names();
        } else {
          this.zone_names = value as List<Int8List>?;
        }
        break;

      case ISOLATION_LEVEL:
        if (value == null) {
          unsetIsolation_level();
        } else {
          this.isolation_level = value as int?;
        }
        break;

      case COMMENT:
        if (value == null) {
          unsetComment();
        } else {
          this.comment = value as Int8List?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_NAME:
        return isSetSpace_name();
      case PARTITION_NUM:
        return isSetPartition_num();
      case REPLICA_FACTOR:
        return isSetReplica_factor();
      case CHARSET_NAME:
        return isSetCharset_name();
      case COLLATE_NAME:
        return isSetCollate_name();
      case VID_TYPE:
        return isSetVid_type();
      case ZONE_NAMES:
        return isSetZone_names();
      case ISOLATION_LEVEL:
        return isSetIsolation_level();
      case COMMENT:
        return isSetComment();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_NAME:
          if (field.type == TType.STRING) {
            this.space_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARTITION_NUM:
          if (field.type == TType.I32) {
            this.partition_num = iprot.readI32();
            this.__isset_partition_num = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REPLICA_FACTOR:
          if (field.type == TType.I32) {
            this.replica_factor = iprot.readI32();
            this.__isset_replica_factor = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHARSET_NAME:
          if (field.type == TType.STRING) {
            this.charset_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COLLATE_NAME:
          if (field.type == TType.STRING) {
            this.collate_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VID_TYPE:
          if (field.type == TType.STRUCT) {
            this.vid_type = new ColumnTypeDef();
            this.vid_type?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ZONE_NAMES:
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.zone_names = <Int8List>[];
              for (int _i5 = 0; _i5 < _list4.length; ++_i5) {
                Int8List _elem6;
                _elem6 = iprot.readBinary();
                this.zone_names?.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ISOLATION_LEVEL:
          if (field.type == TType.I32) {
            this.isolation_level = iprot.readI32();
            this.__isset_isolation_level = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMENT:
          if (field.type == TType.STRING) {
            this.comment = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.space_name != null) {
      oprot.writeFieldBegin(_SPACE_NAME_FIELD_DESC);
      oprot.writeBinary(this.space_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PARTITION_NUM_FIELD_DESC);
    oprot.writeI32(this.partition_num);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_REPLICA_FACTOR_FIELD_DESC);
    oprot.writeI32(this.replica_factor);
    oprot.writeFieldEnd();
    if (this.charset_name != null) {
      oprot.writeFieldBegin(_CHARSET_NAME_FIELD_DESC);
      oprot.writeBinary(this.charset_name);
      oprot.writeFieldEnd();
    }
    if (this.collate_name != null) {
      oprot.writeFieldBegin(_COLLATE_NAME_FIELD_DESC);
      oprot.writeBinary(this.collate_name);
      oprot.writeFieldEnd();
    }
    if (this.vid_type != null) {
      oprot.writeFieldBegin(_VID_TYPE_FIELD_DESC);
      this.vid_type?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.zone_names != null) {
      oprot.writeFieldBegin(_ZONE_NAMES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.zone_names?.length));
        for (var elem7 in this.zone_names ?? []) {
          oprot.writeBinary(elem7);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (isSetIsolation_level()) {
      oprot.writeFieldBegin(_ISOLATION_LEVEL_FIELD_DESC);
      oprot.writeI32(this.isolation_level);
      oprot.writeFieldEnd();
    }
    if (isSetComment()) {
      if (this.comment != null) {
        oprot.writeFieldBegin(_COMMENT_FIELD_DESC);
        oprot.writeBinary(this.comment);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SpaceDesc(");

    ret.write("space_name:");
    if (this.space_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("partition_num:");
    ret.write(this.partition_num);

    ret.write(", ");
    ret.write("replica_factor:");
    ret.write(this.replica_factor);

    ret.write(", ");
    ret.write("charset_name:");
    if (this.charset_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("collate_name:");
    if (this.collate_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("vid_type:");
    if (this.vid_type == null) {
      ret.write("null");
    } else {
      ret.write(this.vid_type);
    }

    ret.write(", ");
    ret.write("zone_names:");
    if (this.zone_names == null) {
      ret.write("null");
    } else {
      ret.write(this.zone_names);
    }

    if (isSetIsolation_level()) {
      ret.write(", ");
      ret.write("isolation_level:");
      String? isolation_level_name =
          IsolationLevel.VALUES_TO_NAMES[this.isolation_level];
      if (isolation_level_name != null) {
        ret.write(isolation_level_name);
        ret.write(" (");
      }
      ret.write(this.isolation_level);
      if (isolation_level_name != null) {
        ret.write(")");
      }
    }

    if (isSetComment()) {
      ret.write(", ");
      ret.write("comment:");
      if (this.comment == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetIsolation_level() &&
        !IsolationLevel.VALID_VALUES.contains(isolation_level)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'isolation_level' has been assigned the invalid value $isolation_level");
    }
  }
}
