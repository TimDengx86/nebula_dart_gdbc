/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.backup_meta;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class BackupMeta implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("BackupMeta");
  static final TField _SPACE_BACKUPS_FIELD_DESC =
      new TField("space_backups", TType.MAP, 1);
  static final TField _META_FILES_FIELD_DESC =
      new TField("meta_files", TType.LIST, 2);
  static final TField _BACKUP_NAME_FIELD_DESC =
      new TField("backup_name", TType.STRING, 3);
  static final TField _FULL_FIELD_DESC = new TField("full", TType.BOOL, 4);
  static final TField _ALL_SPACES_FIELD_DESC =
      new TField("all_spaces", TType.BOOL, 5);
  static final TField _CREATE_TIME_FIELD_DESC =
      new TField("create_time", TType.I64, 6);
  static final TField _BASE_BACKUP_NAME_FIELD_DESC =
      new TField("base_backup_name", TType.STRING, 7);
  static final TField _STORAGE_HOSTS_FIELD_DESC =
      new TField("storage_hosts", TType.LIST, 8);
  static final TField _CLUSTER_ID_FIELD_DESC =
      new TField("cluster_id", TType.I64, 9);

  Map<int, SpaceBackupInfo>? _space_backups;
  static const int SPACE_BACKUPS = 1;
  List<Int8List>? _meta_files;
  static const int META_FILES = 2;
  Int8List? _backup_name;
  static const int BACKUP_NAME = 3;
  bool _full = false;
  static const int FULL = 4;
  bool _all_spaces = false;
  static const int ALL_SPACES = 5;
  int _create_time = 0;
  static const int CREATE_TIME = 6;
  Int8List? _base_backup_name;
  static const int BASE_BACKUP_NAME = 7;
  List<t_nebula.HostAddr>? _storage_hosts;
  static const int STORAGE_HOSTS = 8;
  int _cluster_id = 0;
  static const int CLUSTER_ID = 9;

  bool __isset_full = false;
  bool __isset_all_spaces = false;
  bool __isset_create_time = false;
  bool __isset_cluster_id = false;

  BackupMeta() {}

  // space_backups
  Map<int, SpaceBackupInfo>? get space_backups => this._space_backups;

  set space_backups(Map<int, SpaceBackupInfo>? space_backups) {
    this._space_backups = space_backups;
  }

  bool isSetSpace_backups() => this.space_backups != null;

  unsetSpace_backups() {
    this.space_backups = null;
  }

  // meta_files
  List<Int8List>? get meta_files => this._meta_files;

  set meta_files(List<Int8List>? meta_files) {
    this._meta_files = meta_files;
  }

  bool isSetMeta_files() => this.meta_files != null;

  unsetMeta_files() {
    this.meta_files = null;
  }

  // backup_name
  Int8List? get backup_name => this._backup_name;

  set backup_name(Int8List? backup_name) {
    this._backup_name = backup_name;
  }

  bool isSetBackup_name() => this.backup_name != null;

  unsetBackup_name() {
    this.backup_name = null;
  }

  // full
  bool get full => this._full;

  set full(bool full) {
    this._full = full;
    this.__isset_full = true;
  }

  bool isSetFull() => this.__isset_full;

  unsetFull() {
    this.__isset_full = false;
  }

  // all_spaces
  bool get all_spaces => this._all_spaces;

  set all_spaces(bool all_spaces) {
    this._all_spaces = all_spaces;
    this.__isset_all_spaces = true;
  }

  bool isSetAll_spaces() => this.__isset_all_spaces;

  unsetAll_spaces() {
    this.__isset_all_spaces = false;
  }

  // create_time
  int get create_time => this._create_time;

  set create_time(int create_time) {
    this._create_time = create_time;
    this.__isset_create_time = true;
  }

  bool isSetCreate_time() => this.__isset_create_time;

  unsetCreate_time() {
    this.__isset_create_time = false;
  }

  // base_backup_name
  Int8List? get base_backup_name => this._base_backup_name;

  set base_backup_name(Int8List? base_backup_name) {
    this._base_backup_name = base_backup_name;
  }

  bool isSetBase_backup_name() => this.base_backup_name != null;

  unsetBase_backup_name() {
    this.base_backup_name = null;
  }

  // storage_hosts
  List<t_nebula.HostAddr>? get storage_hosts => this._storage_hosts;

  set storage_hosts(List<t_nebula.HostAddr>? storage_hosts) {
    this._storage_hosts = storage_hosts;
  }

  bool isSetStorage_hosts() => this.storage_hosts != null;

  unsetStorage_hosts() {
    this.storage_hosts = null;
  }

  // cluster_id
  int get cluster_id => this._cluster_id;

  set cluster_id(int cluster_id) {
    this._cluster_id = cluster_id;
    this.__isset_cluster_id = true;
  }

  bool isSetCluster_id() => this.__isset_cluster_id;

  unsetCluster_id() {
    this.__isset_cluster_id = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_BACKUPS:
        return this.space_backups;
      case META_FILES:
        return this.meta_files;
      case BACKUP_NAME:
        return this.backup_name;
      case FULL:
        return this.full;
      case ALL_SPACES:
        return this.all_spaces;
      case CREATE_TIME:
        return this.create_time;
      case BASE_BACKUP_NAME:
        return this.base_backup_name;
      case STORAGE_HOSTS:
        return this.storage_hosts;
      case CLUSTER_ID:
        return this.cluster_id;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE_BACKUPS:
        if (value == null) {
          unsetSpace_backups();
        } else {
          this.space_backups = value as Map<int, SpaceBackupInfo>;
        }
        break;

      case META_FILES:
        if (value == null) {
          unsetMeta_files();
        } else {
          this.meta_files = value as List<Int8List>;
        }
        break;

      case BACKUP_NAME:
        if (value == null) {
          unsetBackup_name();
        } else {
          this.backup_name = value as Int8List;
        }
        break;

      case FULL:
        if (value == null) {
          unsetFull();
        } else {
          this.full = value as bool;
        }
        break;

      case ALL_SPACES:
        if (value == null) {
          unsetAll_spaces();
        } else {
          this.all_spaces = value as bool;
        }
        break;

      case CREATE_TIME:
        if (value == null) {
          unsetCreate_time();
        } else {
          this.create_time = value as int;
        }
        break;

      case BASE_BACKUP_NAME:
        if (value == null) {
          unsetBase_backup_name();
        } else {
          this.base_backup_name = value as Int8List;
        }
        break;

      case STORAGE_HOSTS:
        if (value == null) {
          unsetStorage_hosts();
        } else {
          this.storage_hosts = value as List<t_nebula.HostAddr>;
        }
        break;

      case CLUSTER_ID:
        if (value == null) {
          unsetCluster_id();
        } else {
          this.cluster_id = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_BACKUPS:
        return isSetSpace_backups();
      case META_FILES:
        return isSetMeta_files();
      case BACKUP_NAME:
        return isSetBackup_name();
      case FULL:
        return isSetFull();
      case ALL_SPACES:
        return isSetAll_spaces();
      case CREATE_TIME:
        return isSetCreate_time();
      case BASE_BACKUP_NAME:
        return isSetBase_backup_name();
      case STORAGE_HOSTS:
        return isSetStorage_hosts();
      case CLUSTER_ID:
        return isSetCluster_id();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_BACKUPS:
          if (field.type == TType.MAP) {
            {
              TMap _map274 = iprot.readMapBegin();
              this.space_backups = new Map<int, SpaceBackupInfo>();
              for (int _i275 = 0; _i275 < _map274.length; ++_i275) {
                int _key276;
                SpaceBackupInfo _val277;
                _key276 = iprot.readI32();
                _val277 = new SpaceBackupInfo();
                _val277.read(iprot);
                this.space_backups?[_key276] = _val277;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case META_FILES:
          if (field.type == TType.LIST) {
            {
              TList _list278 = iprot.readListBegin();
              this.meta_files = <Int8List>[];
              for (int _i279 = 0; _i279 < _list278.length; ++_i279) {
                Int8List _elem280;
                _elem280 = iprot.readBinary();
                this.meta_files?.add(_elem280);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BACKUP_NAME:
          if (field.type == TType.STRING) {
            this.backup_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FULL:
          if (field.type == TType.BOOL) {
            this.full = iprot.readBool();
            this.__isset_full = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ALL_SPACES:
          if (field.type == TType.BOOL) {
            this.all_spaces = iprot.readBool();
            this.__isset_all_spaces = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATE_TIME:
          if (field.type == TType.I64) {
            this.create_time = iprot.readI64();
            this.__isset_create_time = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BASE_BACKUP_NAME:
          if (field.type == TType.STRING) {
            this.base_backup_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STORAGE_HOSTS:
          if (field.type == TType.LIST) {
            {
              TList _list281 = iprot.readListBegin();
              this.storage_hosts = <t_nebula.HostAddr>[];
              for (int _i282 = 0; _i282 < _list281.length; ++_i282) {
                t_nebula.HostAddr _elem283;
                _elem283 = new t_nebula.HostAddr();
                _elem283.read(iprot);
                this.storage_hosts?.add(_elem283);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLUSTER_ID:
          if (field.type == TType.I64) {
            this.cluster_id = iprot.readI64();
            this.__isset_cluster_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.space_backups != null) {
      oprot.writeFieldBegin(_SPACE_BACKUPS_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.I32, TType.STRUCT, this.space_backups?.length));
        for (var elem285 in this.space_backups?.keys ?? <int>[]) {
          oprot.writeI32(elem285);
          this.space_backups?[elem285]?.write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.meta_files != null) {
      oprot.writeFieldBegin(_META_FILES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.meta_files?.length));
        for (var elem286 in this.meta_files ?? <Int8List>[]) {
          oprot.writeBinary(elem286);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.backup_name != null) {
      oprot.writeFieldBegin(_BACKUP_NAME_FIELD_DESC);
      oprot.writeBinary(this.backup_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_FULL_FIELD_DESC);
    oprot.writeBool(this.full);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ALL_SPACES_FIELD_DESC);
    oprot.writeBool(this.all_spaces);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CREATE_TIME_FIELD_DESC);
    oprot.writeI64(this.create_time);
    oprot.writeFieldEnd();
    if (this.base_backup_name != null) {
      oprot.writeFieldBegin(_BASE_BACKUP_NAME_FIELD_DESC);
      oprot.writeBinary(this.base_backup_name);
      oprot.writeFieldEnd();
    }
    if (this.storage_hosts != null) {
      oprot.writeFieldBegin(_STORAGE_HOSTS_FIELD_DESC);
      {
        oprot.writeListBegin(
            new TList(TType.STRUCT, this.storage_hosts?.length));
        for (var elem287 in this.storage_hosts ?? <t_nebula.HostAddr>[]) {
          elem287.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CLUSTER_ID_FIELD_DESC);
    oprot.writeI64(this.cluster_id);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("BackupMeta(");

    ret.write("space_backups:");
    if (this.space_backups == null) {
      ret.write("null");
    } else {
      ret.write(this.space_backups);
    }

    ret.write(", ");
    ret.write("meta_files:");
    if (this.meta_files == null) {
      ret.write("null");
    } else {
      ret.write(this.meta_files);
    }

    ret.write(", ");
    ret.write("backup_name:");
    if (this.backup_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("full:");
    ret.write(this.full);

    ret.write(", ");
    ret.write("all_spaces:");
    ret.write(this.all_spaces);

    ret.write(", ");
    ret.write("create_time:");
    ret.write(this.create_time);

    ret.write(", ");
    ret.write("base_backup_name:");
    if (this.base_backup_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("storage_hosts:");
    if (this.storage_hosts == null) {
      ret.write("null");
    } else {
      ret.write(this.storage_hosts);
    }

    ret.write(", ");
    ret.write("cluster_id:");
    ret.write(this.cluster_id);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
