// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.drop_user_req;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class DropUserReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("DropUserReq");
  static final TField _ACCOUNT_FIELD_DESC =
      new TField("account", TType.STRING, 1);
  static final TField _IF_EXISTS_FIELD_DESC =
      new TField("if_exists", TType.BOOL, 2);

  Int8List? _account;
  static const int ACCOUNT = 1;
  bool _if_exists = false;
  static const int IF_EXISTS = 2;

  bool __isset_if_exists = false;

  DropUserReq() {}

  // account
  Int8List? get account => this._account;

  set account(Int8List? account) {
    this._account = account;
  }

  bool isSetAccount() => this.account != null;

  unsetAccount() {
    this.account = null;
  }

  // if_exists
  bool get if_exists => this._if_exists;

  set if_exists(bool if_exists) {
    this._if_exists = if_exists;
    this.__isset_if_exists = true;
  }

  bool isSetIf_exists() => this.__isset_if_exists;

  unsetIf_exists() {
    this.__isset_if_exists = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ACCOUNT:
        return this.account;
      case IF_EXISTS:
        return this.if_exists;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          this.account = value as Int8List?;
        }
        break;

      case IF_EXISTS:
        if (value == null) {
          unsetIf_exists();
        } else {
          this.if_exists = value as bool;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ACCOUNT:
        return isSetAccount();
      case IF_EXISTS:
        return isSetIf_exists();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ACCOUNT:
          if (field.type == TType.STRING) {
            this.account = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IF_EXISTS:
          if (field.type == TType.BOOL) {
            this.if_exists = iprot.readBool();
            this.__isset_if_exists = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.account != null) {
      oprot.writeFieldBegin(_ACCOUNT_FIELD_DESC);
      oprot.writeBinary(this.account);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_IF_EXISTS_FIELD_DESC);
    oprot.writeBool(this.if_exists);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("DropUserReq(");

    ret.write("account:");
    if (this.account == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("if_exists:");
    ret.write(this.if_exists);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
