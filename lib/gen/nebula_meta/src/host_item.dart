/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.host_item;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class HostItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("HostItem");
  static final TField _HOST_ADDR_FIELD_DESC =
      new TField("hostAddr", TType.STRUCT, 1);
  static final TField _STATUS_FIELD_DESC = new TField("status", TType.I32, 2);
  static final TField _LEADER_PARTS_FIELD_DESC =
      new TField("leader_parts", TType.MAP, 3);
  static final TField _ALL_PARTS_FIELD_DESC =
      new TField("all_parts", TType.MAP, 4);
  static final TField _ROLE_FIELD_DESC = new TField("role", TType.I32, 5);
  static final TField _GIT_INFO_SHA_FIELD_DESC =
      new TField("git_info_sha", TType.STRING, 6);
  static final TField _ZONE_NAME_FIELD_DESC =
      new TField("zone_name", TType.STRING, 7);
  static final TField _VERSION_FIELD_DESC =
      new TField("version", TType.STRING, 8);

  t_nebula.HostAddr? _hostAddr;
  static const int HOSTADDR = 1;
  int? _status;
  static const int STATUS = 2;
  Map<Int8List, List<int>>? _leader_parts;
  static const int LEADER_PARTS = 3;
  Map<Int8List, List<int>>? _all_parts;
  static const int ALL_PARTS = 4;
  int? _role;
  static const int ROLE = 5;
  Int8List? _git_info_sha;
  static const int GIT_INFO_SHA = 6;
  Int8List? _zone_name;
  static const int ZONE_NAME = 7;
  Int8List? _version;
  static const int VERSION = 8;

  bool __isset_status = false;
  bool __isset_role = false;

  HostItem() {}

  // hostAddr
  t_nebula.HostAddr? get hostAddr => this._hostAddr;

  set hostAddr(t_nebula.HostAddr? hostAddr) {
    this._hostAddr = hostAddr;
  }

  bool isSetHostAddr() => this.hostAddr != null;

  unsetHostAddr() {
    this.hostAddr = null;
  }

  // status
  int? get status => this._status;

  set status(int? status) {
    this._status = status;
    this.__isset_status = true;
  }

  bool isSetStatus() => this.__isset_status;

  unsetStatus() {
    this.__isset_status = false;
  }

  // leader_parts
  Map<Int8List, List<int>>? get leader_parts => this._leader_parts;

  set leader_parts(Map<Int8List, List<int>>? leader_parts) {
    this._leader_parts = leader_parts;
  }

  bool isSetLeader_parts() => this.leader_parts != null;

  unsetLeader_parts() {
    this.leader_parts = null;
  }

  // all_parts
  Map<Int8List, List<int>>? get all_parts => this._all_parts;

  set all_parts(Map<Int8List, List<int>>? all_parts) {
    this._all_parts = all_parts;
  }

  bool isSetAll_parts() => this.all_parts != null;

  unsetAll_parts() {
    this.all_parts = null;
  }

  // role
  int? get role => this._role;

  set role(int? role) {
    this._role = role;
    this.__isset_role = true;
  }

  bool isSetRole() => this.__isset_role;

  unsetRole() {
    this.__isset_role = false;
  }

  // git_info_sha
  Int8List? get git_info_sha => this._git_info_sha;

  set git_info_sha(Int8List? git_info_sha) {
    this._git_info_sha = git_info_sha;
  }

  bool isSetGit_info_sha() => this.git_info_sha != null;

  unsetGit_info_sha() {
    this.git_info_sha = null;
  }

  // zone_name
  Int8List? get zone_name => this._zone_name;

  set zone_name(Int8List? zone_name) {
    this._zone_name = zone_name;
  }

  bool isSetZone_name() => this.zone_name != null;

  unsetZone_name() {
    this.zone_name = null;
  }

  // version
  Int8List? get version => this._version;

  set version(Int8List? version) {
    this._version = version;
  }

  bool isSetVersion() => this.version != null;

  unsetVersion() {
    this.version = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HOSTADDR:
        return this.hostAddr;
      case STATUS:
        return this.status;
      case LEADER_PARTS:
        return this.leader_parts;
      case ALL_PARTS:
        return this.all_parts;
      case ROLE:
        return this.role;
      case GIT_INFO_SHA:
        return this.git_info_sha;
      case ZONE_NAME:
        return this.zone_name;
      case VERSION:
        return this.version;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case HOSTADDR:
        if (value == null) {
          unsetHostAddr();
        } else {
          this.hostAddr = value as t_nebula.HostAddr;
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          this.status = value as int;
        }
        break;

      case LEADER_PARTS:
        if (value == null) {
          unsetLeader_parts();
        } else {
          this.leader_parts = value as Map<Int8List, List<int>>;
        }
        break;

      case ALL_PARTS:
        if (value == null) {
          unsetAll_parts();
        } else {
          this.all_parts = value as Map<Int8List, List<int>>;
        }
        break;

      case ROLE:
        if (value == null) {
          unsetRole();
        } else {
          this.role = value as int;
        }
        break;

      case GIT_INFO_SHA:
        if (value == null) {
          unsetGit_info_sha();
        } else {
          this.git_info_sha = value as Int8List;
        }
        break;

      case ZONE_NAME:
        if (value == null) {
          unsetZone_name();
        } else {
          this.zone_name = value as Int8List;
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          this.version = value as Int8List;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HOSTADDR:
        return isSetHostAddr();
      case STATUS:
        return isSetStatus();
      case LEADER_PARTS:
        return isSetLeader_parts();
      case ALL_PARTS:
        return isSetAll_parts();
      case ROLE:
        return isSetRole();
      case GIT_INFO_SHA:
        return isSetGit_info_sha();
      case ZONE_NAME:
        return isSetZone_name();
      case VERSION:
        return isSetVersion();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HOSTADDR:
          if (field.type == TType.STRUCT) {
            this.hostAddr = new t_nebula.HostAddr();
            this.hostAddr?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            this.__isset_status = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LEADER_PARTS:
          if (field.type == TType.MAP) {
            {
              TMap _map12 = iprot.readMapBegin();
              this.leader_parts = new Map<Int8List, List<int>>();
              for (int _i13 = 0; _i13 < _map12.length; ++_i13) {
                Int8List _key14;
                List<int> _val15;
                _key14 = iprot.readBinary();
                {
                  TList _list16 = iprot.readListBegin();
                  _val15 = <int>[];
                  for (int _i17 = 0; _i17 < _list16.length; ++_i17) {
                    int _elem18;
                    _elem18 = iprot.readI32();
                    _val15.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                this.leader_parts?[_key14] = _val15;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ALL_PARTS:
          if (field.type == TType.MAP) {
            {
              TMap _map19 = iprot.readMapBegin();
              this.all_parts = new Map<Int8List, List<int>>();
              for (int _i20 = 0; _i20 < _map19.length; ++_i20) {
                Int8List _key21;
                List<int> _val22;
                _key21 = iprot.readBinary();
                {
                  TList _list23 = iprot.readListBegin();
                  _val22 = <int>[];
                  for (int _i24 = 0; _i24 < _list23.length; ++_i24) {
                    int _elem25;
                    _elem25 = iprot.readI32();
                    _val22.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                this.all_parts?[_key21] = _val22;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROLE:
          if (field.type == TType.I32) {
            this.role = iprot.readI32();
            this.__isset_role = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GIT_INFO_SHA:
          if (field.type == TType.STRING) {
            this.git_info_sha = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ZONE_NAME:
          if (field.type == TType.STRING) {
            this.zone_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERSION:
          if (field.type == TType.STRING) {
            this.version = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.hostAddr != null) {
      oprot.writeFieldBegin(_HOST_ADDR_FIELD_DESC);
      this.hostAddr?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    if (this.leader_parts != null) {
      oprot.writeFieldBegin(_LEADER_PARTS_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.STRING, TType.LIST, this.leader_parts?.length));
        for (var elem27 in this.leader_parts?.keys ?? <Int8List>[]) {
          oprot.writeBinary(elem27);
          {
            oprot.writeListBegin(
                new TList(TType.I32, this.leader_parts?[elem27]?.length));
            for (var elem28 in this.leader_parts?[elem27] ?? <int>[]) {
              oprot.writeI32(elem28);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.all_parts != null) {
      oprot.writeFieldBegin(_ALL_PARTS_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.STRING, TType.LIST, this.all_parts?.length));
        for (var elem30 in this.all_parts?.keys ?? <Int8List>[]) {
          oprot.writeBinary(elem30);
          {
            oprot.writeListBegin(
                new TList(TType.I32, this.all_parts?[elem30]?.length));
            for (var elem31 in this.all_parts?[elem30] ?? <int>[]) {
              oprot.writeI32(elem31);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ROLE_FIELD_DESC);
    oprot.writeI32(this.role);
    oprot.writeFieldEnd();
    if (this.git_info_sha != null) {
      oprot.writeFieldBegin(_GIT_INFO_SHA_FIELD_DESC);
      oprot.writeBinary(this.git_info_sha);
      oprot.writeFieldEnd();
    }
    if (isSetZone_name()) {
      if (this.zone_name != null) {
        oprot.writeFieldBegin(_ZONE_NAME_FIELD_DESC);
        oprot.writeBinary(this.zone_name);
        oprot.writeFieldEnd();
      }
    }
    if (isSetVersion()) {
      if (this.version != null) {
        oprot.writeFieldBegin(_VERSION_FIELD_DESC);
        oprot.writeBinary(this.version);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("HostItem(");

    ret.write("hostAddr:");
    if (this.hostAddr == null) {
      ret.write("null");
    } else {
      ret.write(this.hostAddr);
    }

    ret.write(", ");
    ret.write("status:");
    String? status_name = HostStatus.VALUES_TO_NAMES[this.status];
    if (status_name != null) {
      ret.write(status_name);
      ret.write(" (");
    }
    ret.write(this.status);
    if (status_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("leader_parts:");
    if (this.leader_parts == null) {
      ret.write("null");
    } else {
      ret.write(this.leader_parts);
    }

    ret.write(", ");
    ret.write("all_parts:");
    if (this.all_parts == null) {
      ret.write("null");
    } else {
      ret.write(this.all_parts);
    }

    ret.write(", ");
    ret.write("role:");
    ret.write(this.role);

    ret.write(", ");
    ret.write("git_info_sha:");
    if (this.git_info_sha == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    if (isSetZone_name()) {
      ret.write(", ");
      ret.write("zone_name:");
      if (this.zone_name == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetVersion()) {
      ret.write(", ");
      ret.write("version:");
      if (this.version == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !HostStatus.VALID_VALUES.contains(status)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'status' has been assigned the invalid value $status");
    }
  }
}
