/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.alter_space_req;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class AlterSpaceReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AlterSpaceReq");
  static final TField _SPACE_NAME_FIELD_DESC =
      new TField("space_name", TType.STRING, 1);
  static final TField _OP_FIELD_DESC = new TField("op", TType.I32, 2);
  static final TField _PARAS_FIELD_DESC = new TField("paras", TType.LIST, 3);

  Int8List? _space_name;
  static const int SPACE_NAME = 1;
  int? _op;
  static const int OP = 2;
  List<Int8List>? _paras;
  static const int PARAS = 3;

  bool __isset_op = false;

  AlterSpaceReq() {}

  // space_name
  Int8List? get space_name => this._space_name;

  set space_name(Int8List? space_name) {
    this._space_name = space_name;
  }

  bool isSetSpace_name() => this.space_name != null;

  unsetSpace_name() {
    this.space_name = null;
  }

  // op
  int? get op => this._op;

  set op(int? op) {
    this._op = op;
    this.__isset_op = true;
  }

  bool isSetOp() => this.__isset_op;

  unsetOp() {
    this.__isset_op = false;
  }

  // paras
  List<Int8List>? get paras => this._paras;

  set paras(List<Int8List>? paras) {
    this._paras = paras;
  }

  bool isSetParas() => this.paras != null;

  unsetParas() {
    this.paras = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_NAME:
        return this.space_name;
      case OP:
        return this.op;
      case PARAS:
        return this.paras;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SPACE_NAME:
        if (value == null) {
          unsetSpace_name();
        } else {
          this.space_name = value as Int8List;
        }
        break;

      case OP:
        if (value == null) {
          unsetOp();
        } else {
          this.op = value as int;
        }
        break;

      case PARAS:
        if (value == null) {
          unsetParas();
        } else {
          this.paras = value as List<Int8List>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_NAME:
        return isSetSpace_name();
      case OP:
        return isSetOp();
      case PARAS:
        return isSetParas();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_NAME:
          if (field.type == TType.STRING) {
            this.space_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OP:
          if (field.type == TType.I32) {
            this.op = iprot.readI32();
            this.__isset_op = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARAS:
          if (field.type == TType.LIST) {
            {
              TList _list32 = iprot.readListBegin();
              this.paras = <Int8List>[];
              for (int _i33 = 0; _i33 < _list32.length; ++_i33) {
                Int8List _elem34;
                _elem34 = iprot.readBinary();
                this.paras?.add(_elem34);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.space_name != null) {
      oprot.writeFieldBegin(_SPACE_NAME_FIELD_DESC);
      oprot.writeBinary(this.space_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_OP_FIELD_DESC);
    oprot.writeI32(this.op);
    oprot.writeFieldEnd();
    if (this.paras != null) {
      oprot.writeFieldBegin(_PARAS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.paras?.length));
        for (var elem35 in this.paras ?? []) {
          oprot.writeBinary(elem35);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AlterSpaceReq(");

    ret.write("space_name:");
    if (this.space_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("op:");
    String? op_name = AlterSpaceOp.VALUES_TO_NAMES[this.op];
    if (op_name != null) {
      ret.write(op_name);
      ret.write(" (");
    }
    ret.write(this.op);
    if (op_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("paras:");
    if (this.paras == null) {
      ret.write("null");
    } else {
      ret.write(this.paras);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetOp() && !AlterSpaceOp.VALID_VALUES.contains(op)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'op' has been assigned the invalid value $op");
    }
  }
}
