// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.stats_item;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class StatsItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("StatsItem");
  static final TField _TAG_VERTICES_FIELD_DESC =
      new TField("tag_vertices", TType.MAP, 1);
  static final TField _EDGES_FIELD_DESC = new TField("edges", TType.MAP, 2);
  static final TField _SPACE_VERTICES_FIELD_DESC =
      new TField("space_vertices", TType.I64, 3);
  static final TField _SPACE_EDGES_FIELD_DESC =
      new TField("space_edges", TType.I64, 4);
  static final TField _POSITIVE_PART_CORRELATIVITY_FIELD_DESC =
      new TField("positive_part_correlativity", TType.MAP, 5);
  static final TField _NEGATIVE_PART_CORRELATIVITY_FIELD_DESC =
      new TField("negative_part_correlativity", TType.MAP, 6);
  static final TField _STATUS_FIELD_DESC = new TField("status", TType.I32, 7);

  Map<Int8List, int>? _tag_vertices;
  static const int TAG_VERTICES = 1;
  Map<Int8List, int>? _edges;
  static const int EDGES = 2;
  int _space_vertices = 0;
  static const int SPACE_VERTICES = 3;
  int _space_edges = 0;
  static const int SPACE_EDGES = 4;
  Map<int, List<Correlativity>>? _positive_part_correlativity;
  static const int POSITIVE_PART_CORRELATIVITY = 5;
  Map<int, List<Correlativity>>? _negative_part_correlativity;
  static const int NEGATIVE_PART_CORRELATIVITY = 6;
  int? _status;
  static const int STATUS = 7;

  bool __isset_space_vertices = false;
  bool __isset_space_edges = false;
  bool __isset_status = false;

  StatsItem() {}

  // tag_vertices
  Map<Int8List, int>? get tag_vertices => this._tag_vertices;

  set tag_vertices(Map<Int8List, int>? tag_vertices) {
    this._tag_vertices = tag_vertices;
  }

  bool isSetTag_vertices() => this.tag_vertices != null;

  unsetTag_vertices() {
    this.tag_vertices = null;
  }

  // edges
  Map<Int8List, int>? get edges => this._edges;

  set edges(Map<Int8List, int>? edges) {
    this._edges = edges;
  }

  bool isSetEdges() => this.edges != null;

  unsetEdges() {
    this.edges = null;
  }

  // space_vertices
  int get space_vertices => this._space_vertices;

  set space_vertices(int space_vertices) {
    this._space_vertices = space_vertices;
    this.__isset_space_vertices = true;
  }

  bool isSetSpace_vertices() => this.__isset_space_vertices;

  unsetSpace_vertices() {
    this.__isset_space_vertices = false;
  }

  // space_edges
  int get space_edges => this._space_edges;

  set space_edges(int space_edges) {
    this._space_edges = space_edges;
    this.__isset_space_edges = true;
  }

  bool isSetSpace_edges() => this.__isset_space_edges;

  unsetSpace_edges() {
    this.__isset_space_edges = false;
  }

  // positive_part_correlativity
  Map<int, List<Correlativity>>? get positive_part_correlativity =>
      this._positive_part_correlativity;

  set positive_part_correlativity(
      Map<int, List<Correlativity>>? positive_part_correlativity) {
    this._positive_part_correlativity = positive_part_correlativity;
  }

  bool isSetPositive_part_correlativity() =>
      this.positive_part_correlativity != null;

  unsetPositive_part_correlativity() {
    this.positive_part_correlativity = null;
  }

  // negative_part_correlativity
  Map<int, List<Correlativity>>? get negative_part_correlativity =>
      this._negative_part_correlativity;

  set negative_part_correlativity(
      Map<int, List<Correlativity>>? negative_part_correlativity) {
    this._negative_part_correlativity = negative_part_correlativity;
  }

  bool isSetNegative_part_correlativity() =>
      this.negative_part_correlativity != null;

  unsetNegative_part_correlativity() {
    this.negative_part_correlativity = null;
  }

  // status
  int? get status => this._status;

  set status(int? status) {
    this._status = status;
    this.__isset_status = true;
  }

  bool isSetStatus() => this.__isset_status;

  unsetStatus() {
    this.__isset_status = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case TAG_VERTICES:
        return this.tag_vertices;
      case EDGES:
        return this.edges;
      case SPACE_VERTICES:
        return this.space_vertices;
      case SPACE_EDGES:
        return this.space_edges;
      case POSITIVE_PART_CORRELATIVITY:
        return this.positive_part_correlativity;
      case NEGATIVE_PART_CORRELATIVITY:
        return this.negative_part_correlativity;
      case STATUS:
        return this.status;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case TAG_VERTICES:
        if (value == null) {
          unsetTag_vertices();
        } else {
          this.tag_vertices = value as Map<Int8List, int>;
        }
        break;

      case EDGES:
        if (value == null) {
          unsetEdges();
        } else {
          this.edges = value as Map<Int8List, int>;
        }
        break;

      case SPACE_VERTICES:
        if (value == null) {
          unsetSpace_vertices();
        } else {
          this.space_vertices = value as int;
        }
        break;

      case SPACE_EDGES:
        if (value == null) {
          unsetSpace_edges();
        } else {
          this.space_edges = value as int;
        }
        break;

      case POSITIVE_PART_CORRELATIVITY:
        if (value == null) {
          unsetPositive_part_correlativity();
        } else {
          this.positive_part_correlativity =
              value as Map<int, List<Correlativity>>;
        }
        break;

      case NEGATIVE_PART_CORRELATIVITY:
        if (value == null) {
          unsetNegative_part_correlativity();
        } else {
          this.negative_part_correlativity =
              value as Map<int, List<Correlativity>>;
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          this.status = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case TAG_VERTICES:
        return isSetTag_vertices();
      case EDGES:
        return isSetEdges();
      case SPACE_VERTICES:
        return isSetSpace_vertices();
      case SPACE_EDGES:
        return isSetSpace_edges();
      case POSITIVE_PART_CORRELATIVITY:
        return isSetPositive_part_correlativity();
      case NEGATIVE_PART_CORRELATIVITY:
        return isSetNegative_part_correlativity();
      case STATUS:
        return isSetStatus();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TAG_VERTICES:
          if (field.type == TType.MAP) {
            {
              TMap _map52 = iprot.readMapBegin();
              this.tag_vertices = new Map<Int8List, int>();
              for (int _i53 = 0; _i53 < _map52.length; ++_i53) {
                Int8List _key54;
                int _val55;
                _key54 = iprot.readBinary();
                _val55 = iprot.readI64();
                this.tag_vertices?[_key54] = _val55;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDGES:
          if (field.type == TType.MAP) {
            {
              TMap _map56 = iprot.readMapBegin();
              this.edges = new Map<Int8List, int>();
              for (int _i57 = 0; _i57 < _map56.length; ++_i57) {
                Int8List _key58;
                int _val59;
                _key58 = iprot.readBinary();
                _val59 = iprot.readI64();
                this.edges?[_key58] = _val59;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPACE_VERTICES:
          if (field.type == TType.I64) {
            this.space_vertices = iprot.readI64();
            this.__isset_space_vertices = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPACE_EDGES:
          if (field.type == TType.I64) {
            this.space_edges = iprot.readI64();
            this.__isset_space_edges = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case POSITIVE_PART_CORRELATIVITY:
          if (field.type == TType.MAP) {
            {
              TMap _map60 = iprot.readMapBegin();
              this.positive_part_correlativity =
                  new Map<int, List<Correlativity>>();
              for (int _i61 = 0; _i61 < _map60.length; ++_i61) {
                int _key62;
                List<Correlativity> _val63;
                _key62 = iprot.readI32();
                {
                  TList _list64 = iprot.readListBegin();
                  _val63 = <Correlativity>[];
                  for (int _i65 = 0; _i65 < _list64.length; ++_i65) {
                    Correlativity _elem66;
                    _elem66 = new Correlativity();
                    _elem66.read(iprot);
                    _val63.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                this.positive_part_correlativity?[_key62] = _val63;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NEGATIVE_PART_CORRELATIVITY:
          if (field.type == TType.MAP) {
            {
              TMap _map67 = iprot.readMapBegin();
              this.negative_part_correlativity =
                  new Map<int, List<Correlativity>>();
              for (int _i68 = 0; _i68 < _map67.length; ++_i68) {
                int _key69;
                List<Correlativity> _val70;
                _key69 = iprot.readI32();
                {
                  TList _list71 = iprot.readListBegin();
                  _val70 = <Correlativity>[];
                  for (int _i72 = 0; _i72 < _list71.length; ++_i72) {
                    Correlativity _elem73;
                    _elem73 = new Correlativity();
                    _elem73.read(iprot);
                    _val70.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                this.negative_part_correlativity?[_key69] = _val70;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            this.__isset_status = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.tag_vertices != null) {
      oprot.writeFieldBegin(_TAG_VERTICES_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.STRING, TType.I64, this.tag_vertices?.length));
        for (var elem75 in this.tag_vertices?.keys ?? <Int8List>[]) {
          oprot.writeBinary(elem75);
          oprot.writeI64(this.tag_vertices?[elem75]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.edges != null) {
      oprot.writeFieldBegin(_EDGES_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.STRING, TType.I64, this.edges?.length));
        for (var elem77 in this.edges?.keys ?? <Int8List>[]) {
          oprot.writeBinary(elem77);
          oprot.writeI64(this.edges?[elem77]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_SPACE_VERTICES_FIELD_DESC);
    oprot.writeI64(this.space_vertices);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SPACE_EDGES_FIELD_DESC);
    oprot.writeI64(this.space_edges);
    oprot.writeFieldEnd();
    if (this.positive_part_correlativity != null) {
      oprot.writeFieldBegin(_POSITIVE_PART_CORRELATIVITY_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(
            TType.I32, TType.LIST, this.positive_part_correlativity?.length));
        for (var elem79 in this.positive_part_correlativity?.keys ?? <int>[]) {
          oprot.writeI32(elem79);
          {
            oprot.writeListBegin(new TList(TType.STRUCT,
                this.positive_part_correlativity?[elem79]?.length));
            for (var elem80 in this.positive_part_correlativity?[elem79] ??
                <Correlativity>[]) {
              elem80.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.negative_part_correlativity != null) {
      oprot.writeFieldBegin(_NEGATIVE_PART_CORRELATIVITY_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(
            TType.I32, TType.LIST, this.negative_part_correlativity?.length));
        for (var elem82 in this.negative_part_correlativity?.keys ?? <int>[]) {
          oprot.writeI32(elem82);
          {
            oprot.writeListBegin(new TList(TType.STRUCT,
                this.negative_part_correlativity?[elem82]?.length));
            for (var elem83 in this.negative_part_correlativity?[elem82] ??
                <Correlativity>[]) {
              elem83.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("StatsItem(");

    ret.write("tag_vertices:");
    if (this.tag_vertices == null) {
      ret.write("null");
    } else {
      ret.write(this.tag_vertices);
    }

    ret.write(", ");
    ret.write("edges:");
    if (this.edges == null) {
      ret.write("null");
    } else {
      ret.write(this.edges);
    }

    ret.write(", ");
    ret.write("space_vertices:");
    ret.write(this.space_vertices);

    ret.write(", ");
    ret.write("space_edges:");
    ret.write(this.space_edges);

    ret.write(", ");
    ret.write("positive_part_correlativity:");
    if (this.positive_part_correlativity == null) {
      ret.write("null");
    } else {
      ret.write(this.positive_part_correlativity);
    }

    ret.write(", ");
    ret.write("negative_part_correlativity:");
    if (this.negative_part_correlativity == null) {
      ret.write("null");
    } else {
      ret.write(this.negative_part_correlativity);
    }

    ret.write(", ");
    ret.write("status:");
    String? status_name = JobStatus.VALUES_TO_NAMES[this.status];
    if (status_name != null) {
      ret.write(status_name);
      ret.write(" (");
    }
    ret.write(this.status);
    if (status_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStatus() && !JobStatus.VALID_VALUES.contains(status)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'status' has been assigned the invalid value $status");
    }
  }
}
