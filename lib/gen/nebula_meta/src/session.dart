/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.session;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class Session implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Session");
  static final TField _SESSION_ID_FIELD_DESC =
      new TField("session_id", TType.I64, 1);
  static final TField _CREATE_TIME_FIELD_DESC =
      new TField("create_time", TType.I64, 2);
  static final TField _UPDATE_TIME_FIELD_DESC =
      new TField("update_time", TType.I64, 3);
  static final TField _USER_NAME_FIELD_DESC =
      new TField("user_name", TType.STRING, 4);
  static final TField _SPACE_NAME_FIELD_DESC =
      new TField("space_name", TType.STRING, 5);
  static final TField _GRAPH_ADDR_FIELD_DESC =
      new TField("graph_addr", TType.STRUCT, 6);
  static final TField _TIMEZONE_FIELD_DESC =
      new TField("timezone", TType.I32, 7);
  static final TField _CLIENT_IP_FIELD_DESC =
      new TField("client_ip", TType.STRING, 8);
  static final TField _CONFIGS_FIELD_DESC = new TField("configs", TType.MAP, 9);
  static final TField _QUERIES_FIELD_DESC =
      new TField("queries", TType.MAP, 10);

  int _session_id = 0;
  static const int SESSION_ID = 1;
  int _create_time = 0;
  static const int CREATE_TIME = 2;
  int _update_time = 0;
  static const int UPDATE_TIME = 3;
  Int8List? _user_name;
  static const int USER_NAME = 4;
  Int8List? _space_name;
  static const int SPACE_NAME = 5;
  t_nebula.HostAddr? _graph_addr;
  static const int GRAPH_ADDR = 6;
  int _timezone = 0;
  static const int TIMEZONE = 7;
  Int8List? _client_ip;
  static const int CLIENT_IP = 8;
  Map<Int8List, t_nebula.Value>? _configs;
  static const int CONFIGS = 9;
  Map<int, QueryDesc>? _queries;
  static const int QUERIES = 10;

  bool __isset_session_id = false;
  bool __isset_create_time = false;
  bool __isset_update_time = false;
  bool __isset_timezone = false;

  Session() {}

  // session_id
  int get session_id => this._session_id;

  set session_id(int session_id) {
    this._session_id = session_id;
    this.__isset_session_id = true;
  }

  bool isSetSession_id() => this.__isset_session_id;

  unsetSession_id() {
    this.__isset_session_id = false;
  }

  // create_time
  int get create_time => this._create_time;

  set create_time(int create_time) {
    this._create_time = create_time;
    this.__isset_create_time = true;
  }

  bool isSetCreate_time() => this.__isset_create_time;

  unsetCreate_time() {
    this.__isset_create_time = false;
  }

  // update_time
  int get update_time => this._update_time;

  set update_time(int update_time) {
    this._update_time = update_time;
    this.__isset_update_time = true;
  }

  bool isSetUpdate_time() => this.__isset_update_time;

  unsetUpdate_time() {
    this.__isset_update_time = false;
  }

  // user_name
  Int8List? get user_name => this._user_name;

  set user_name(Int8List? user_name) {
    this._user_name = user_name;
  }

  bool isSetUser_name() => this.user_name != null;

  unsetUser_name() {
    this.user_name = null;
  }

  // space_name
  Int8List? get space_name => this._space_name;

  set space_name(Int8List? space_name) {
    this._space_name = space_name;
  }

  bool isSetSpace_name() => this.space_name != null;

  unsetSpace_name() {
    this.space_name = null;
  }

  // graph_addr
  t_nebula.HostAddr? get graph_addr => this._graph_addr;

  set graph_addr(t_nebula.HostAddr? graph_addr) {
    this._graph_addr = graph_addr;
  }

  bool isSetGraph_addr() => this.graph_addr != null;

  unsetGraph_addr() {
    this.graph_addr = null;
  }

  // timezone
  int get timezone => this._timezone;

  set timezone(int timezone) {
    this._timezone = timezone;
    this.__isset_timezone = true;
  }

  bool isSetTimezone() => this.__isset_timezone;

  unsetTimezone() {
    this.__isset_timezone = false;
  }

  // client_ip
  Int8List? get client_ip => this._client_ip;

  set client_ip(Int8List? client_ip) {
    this._client_ip = client_ip;
  }

  bool isSetClient_ip() => this.client_ip != null;

  unsetClient_ip() {
    this.client_ip = null;
  }

  // configs
  Map<Int8List, t_nebula.Value>? get configs => this._configs;

  set configs(Map<Int8List, t_nebula.Value>? configs) {
    this._configs = configs;
  }

  bool isSetConfigs() => this.configs != null;

  unsetConfigs() {
    this.configs = null;
  }

  // queries
  Map<int, QueryDesc>? get queries => this._queries;

  set queries(Map<int, QueryDesc>? queries) {
    this._queries = queries;
  }

  bool isSetQueries() => this.queries != null;

  unsetQueries() {
    this.queries = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SESSION_ID:
        return this.session_id;
      case CREATE_TIME:
        return this.create_time;
      case UPDATE_TIME:
        return this.update_time;
      case USER_NAME:
        return this.user_name;
      case SPACE_NAME:
        return this.space_name;
      case GRAPH_ADDR:
        return this.graph_addr;
      case TIMEZONE:
        return this.timezone;
      case CLIENT_IP:
        return this.client_ip;
      case CONFIGS:
        return this.configs;
      case QUERIES:
        return this.queries;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SESSION_ID:
        if (value == null) {
          unsetSession_id();
        } else {
          this.session_id = value as int;
        }
        break;

      case CREATE_TIME:
        if (value == null) {
          unsetCreate_time();
        } else {
          this.create_time = value as int;
        }
        break;

      case UPDATE_TIME:
        if (value == null) {
          unsetUpdate_time();
        } else {
          this.update_time = value as int;
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          this.user_name = value as Int8List?;
        }
        break;

      case SPACE_NAME:
        if (value == null) {
          unsetSpace_name();
        } else {
          this.space_name = value as Int8List?;
        }
        break;

      case GRAPH_ADDR:
        if (value == null) {
          unsetGraph_addr();
        } else {
          this.graph_addr = value as t_nebula.HostAddr?;
        }
        break;

      case TIMEZONE:
        if (value == null) {
          unsetTimezone();
        } else {
          this.timezone = value as int;
        }
        break;

      case CLIENT_IP:
        if (value == null) {
          unsetClient_ip();
        } else {
          this.client_ip = value as Int8List?;
        }
        break;

      case CONFIGS:
        if (value == null) {
          unsetConfigs();
        } else {
          this.configs = value as Map<Int8List, t_nebula.Value>?;
        }
        break;

      case QUERIES:
        if (value == null) {
          unsetQueries();
        } else {
          this.queries = value as Map<int, QueryDesc>?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SESSION_ID:
        return isSetSession_id();
      case CREATE_TIME:
        return isSetCreate_time();
      case UPDATE_TIME:
        return isSetUpdate_time();
      case USER_NAME:
        return isSetUser_name();
      case SPACE_NAME:
        return isSetSpace_name();
      case GRAPH_ADDR:
        return isSetGraph_addr();
      case TIMEZONE:
        return isSetTimezone();
      case CLIENT_IP:
        return isSetClient_ip();
      case CONFIGS:
        return isSetConfigs();
      case QUERIES:
        return isSetQueries();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SESSION_ID:
          if (field.type == TType.I64) {
            this.session_id = iprot.readI64();
            this.__isset_session_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATE_TIME:
          if (field.type == TType.I64) {
            this.create_time = iprot.readI64();
            this.__isset_create_time = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UPDATE_TIME:
          if (field.type == TType.I64) {
            this.update_time = iprot.readI64();
            this.__isset_update_time = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USER_NAME:
          if (field.type == TType.STRING) {
            this.user_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPACE_NAME:
          if (field.type == TType.STRING) {
            this.space_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GRAPH_ADDR:
          if (field.type == TType.STRUCT) {
            this.graph_addr = new t_nebula.HostAddr();
            this.graph_addr?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TIMEZONE:
          if (field.type == TType.I32) {
            this.timezone = iprot.readI32();
            this.__isset_timezone = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLIENT_IP:
          if (field.type == TType.STRING) {
            this.client_ip = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONFIGS:
          if (field.type == TType.MAP) {
            {
              TMap _map338 = iprot.readMapBegin();
              this.configs = new Map<Int8List, t_nebula.Value>();
              for (int _i339 = 0; _i339 < _map338.length; ++_i339) {
                Int8List _key340;
                t_nebula.Value _val341;
                _key340 = iprot.readBinary();
                _val341 = new t_nebula.Value();
                _val341.read(iprot);
                this.configs?[_key340] = _val341;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case QUERIES:
          if (field.type == TType.MAP) {
            {
              TMap _map342 = iprot.readMapBegin();
              this.queries = new Map<int, QueryDesc>();
              for (int _i343 = 0; _i343 < _map342.length; ++_i343) {
                int _key344;
                QueryDesc _val345;
                _key344 = iprot.readI64();
                _val345 = new QueryDesc();
                _val345.read(iprot);
                this.queries?[_key344] = _val345;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SESSION_ID_FIELD_DESC);
    oprot.writeI64(this.session_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CREATE_TIME_FIELD_DESC);
    oprot.writeI64(this.create_time);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_UPDATE_TIME_FIELD_DESC);
    oprot.writeI64(this.update_time);
    oprot.writeFieldEnd();
    if (this.user_name != null) {
      oprot.writeFieldBegin(_USER_NAME_FIELD_DESC);
      oprot.writeBinary(this.user_name);
      oprot.writeFieldEnd();
    }
    if (this.space_name != null) {
      oprot.writeFieldBegin(_SPACE_NAME_FIELD_DESC);
      oprot.writeBinary(this.space_name);
      oprot.writeFieldEnd();
    }
    if (this.graph_addr != null) {
      oprot.writeFieldBegin(_GRAPH_ADDR_FIELD_DESC);
      this.graph_addr?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_TIMEZONE_FIELD_DESC);
    oprot.writeI32(this.timezone);
    oprot.writeFieldEnd();
    if (this.client_ip != null) {
      oprot.writeFieldBegin(_CLIENT_IP_FIELD_DESC);
      oprot.writeBinary(this.client_ip);
      oprot.writeFieldEnd();
    }
    if (this.configs != null) {
      oprot.writeFieldBegin(_CONFIGS_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.STRING, TType.STRUCT, this.configs?.length));
        for (var elem347 in this.configs?.keys ?? <Int8List>[]) {
          oprot.writeBinary(elem347);
          this.configs?[elem347]?.write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.queries != null) {
      oprot.writeFieldBegin(_QUERIES_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.I64, TType.STRUCT, this.queries?.length));
        for (var elem349 in this.queries?.keys ?? <int>[]) {
          oprot.writeI64(elem349);
          this.queries?[elem349]?.write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Session(");

    ret.write("session_id:");
    ret.write(this.session_id);

    ret.write(", ");
    ret.write("create_time:");
    ret.write(this.create_time);

    ret.write(", ");
    ret.write("update_time:");
    ret.write(this.update_time);

    ret.write(", ");
    ret.write("user_name:");
    if (this.user_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("space_name:");
    if (this.space_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("graph_addr:");
    if (this.graph_addr == null) {
      ret.write("null");
    } else {
      ret.write(this.graph_addr);
    }

    ret.write(", ");
    ret.write("timezone:");
    ret.write(this.timezone);

    ret.write(", ");
    ret.write("client_ip:");
    if (this.client_ip == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("configs:");
    if (this.configs == null) {
      ret.write("null");
    } else {
      ret.write(this.configs);
    }

    ret.write(", ");
    ret.write("queries:");
    if (this.queries == null) {
      ret.write("null");
    } else {
      ret.write(this.queries);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
