/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.create_backup_req;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class CreateBackupReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CreateBackupReq");
  static final TField _SPACES_FIELD_DESC = new TField("spaces", TType.LIST, 1);
  static final TField _BASE_BACKUP_NAME_FIELD_DESC =
      new TField("base_backup_name", TType.STRING, 2);
  static final TField _CLUSTER_ID_FIELD_DESC =
      new TField("cluster_id", TType.I64, 3);

  List<Int8List>? _spaces;
  static const int SPACES = 1;
  Int8List? _base_backup_name;
  static const int BASE_BACKUP_NAME = 2;
  int? _cluster_id;
  static const int CLUSTER_ID = 3;

  bool __isset_cluster_id = false;

  CreateBackupReq() {}

  // spaces
  List<Int8List>? get spaces => this._spaces;

  set spaces(List<Int8List>? spaces) {
    this._spaces = spaces;
  }

  bool isSetSpaces() => this.spaces != null;

  unsetSpaces() {
    this.spaces = null;
  }

  // base_backup_name
  Int8List? get base_backup_name => this._base_backup_name;

  set base_backup_name(Int8List? base_backup_name) {
    this._base_backup_name = base_backup_name;
  }

  bool isSetBase_backup_name() => this.base_backup_name != null;

  unsetBase_backup_name() {
    this.base_backup_name = null;
  }

  // cluster_id
  int? get cluster_id => this._cluster_id;

  set cluster_id(int? cluster_id) {
    this._cluster_id = cluster_id;
    this.__isset_cluster_id = true;
  }

  bool isSetCluster_id() => this.__isset_cluster_id;

  unsetCluster_id() {
    this.__isset_cluster_id = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACES:
        return this.spaces;
      case BASE_BACKUP_NAME:
        return this.base_backup_name;
      case CLUSTER_ID:
        return this.cluster_id;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACES:
        if (value == null) {
          unsetSpaces();
        } else {
          this.spaces = value as List<Int8List>;
        }
        break;

      case BASE_BACKUP_NAME:
        if (value == null) {
          unsetBase_backup_name();
        } else {
          this.base_backup_name = value as Int8List;
        }
        break;

      case CLUSTER_ID:
        if (value == null) {
          unsetCluster_id();
        } else {
          this.cluster_id = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACES:
        return isSetSpaces();
      case BASE_BACKUP_NAME:
        return isSetBase_backup_name();
      case CLUSTER_ID:
        return isSetCluster_id();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACES:
          if (field.type == TType.LIST) {
            {
              TList _list288 = iprot.readListBegin();
              this.spaces = <Int8List>[];
              for (int _i289 = 0; _i289 < _list288.length; ++_i289) {
                Int8List _elem290;
                _elem290 = iprot.readBinary();
                this.spaces?.add(_elem290);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BASE_BACKUP_NAME:
          if (field.type == TType.STRING) {
            this.base_backup_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLUSTER_ID:
          if (field.type == TType.I64) {
            this.cluster_id = iprot.readI64();
            this.__isset_cluster_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSpaces()) {
      if (this.spaces != null) {
        oprot.writeFieldBegin(_SPACES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.spaces?.length));
          for (var elem291 in this.spaces ?? []) {
            oprot.writeBinary(elem291);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetBase_backup_name()) {
      if (this.base_backup_name != null) {
        oprot.writeFieldBegin(_BASE_BACKUP_NAME_FIELD_DESC);
        oprot.writeBinary(this.base_backup_name);
        oprot.writeFieldEnd();
      }
    }
    if (isSetCluster_id()) {
      oprot.writeFieldBegin(_CLUSTER_ID_FIELD_DESC);
      oprot.writeI64(this.cluster_id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CreateBackupReq(");

    if (isSetSpaces()) {
      ret.write("spaces:");
      if (this.spaces == null) {
        ret.write("null");
      } else {
        ret.write(this.spaces);
      }
    }

    if (isSetBase_backup_name()) {
      ret.write(", ");
      ret.write("base_backup_name:");
      if (this.base_backup_name == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetCluster_id()) {
      ret.write(", ");
      ret.write("cluster_id:");
      ret.write(this.cluster_id);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
