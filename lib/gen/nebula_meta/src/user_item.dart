// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.user_item;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class UserItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("UserItem");
  static final TField _ACCOUNT_FIELD_DESC =
      new TField("account", TType.STRING, 1);
  static final TField _IS_LOCK_FIELD_DESC =
      new TField("is_lock", TType.BOOL, 2);
  static final TField _MAX_QUERIES_PER_HOUR_FIELD_DESC =
      new TField("max_queries_per_hour", TType.I32, 3);
  static final TField _MAX_UPDATES_PER_HOUR_FIELD_DESC =
      new TField("max_updates_per_hour", TType.I32, 4);
  static final TField _MAX_CONNECTIONS_PER_HOUR_FIELD_DESC =
      new TField("max_connections_per_hour", TType.I32, 5);
  static final TField _MAX_USER_CONNECTIONS_FIELD_DESC =
      new TField("max_user_connections", TType.I32, 6);

  Int8List? _account;
  static const int ACCOUNT = 1;
  bool _is_lock = false;
  static const int IS_LOCK = 2;
  int _max_queries_per_hour = 0;
  static const int MAX_QUERIES_PER_HOUR = 3;
  int _max_updates_per_hour = 0;
  static const int MAX_UPDATES_PER_HOUR = 4;
  int _max_connections_per_hour = 0;
  static const int MAX_CONNECTIONS_PER_HOUR = 5;
  int _max_user_connections = 0;
  static const int MAX_USER_CONNECTIONS = 6;

  bool __isset_is_lock = false;
  bool __isset_max_queries_per_hour = false;
  bool __isset_max_updates_per_hour = false;
  bool __isset_max_connections_per_hour = false;
  bool __isset_max_user_connections = false;

  UserItem() {}

  // account
  Int8List? get account => this._account;

  set account(Int8List? account) {
    this._account = account;
  }

  bool isSetAccount() => this.account != null;

  unsetAccount() {
    this.account = null;
  }

  // is_lock
  bool get is_lock => this._is_lock;

  set is_lock(bool is_lock) {
    this._is_lock = is_lock;
    this.__isset_is_lock = true;
  }

  bool isSetIs_lock() => this.__isset_is_lock;

  unsetIs_lock() {
    this.__isset_is_lock = false;
  }

  // max_queries_per_hour
  int get max_queries_per_hour => this._max_queries_per_hour;

  set max_queries_per_hour(int max_queries_per_hour) {
    this._max_queries_per_hour = max_queries_per_hour;
    this.__isset_max_queries_per_hour = true;
  }

  bool isSetMax_queries_per_hour() => this.__isset_max_queries_per_hour;

  unsetMax_queries_per_hour() {
    this.__isset_max_queries_per_hour = false;
  }

  // max_updates_per_hour
  int get max_updates_per_hour => this._max_updates_per_hour;

  set max_updates_per_hour(int max_updates_per_hour) {
    this._max_updates_per_hour = max_updates_per_hour;
    this.__isset_max_updates_per_hour = true;
  }

  bool isSetMax_updates_per_hour() => this.__isset_max_updates_per_hour;

  unsetMax_updates_per_hour() {
    this.__isset_max_updates_per_hour = false;
  }

  // max_connections_per_hour
  int get max_connections_per_hour => this._max_connections_per_hour;

  set max_connections_per_hour(int max_connections_per_hour) {
    this._max_connections_per_hour = max_connections_per_hour;
    this.__isset_max_connections_per_hour = true;
  }

  bool isSetMax_connections_per_hour() => this.__isset_max_connections_per_hour;

  unsetMax_connections_per_hour() {
    this.__isset_max_connections_per_hour = false;
  }

  // max_user_connections
  int get max_user_connections => this._max_user_connections;

  set max_user_connections(int max_user_connections) {
    this._max_user_connections = max_user_connections;
    this.__isset_max_user_connections = true;
  }

  bool isSetMax_user_connections() => this.__isset_max_user_connections;

  unsetMax_user_connections() {
    this.__isset_max_user_connections = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ACCOUNT:
        return this.account;
      case IS_LOCK:
        return this.is_lock;
      case MAX_QUERIES_PER_HOUR:
        return this.max_queries_per_hour;
      case MAX_UPDATES_PER_HOUR:
        return this.max_updates_per_hour;
      case MAX_CONNECTIONS_PER_HOUR:
        return this.max_connections_per_hour;
      case MAX_USER_CONNECTIONS:
        return this.max_user_connections;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          this.account = value as Int8List?;
        }
        break;

      case IS_LOCK:
        if (value == null) {
          unsetIs_lock();
        } else {
          this.is_lock = value as bool;
        }
        break;

      case MAX_QUERIES_PER_HOUR:
        if (value == null) {
          unsetMax_queries_per_hour();
        } else {
          this.max_queries_per_hour = value as int;
        }
        break;

      case MAX_UPDATES_PER_HOUR:
        if (value == null) {
          unsetMax_updates_per_hour();
        } else {
          this.max_updates_per_hour = value as int;
        }
        break;

      case MAX_CONNECTIONS_PER_HOUR:
        if (value == null) {
          unsetMax_connections_per_hour();
        } else {
          this.max_connections_per_hour = value as int;
        }
        break;

      case MAX_USER_CONNECTIONS:
        if (value == null) {
          unsetMax_user_connections();
        } else {
          this.max_user_connections = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ACCOUNT:
        return isSetAccount();
      case IS_LOCK:
        return isSetIs_lock();
      case MAX_QUERIES_PER_HOUR:
        return isSetMax_queries_per_hour();
      case MAX_UPDATES_PER_HOUR:
        return isSetMax_updates_per_hour();
      case MAX_CONNECTIONS_PER_HOUR:
        return isSetMax_connections_per_hour();
      case MAX_USER_CONNECTIONS:
        return isSetMax_user_connections();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ACCOUNT:
          if (field.type == TType.STRING) {
            this.account = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IS_LOCK:
          if (field.type == TType.BOOL) {
            this.is_lock = iprot.readBool();
            this.__isset_is_lock = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAX_QUERIES_PER_HOUR:
          if (field.type == TType.I32) {
            this.max_queries_per_hour = iprot.readI32();
            this.__isset_max_queries_per_hour = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAX_UPDATES_PER_HOUR:
          if (field.type == TType.I32) {
            this.max_updates_per_hour = iprot.readI32();
            this.__isset_max_updates_per_hour = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAX_CONNECTIONS_PER_HOUR:
          if (field.type == TType.I32) {
            this.max_connections_per_hour = iprot.readI32();
            this.__isset_max_connections_per_hour = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAX_USER_CONNECTIONS:
          if (field.type == TType.I32) {
            this.max_user_connections = iprot.readI32();
            this.__isset_max_user_connections = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.account != null) {
      oprot.writeFieldBegin(_ACCOUNT_FIELD_DESC);
      oprot.writeBinary(this.account);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_IS_LOCK_FIELD_DESC);
    oprot.writeBool(this.is_lock);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MAX_QUERIES_PER_HOUR_FIELD_DESC);
    oprot.writeI32(this.max_queries_per_hour);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MAX_UPDATES_PER_HOUR_FIELD_DESC);
    oprot.writeI32(this.max_updates_per_hour);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MAX_CONNECTIONS_PER_HOUR_FIELD_DESC);
    oprot.writeI32(this.max_connections_per_hour);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MAX_USER_CONNECTIONS_FIELD_DESC);
    oprot.writeI32(this.max_user_connections);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("UserItem(");

    ret.write("account:");
    if (this.account == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("is_lock:");
    ret.write(this.is_lock);

    ret.write(", ");
    ret.write("max_queries_per_hour:");
    ret.write(this.max_queries_per_hour);

    ret.write(", ");
    ret.write("max_updates_per_hour:");
    ret.write(this.max_updates_per_hour);

    ret.write(", ");
    ret.write("max_connections_per_hour:");
    ret.write(this.max_connections_per_hour);

    ret.write(", ");
    ret.write("max_user_connections:");
    ret.write(this.max_user_connections);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
