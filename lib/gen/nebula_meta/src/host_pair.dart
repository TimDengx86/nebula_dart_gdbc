/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.host_pair;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class HostPair implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("HostPair");
  static final TField _FROM_HOST_FIELD_DESC =
      new TField("from_host", TType.STRUCT, 1);
  static final TField _TO_HOST_FIELD_DESC =
      new TField("to_host", TType.STRUCT, 2);

  t_nebula.HostAddr? _from_host;
  static const int FROM_HOST = 1;
  t_nebula.HostAddr? _to_host;
  static const int TO_HOST = 2;

  HostPair() {}

  // from_host
  t_nebula.HostAddr? get from_host => this._from_host;

  set from_host(t_nebula.HostAddr? from_host) {
    this._from_host = from_host;
  }

  bool isSetFrom_host() => this.from_host != null;

  unsetFrom_host() {
    this.from_host = null;
  }

  // to_host
  t_nebula.HostAddr? get to_host => this._to_host;

  set to_host(t_nebula.HostAddr? to_host) {
    this._to_host = to_host;
  }

  bool isSetTo_host() => this.to_host != null;

  unsetTo_host() {
    this.to_host = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case FROM_HOST:
        return this.from_host;
      case TO_HOST:
        return this.to_host;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case FROM_HOST:
        if (value == null) {
          unsetFrom_host();
        } else {
          this.from_host = value as t_nebula.HostAddr?;
        }
        break;

      case TO_HOST:
        if (value == null) {
          unsetTo_host();
        } else {
          this.to_host = value as t_nebula.HostAddr?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case FROM_HOST:
        return isSetFrom_host();
      case TO_HOST:
        return isSetTo_host();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case FROM_HOST:
          if (field.type == TType.STRUCT) {
            this.from_host = new t_nebula.HostAddr();
            this.from_host?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TO_HOST:
          if (field.type == TType.STRUCT) {
            this.to_host = new t_nebula.HostAddr();
            this.to_host?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.from_host != null) {
      oprot.writeFieldBegin(_FROM_HOST_FIELD_DESC);
      this.from_host?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.to_host != null) {
      oprot.writeFieldBegin(_TO_HOST_FIELD_DESC);
      this.to_host?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("HostPair(");

    ret.write("from_host:");
    if (this.from_host == null) {
      ret.write("null");
    } else {
      ret.write(this.from_host);
    }

    ret.write(", ");
    ret.write("to_host:");
    if (this.to_host == null) {
      ret.write("null");
    } else {
      ret.write(this.to_host);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
