// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.kill_query_req;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class KillQueryReq implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("KillQueryReq");
  static final TField _KILL_QUERIES_FIELD_DESC =
      new TField("kill_queries", TType.MAP, 1);

  Map<int, Set<int>>? _kill_queries;
  static const int KILL_QUERIES = 1;

  KillQueryReq() {}

  // kill_queries
  Map<int, Set<int>>? get kill_queries => this._kill_queries;

  set kill_queries(Map<int, Set<int>>? kill_queries) {
    this._kill_queries = kill_queries;
  }

  bool isSetKill_queries() => this.kill_queries != null;

  unsetKill_queries() {
    this.kill_queries = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case KILL_QUERIES:
        return this.kill_queries;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case KILL_QUERIES:
        if (value == null) {
          unsetKill_queries();
        } else {
          this.kill_queries = value as Map<int, Set<int>>?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case KILL_QUERIES:
        return isSetKill_queries();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case KILL_QUERIES:
          if (field.type == TType.MAP) {
            {
              TMap _map382 = iprot.readMapBegin();
              this.kill_queries = new Map<int, Set<int>>();
              for (int _i383 = 0; _i383 < _map382.length; ++_i383) {
                int _key384;
                Set<int> _val385;
                _key384 = iprot.readI64();
                {
                  TSet _set386 = iprot.readSetBegin();
                  _val385 = new Set<int>();
                  for (int _i387 = 0; _i387 < _set386.length; ++_i387) {
                    int _elem388;
                    _elem388 = iprot.readI64();
                    _val385.add(_elem388);
                  }
                  iprot.readSetEnd();
                }
                this.kill_queries?[_key384] = _val385;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.kill_queries != null) {
      oprot.writeFieldBegin(_KILL_QUERIES_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.I64, TType.SET, this.kill_queries?.length));
        for (var elem390 in this.kill_queries?.keys ?? <int>[]) {
          oprot.writeI64(elem390);
          {
            oprot.writeSetBegin(
                new TSet(TType.I64, this.kill_queries?[elem390]?.length));
            for (var elem391 in this.kill_queries?[elem390] ?? <int>[]) {
              oprot.writeI64(elem391);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("KillQueryReq(");

    ret.write("kill_queries:");
    if (this.kill_queries == null) {
      ret.write("null");
    } else {
      ret.write(this.kill_queries);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
