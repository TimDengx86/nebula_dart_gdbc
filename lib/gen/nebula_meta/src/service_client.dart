/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_meta.src.service_client;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class ServiceClient implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ServiceClient");
  static final TField _HOST_FIELD_DESC = new TField("host", TType.STRUCT, 1);
  static final TField _USER_FIELD_DESC = new TField("user", TType.STRING, 2);
  static final TField _PWD_FIELD_DESC = new TField("pwd", TType.STRING, 3);
  static final TField _CONN_TYPE_FIELD_DESC =
      new TField("conn_type", TType.STRING, 4);

  t_nebula.HostAddr? _host;
  static const int HOST = 1;
  Int8List? _user;
  static const int USER = 2;
  Int8List? _pwd;
  static const int PWD = 3;
  Int8List? _conn_type;
  static const int CONN_TYPE = 4;

  ServiceClient() {}

  // host
  t_nebula.HostAddr? get host => this._host;

  set host(t_nebula.HostAddr? host) {
    this._host = host;
  }

  bool isSetHost() => this.host != null;

  unsetHost() {
    this.host = null;
  }

  // user
  Int8List? get user => this._user;

  set user(Int8List? user) {
    this._user = user;
  }

  bool isSetUser() => this.user != null;

  unsetUser() {
    this.user = null;
  }

  // pwd
  Int8List? get pwd => this._pwd;

  set pwd(Int8List? pwd) {
    this._pwd = pwd;
  }

  bool isSetPwd() => this.pwd != null;

  unsetPwd() {
    this.pwd = null;
  }

  // conn_type
  Int8List? get conn_type => this._conn_type;

  set conn_type(Int8List? conn_type) {
    this._conn_type = conn_type;
  }

  bool isSetConn_type() => this.conn_type != null;

  unsetConn_type() {
    this.conn_type = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HOST:
        return this.host;
      case USER:
        return this.user;
      case PWD:
        return this.pwd;
      case CONN_TYPE:
        return this.conn_type;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          this.host = value as t_nebula.HostAddr;
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          this.user = value as Int8List;
        }
        break;

      case PWD:
        if (value == null) {
          unsetPwd();
        } else {
          this.pwd = value as Int8List;
        }
        break;

      case CONN_TYPE:
        if (value == null) {
          unsetConn_type();
        } else {
          this.conn_type = value as Int8List;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HOST:
        return isSetHost();
      case USER:
        return isSetUser();
      case PWD:
        return isSetPwd();
      case CONN_TYPE:
        return isSetConn_type();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HOST:
          if (field.type == TType.STRUCT) {
            this.host = new t_nebula.HostAddr();
            this.host?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USER:
          if (field.type == TType.STRING) {
            this.user = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PWD:
          if (field.type == TType.STRING) {
            this.pwd = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONN_TYPE:
          if (field.type == TType.STRING) {
            this.conn_type = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.host != null) {
      oprot.writeFieldBegin(_HOST_FIELD_DESC);
      this.host?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetUser()) {
      if (this.user != null) {
        oprot.writeFieldBegin(_USER_FIELD_DESC);
        oprot.writeBinary(this.user);
        oprot.writeFieldEnd();
      }
    }
    if (isSetPwd()) {
      if (this.pwd != null) {
        oprot.writeFieldBegin(_PWD_FIELD_DESC);
        oprot.writeBinary(this.pwd);
        oprot.writeFieldEnd();
      }
    }
    if (isSetConn_type()) {
      if (this.conn_type != null) {
        oprot.writeFieldBegin(_CONN_TYPE_FIELD_DESC);
        oprot.writeBinary(this.conn_type);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ServiceClient(");

    ret.write("host:");
    if (this.host == null) {
      ret.write("null");
    } else {
      ret.write(this.host);
    }

    if (isSetUser()) {
      ret.write(", ");
      ret.write("user:");
      if (this.user == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetPwd()) {
      ret.write(", ");
      ret.write("pwd:");
      if (this.pwd == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetConn_type()) {
      ret.write(", ");
      ret.write("conn_type:");
      if (this.conn_type == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    if (host == null) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'host' was not present! Struct: " + toString());
    }
    // check that fields of type enum have valid values
  }
}
