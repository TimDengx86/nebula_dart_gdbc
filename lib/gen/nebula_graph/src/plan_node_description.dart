// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_graph.src.plan_node_description;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_graph/nebula_graph.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class PlanNodeDescription implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("PlanNodeDescription");
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 1);
  static final TField _ID_FIELD_DESC = new TField("id", TType.I64, 2);
  static final TField _OUTPUT_VAR_FIELD_DESC =
      new TField("output_var", TType.STRING, 3);
  static final TField _DESCRIPTION_FIELD_DESC =
      new TField("description", TType.LIST, 4);
  static final TField _PROFILES_FIELD_DESC =
      new TField("profiles", TType.LIST, 5);
  static final TField _BRANCH_INFO_FIELD_DESC =
      new TField("branch_info", TType.STRUCT, 6);
  static final TField _DEPENDENCIES_FIELD_DESC =
      new TField("dependencies", TType.LIST, 7);

  Int8List? _name;
  static const int NAME = 1;
  int _id = 0;
  static const int ID = 2;
  Int8List? _output_var;
  static const int OUTPUT_VAR = 3;
  List<Pair>? _description;
  static const int DESCRIPTION = 4;
  List<ProfilingStats>? _profiles;
  static const int PROFILES = 5;
  PlanNodeBranchInfo? _branch_info;
  static const int BRANCH_INFO = 6;
  List<int>? _dependencies;
  static const int DEPENDENCIES = 7;

  bool __isset_id = false;

  PlanNodeDescription() {}

  // name
  Int8List? get name => this._name;

  set name(Int8List? name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // id
  int get id => this._id;

  set id(int id) {
    this._id = id;
    this.__isset_id = true;
  }

  bool isSetId() => this.__isset_id;

  unsetId() {
    this.__isset_id = false;
  }

  // output_var
  Int8List? get output_var => this._output_var;

  set output_var(Int8List? output_var) {
    this._output_var = output_var;
  }

  bool isSetOutput_var() => this.output_var != null;

  unsetOutput_var() {
    this.output_var = null;
  }

  // description
  List<Pair>? get description => this._description;

  set description(List<Pair>? description) {
    this._description = description;
  }

  bool isSetDescription() => this.description != null;

  unsetDescription() {
    this.description = null;
  }

  // profiles
  List<ProfilingStats>? get profiles => this._profiles;

  set profiles(List<ProfilingStats>? profiles) {
    this._profiles = profiles;
  }

  bool isSetProfiles() => this.profiles != null;

  unsetProfiles() {
    this.profiles = null;
  }

  // branch_info
  PlanNodeBranchInfo? get branch_info => this._branch_info;

  set branch_info(PlanNodeBranchInfo? branch_info) {
    this._branch_info = branch_info;
  }

  bool isSetBranch_info() => this.branch_info != null;

  unsetBranch_info() {
    this.branch_info = null;
  }

  // dependencies
  List<int>? get dependencies => this._dependencies;

  set dependencies(List<int>? dependencies) {
    this._dependencies = dependencies;
  }

  bool isSetDependencies() => this.dependencies != null;

  unsetDependencies() {
    this.dependencies = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NAME:
        return this.name;
      case ID:
        return this.id;
      case OUTPUT_VAR:
        return this.output_var;
      case DESCRIPTION:
        return this.description;
      case PROFILES:
        return this.profiles;
      case BRANCH_INFO:
        return this.branch_info;
      case DEPENDENCIES:
        return this.dependencies;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value as Int8List;
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value as int;
        }
        break;

      case OUTPUT_VAR:
        if (value == null) {
          unsetOutput_var();
        } else {
          this.output_var = value as Int8List;
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          this.description = value as List<Pair>;
        }
        break;

      case PROFILES:
        if (value == null) {
          unsetProfiles();
        } else {
          this.profiles = value as List<ProfilingStats>;
        }
        break;

      case BRANCH_INFO:
        if (value == null) {
          unsetBranch_info();
        } else {
          this.branch_info = value as PlanNodeBranchInfo;
        }
        break;

      case DEPENDENCIES:
        if (value == null) {
          unsetDependencies();
        } else {
          this.dependencies = value as List<int>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NAME:
        return isSetName();
      case ID:
        return isSetId();
      case OUTPUT_VAR:
        return isSetOutput_var();
      case DESCRIPTION:
        return isSetDescription();
      case PROFILES:
        return isSetProfiles();
      case BRANCH_INFO:
        return isSetBranch_info();
      case DEPENDENCIES:
        return isSetDependencies();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ID:
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            this.__isset_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OUTPUT_VAR:
          if (field.type == TType.STRING) {
            this.output_var = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DESCRIPTION:
          if (field.type == TType.LIST) {
            {
              TList _list6 = iprot.readListBegin();
              this.description = <Pair>[];
              for (int _i7 = 0; _i7 < _list6.length; ++_i7) {
                Pair _elem8;
                _elem8 = new Pair();
                _elem8.read(iprot);
                this.description?.add(_elem8);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROFILES:
          if (field.type == TType.LIST) {
            {
              TList _list9 = iprot.readListBegin();
              this.profiles = <ProfilingStats>[];
              for (int _i10 = 0; _i10 < _list9.length; ++_i10) {
                ProfilingStats _elem11;
                _elem11 = new ProfilingStats();
                _elem11.read(iprot);
                this.profiles?.add(_elem11);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BRANCH_INFO:
          if (field.type == TType.STRUCT) {
            this.branch_info = new PlanNodeBranchInfo();
            this.branch_info?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEPENDENCIES:
          if (field.type == TType.LIST) {
            {
              TList _list12 = iprot.readListBegin();
              this.dependencies = <int>[];
              for (int _i13 = 0; _i13 < _list12.length; ++_i13) {
                int _elem14;
                _elem14 = iprot.readI64();
                this.dependencies?.add(_elem14);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!__isset_id) {
      throw new TProtocolError(
          TProtocolErrorType.UNKNOWN,
          "Required field 'id' was not found in serialized data! Struct: " +
              toString());
    }

    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeBinary(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ID_FIELD_DESC);
    oprot.writeI64(this.id);
    oprot.writeFieldEnd();
    if (this.output_var != null) {
      oprot.writeFieldBegin(_OUTPUT_VAR_FIELD_DESC);
      oprot.writeBinary(this.output_var);
      oprot.writeFieldEnd();
    }
    if (isSetDescription()) {
      if (this.description != null) {
        oprot.writeFieldBegin(_DESCRIPTION_FIELD_DESC);
        {
          oprot.writeListBegin(
              new TList(TType.STRUCT, this.description?.length));
          for (var elem15 in this.description ?? []) {
            elem15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetProfiles()) {
      if (this.profiles != null) {
        oprot.writeFieldBegin(_PROFILES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.profiles?.length));
          for (var elem16 in this.profiles ?? []) {
            elem16.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetBranch_info()) {
      if (this.branch_info != null) {
        oprot.writeFieldBegin(_BRANCH_INFO_FIELD_DESC);
        this.branch_info?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetDependencies()) {
      if (this.dependencies != null) {
        oprot.writeFieldBegin(_DEPENDENCIES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I64, this.dependencies?.length));
          for (var elem17 in this.dependencies ?? []) {
            oprot.writeI64(elem17);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("PlanNodeDescription(");

    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("id:");
    ret.write(this.id);

    ret.write(", ");
    ret.write("output_var:");
    if (this.output_var == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    if (isSetDescription()) {
      ret.write(", ");
      ret.write("description:");
      if (this.description == null) {
        ret.write("null");
      } else {
        ret.write(this.description);
      }
    }

    if (isSetProfiles()) {
      ret.write(", ");
      ret.write("profiles:");
      if (this.profiles == null) {
        ret.write("null");
      } else {
        ret.write(this.profiles);
      }
    }

    if (isSetBranch_info()) {
      ret.write(", ");
      ret.write("branch_info:");
      if (this.branch_info == null) {
        ret.write("null");
      } else {
        ret.write(this.branch_info);
      }
    }

    if (isSetDependencies()) {
      ret.write(", ");
      ret.write("dependencies:");
      if (this.dependencies == null) {
        ret.write("null");
      } else {
        ret.write(this.dependencies);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    if (name == null) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (output_var == null) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'output_var' was not present! Struct: " + toString());
    }
    // check that fields of type enum have valid values
  }
}
