/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_graph.src.plan_node_branch_info;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_graph/nebula_graph.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class PlanNodeBranchInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("PlanNodeBranchInfo");
  static final TField _IS_DO_BRANCH_FIELD_DESC =
      new TField("is_do_branch", TType.BOOL, 1);
  static final TField _CONDITION_NODE_ID_FIELD_DESC =
      new TField("condition_node_id", TType.I64, 2);

  bool _is_do_branch = false;
  static const int IS_DO_BRANCH = 1;
  int _condition_node_id = 0;
  static const int CONDITION_NODE_ID = 2;

  bool __isset_is_do_branch = false;
  bool __isset_condition_node_id = false;

  PlanNodeBranchInfo() {}

  // is_do_branch
  bool get is_do_branch => this._is_do_branch;

  set is_do_branch(bool is_do_branch) {
    this._is_do_branch = is_do_branch;
    this.__isset_is_do_branch = true;
  }

  bool isSetIs_do_branch() => this.__isset_is_do_branch;

  unsetIs_do_branch() {
    this.__isset_is_do_branch = false;
  }

  // condition_node_id
  int get condition_node_id => this._condition_node_id;

  set condition_node_id(int condition_node_id) {
    this._condition_node_id = condition_node_id;
    this.__isset_condition_node_id = true;
  }

  bool isSetCondition_node_id() => this.__isset_condition_node_id;

  unsetCondition_node_id() {
    this.__isset_condition_node_id = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case IS_DO_BRANCH:
        return this.is_do_branch;
      case CONDITION_NODE_ID:
        return this.condition_node_id;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case IS_DO_BRANCH:
        if (value == null) {
          unsetIs_do_branch();
        } else {
          this.is_do_branch = value as bool;
        }
        break;

      case CONDITION_NODE_ID:
        if (value == null) {
          unsetCondition_node_id();
        } else {
          this.condition_node_id = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case IS_DO_BRANCH:
        return isSetIs_do_branch();
      case CONDITION_NODE_ID:
        return isSetCondition_node_id();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case IS_DO_BRANCH:
          if (field.type == TType.BOOL) {
            this.is_do_branch = iprot.readBool();
            this.__isset_is_do_branch = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONDITION_NODE_ID:
          if (field.type == TType.I64) {
            this.condition_node_id = iprot.readI64();
            this.__isset_condition_node_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!__isset_is_do_branch) {
      throw new TProtocolError(
          TProtocolErrorType.UNKNOWN,
          "Required field 'is_do_branch' was not found in serialized data! Struct: " +
              toString());
    }

    if (!__isset_condition_node_id) {
      throw new TProtocolError(
          TProtocolErrorType.UNKNOWN,
          "Required field 'condition_node_id' was not found in serialized data! Struct: " +
              toString());
    }

    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_IS_DO_BRANCH_FIELD_DESC);
    oprot.writeBool(this.is_do_branch);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CONDITION_NODE_ID_FIELD_DESC);
    oprot.writeI64(this.condition_node_id);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("PlanNodeBranchInfo(");

    ret.write("is_do_branch:");
    ret.write(this.is_do_branch);

    ret.write(", ");
    ret.write("condition_node_id:");
    ret.write(this.condition_node_id);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // alas, we cannot check 'is_do_branch' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'condition_node_id' because it's a primitive and you chose the non-beans generator.
    // check that fields of type enum have valid values
  }
}
