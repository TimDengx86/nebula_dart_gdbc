// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_graph.src.execution_response;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_graph/nebula_graph.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class ExecutionResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ExecutionResponse");
  static final TField _ERROR_CODE_FIELD_DESC =
      new TField("error_code", TType.I32, 1);
  static final TField _LATENCY_IN_US_FIELD_DESC =
      new TField("latency_in_us", TType.I64, 2);
  static final TField _DATA_FIELD_DESC = new TField("data", TType.STRUCT, 3);
  static final TField _SPACE_NAME_FIELD_DESC =
      new TField("space_name", TType.STRING, 4);
  static final TField _ERROR_MSG_FIELD_DESC =
      new TField("error_msg", TType.STRING, 5);
  static final TField _PLAN_DESC_FIELD_DESC =
      new TField("plan_desc", TType.STRUCT, 6);
  static final TField _COMMENT_FIELD_DESC =
      new TField("comment", TType.STRING, 7);

  int? _error_code;
  static const int ERROR_CODE = 1;
  int _latency_in_us = 0;
  static const int LATENCY_IN_US = 2;
  t_nebula.DataSet? _data;
  static const int DATA = 3;
  Int8List? _space_name;
  static const int SPACE_NAME = 4;
  Int8List? _error_msg;
  static const int ERROR_MSG = 5;
  PlanDescription? _plan_desc;
  static const int PLAN_DESC = 6;
  Int8List? _comment;
  static const int COMMENT = 7;

  bool __isset_error_code = false;
  bool __isset_latency_in_us = false;

  ExecutionResponse() {}

  // error_code
  int? get error_code => this._error_code;

  set error_code(int? error_code) {
    this._error_code = error_code;
    this.__isset_error_code = true;
  }

  bool isSetError_code() => this.__isset_error_code;

  unsetError_code() {
    this.__isset_error_code = false;
  }

  // latency_in_us
  int get latency_in_us => this._latency_in_us;

  set latency_in_us(int latency_in_us) {
    this._latency_in_us = latency_in_us;
    this.__isset_latency_in_us = true;
  }

  bool isSetLatency_in_us() => this.__isset_latency_in_us;

  unsetLatency_in_us() {
    this.__isset_latency_in_us = false;
  }

  // data
  t_nebula.DataSet? get data => this._data;

  set data(t_nebula.DataSet? data) {
    this._data = data;
  }

  bool isSetData() => this.data != null;

  unsetData() {
    this.data = null;
  }

  // space_name
  Int8List? get space_name => this._space_name;

  set space_name(Int8List? space_name) {
    this._space_name = space_name;
  }

  bool isSetSpace_name() => this.space_name != null;

  unsetSpace_name() {
    this.space_name = null;
  }

  // error_msg
  Int8List? get error_msg => this._error_msg;

  set error_msg(Int8List? error_msg) {
    this._error_msg = error_msg;
  }

  bool isSetError_msg() => this.error_msg != null;

  unsetError_msg() {
    this.error_msg = null;
  }

  // plan_desc
  PlanDescription? get plan_desc => this._plan_desc;

  set plan_desc(PlanDescription? plan_desc) {
    this._plan_desc = plan_desc;
  }

  bool isSetPlan_desc() => this.plan_desc != null;

  unsetPlan_desc() {
    this.plan_desc = null;
  }

  // comment
  Int8List? get comment => this._comment;

  set comment(Int8List? comment) {
    this._comment = comment;
  }

  bool isSetComment() => this.comment != null;

  unsetComment() {
    this.comment = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ERROR_CODE:
        return this.error_code;
      case LATENCY_IN_US:
        return this.latency_in_us;
      case DATA:
        return this.data;
      case SPACE_NAME:
        return this.space_name;
      case ERROR_MSG:
        return this.error_msg;
      case PLAN_DESC:
        return this.plan_desc;
      case COMMENT:
        return this.comment;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ERROR_CODE:
        if (value == null) {
          unsetError_code();
        } else {
          this.error_code = value as int?;
        }
        break;

      case LATENCY_IN_US:
        if (value == null) {
          unsetLatency_in_us();
        } else {
          this.latency_in_us = value as int;
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          this.data = value as t_nebula.DataSet?;
        }
        break;

      case SPACE_NAME:
        if (value == null) {
          unsetSpace_name();
        } else {
          this.space_name = value as Int8List?;
        }
        break;

      case ERROR_MSG:
        if (value == null) {
          unsetError_msg();
        } else {
          this.error_msg = value as Int8List?;
        }
        break;

      case PLAN_DESC:
        if (value == null) {
          unsetPlan_desc();
        } else {
          this.plan_desc = value as PlanDescription?;
        }
        break;

      case COMMENT:
        if (value == null) {
          unsetComment();
        } else {
          this.comment = value as Int8List?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ERROR_CODE:
        return isSetError_code();
      case LATENCY_IN_US:
        return isSetLatency_in_us();
      case DATA:
        return isSetData();
      case SPACE_NAME:
        return isSetSpace_name();
      case ERROR_MSG:
        return isSetError_msg();
      case PLAN_DESC:
        return isSetPlan_desc();
      case COMMENT:
        return isSetComment();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ERROR_CODE:
          if (field.type == TType.I32) {
            this.error_code = iprot.readI32();
            this.__isset_error_code = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LATENCY_IN_US:
          if (field.type == TType.I64) {
            this.latency_in_us = iprot.readI64();
            this.__isset_latency_in_us = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DATA:
          if (field.type == TType.STRUCT) {
            this.data = new t_nebula.DataSet();
            this.data?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPACE_NAME:
          if (field.type == TType.STRING) {
            this.space_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ERROR_MSG:
          if (field.type == TType.STRING) {
            this.error_msg = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PLAN_DESC:
          if (field.type == TType.STRUCT) {
            this.plan_desc = new PlanDescription();
            this.plan_desc?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMENT:
          if (field.type == TType.STRING) {
            this.comment = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!__isset_error_code) {
      throw new TProtocolError(
          TProtocolErrorType.UNKNOWN,
          "Required field 'error_code' was not found in serialized data! Struct: " +
              toString());
    }

    if (!__isset_latency_in_us) {
      throw new TProtocolError(
          TProtocolErrorType.UNKNOWN,
          "Required field 'latency_in_us' was not found in serialized data! Struct: " +
              toString());
    }

    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ERROR_CODE_FIELD_DESC);
    oprot.writeI32(this.error_code);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LATENCY_IN_US_FIELD_DESC);
    oprot.writeI64(this.latency_in_us);
    oprot.writeFieldEnd();
    if (isSetData()) {
      if (this.data != null) {
        oprot.writeFieldBegin(_DATA_FIELD_DESC);
        this.data?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetSpace_name()) {
      if (this.space_name != null) {
        oprot.writeFieldBegin(_SPACE_NAME_FIELD_DESC);
        oprot.writeBinary(this.space_name);
        oprot.writeFieldEnd();
      }
    }
    if (isSetError_msg()) {
      if (this.error_msg != null) {
        oprot.writeFieldBegin(_ERROR_MSG_FIELD_DESC);
        oprot.writeBinary(this.error_msg);
        oprot.writeFieldEnd();
      }
    }
    if (isSetPlan_desc()) {
      if (this.plan_desc != null) {
        oprot.writeFieldBegin(_PLAN_DESC_FIELD_DESC);
        this.plan_desc?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetComment()) {
      if (this.comment != null) {
        oprot.writeFieldBegin(_COMMENT_FIELD_DESC);
        oprot.writeBinary(this.comment);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ExecutionResponse(");

    ret.write("error_code:");
    String? error_code_name =
        t_nebula.ErrorCode.VALUES_TO_NAMES[this.error_code];
    if (error_code_name != null) {
      ret.write(error_code_name);
      ret.write(" (");
    }
    ret.write(this.error_code);
    if (error_code_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("latency_in_us:");
    ret.write(this.latency_in_us);

    if (isSetData()) {
      ret.write(", ");
      ret.write("data:");
      if (this.data == null) {
        ret.write("null");
      } else {
        ret.write(this.data);
      }
    }

    if (isSetSpace_name()) {
      ret.write(", ");
      ret.write("space_name:");
      if (this.space_name == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetError_msg()) {
      ret.write(", ");
      ret.write("error_msg:");
      if (this.error_msg == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetPlan_desc()) {
      ret.write(", ");
      ret.write("plan_desc:");
      if (this.plan_desc == null) {
        ret.write("null");
      } else {
        ret.write(this.plan_desc);
      }
    }

    if (isSetComment()) {
      ret.write(", ");
      ret.write("comment:");
      if (this.comment == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // alas, we cannot check 'error_code' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'latency_in_us' because it's a primitive and you chose the non-beans generator.
    // check that fields of type enum have valid values
    if (isSetError_code() &&
        !t_nebula.ErrorCode.VALID_VALUES.contains(error_code)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'error_code' has been assigned the invalid value $error_code");
    }
  }
}
