// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_graph.src.profiling_stats;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_graph/nebula_graph.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class ProfilingStats implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ProfilingStats");
  static final TField _ROWS_FIELD_DESC = new TField("rows", TType.I64, 1);
  static final TField _EXEC_DURATION_IN_US_FIELD_DESC =
      new TField("exec_duration_in_us", TType.I64, 2);
  static final TField _TOTAL_DURATION_IN_US_FIELD_DESC =
      new TField("total_duration_in_us", TType.I64, 3);
  static final TField _OTHER_STATS_FIELD_DESC =
      new TField("other_stats", TType.MAP, 4);

  int _rows = 0;
  static const int ROWS = 1;
  int _exec_duration_in_us = 0;
  static const int EXEC_DURATION_IN_US = 2;
  int _total_duration_in_us = 0;
  static const int TOTAL_DURATION_IN_US = 3;
  Map<Int8List, Int8List>? _other_stats;
  static const int OTHER_STATS = 4;

  bool __isset_rows = false;
  bool __isset_exec_duration_in_us = false;
  bool __isset_total_duration_in_us = false;

  ProfilingStats() {}

  // rows
  int get rows => this._rows;

  set rows(int rows) {
    this._rows = rows;
    this.__isset_rows = true;
  }

  bool isSetRows() => this.__isset_rows;

  unsetRows() {
    this.__isset_rows = false;
  }

  // exec_duration_in_us
  int get exec_duration_in_us => this._exec_duration_in_us;

  set exec_duration_in_us(int exec_duration_in_us) {
    this._exec_duration_in_us = exec_duration_in_us;
    this.__isset_exec_duration_in_us = true;
  }

  bool isSetExec_duration_in_us() => this.__isset_exec_duration_in_us;

  unsetExec_duration_in_us() {
    this.__isset_exec_duration_in_us = false;
  }

  // total_duration_in_us
  int get total_duration_in_us => this._total_duration_in_us;

  set total_duration_in_us(int total_duration_in_us) {
    this._total_duration_in_us = total_duration_in_us;
    this.__isset_total_duration_in_us = true;
  }

  bool isSetTotal_duration_in_us() => this.__isset_total_duration_in_us;

  unsetTotal_duration_in_us() {
    this.__isset_total_duration_in_us = false;
  }

  // other_stats
  Map<Int8List, Int8List>? get other_stats => this._other_stats;

  set other_stats(Map<Int8List, Int8List>? other_stats) {
    this._other_stats = other_stats;
  }

  bool isSetOther_stats() => this.other_stats != null;

  unsetOther_stats() {
    this.other_stats = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ROWS:
        return this.rows;
      case EXEC_DURATION_IN_US:
        return this.exec_duration_in_us;
      case TOTAL_DURATION_IN_US:
        return this.total_duration_in_us;
      case OTHER_STATS:
        return this.other_stats;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ROWS:
        if (value == null) {
          unsetRows();
        } else {
          this.rows = value as int;
        }
        break;

      case EXEC_DURATION_IN_US:
        if (value == null) {
          unsetExec_duration_in_us();
        } else {
          this.exec_duration_in_us = value as int;
        }
        break;

      case TOTAL_DURATION_IN_US:
        if (value == null) {
          unsetTotal_duration_in_us();
        } else {
          this.total_duration_in_us = value as int;
        }
        break;

      case OTHER_STATS:
        if (value == null) {
          unsetOther_stats();
        } else {
          this.other_stats = value as Map<Int8List, Int8List>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ROWS:
        return isSetRows();
      case EXEC_DURATION_IN_US:
        return isSetExec_duration_in_us();
      case TOTAL_DURATION_IN_US:
        return isSetTotal_duration_in_us();
      case OTHER_STATS:
        return isSetOther_stats();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ROWS:
          if (field.type == TType.I64) {
            this.rows = iprot.readI64();
            this.__isset_rows = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXEC_DURATION_IN_US:
          if (field.type == TType.I64) {
            this.exec_duration_in_us = iprot.readI64();
            this.__isset_exec_duration_in_us = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTAL_DURATION_IN_US:
          if (field.type == TType.I64) {
            this.total_duration_in_us = iprot.readI64();
            this.__isset_total_duration_in_us = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OTHER_STATS:
          if (field.type == TType.MAP) {
            {
              TMap _map0 = iprot.readMapBegin();
              this.other_stats = new Map<Int8List, Int8List>();
              for (int _i1 = 0; _i1 < _map0.length; ++_i1) {
                Int8List _key2;
                Int8List _val3;
                _key2 = iprot.readBinary();
                _val3 = iprot.readBinary();
                this.other_stats?[_key2] = _val3;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!__isset_rows) {
      throw new TProtocolError(
          TProtocolErrorType.UNKNOWN,
          "Required field 'rows' was not found in serialized data! Struct: " +
              toString());
    }

    if (!__isset_exec_duration_in_us) {
      throw new TProtocolError(
          TProtocolErrorType.UNKNOWN,
          "Required field 'exec_duration_in_us' was not found in serialized data! Struct: " +
              toString());
    }

    if (!__isset_total_duration_in_us) {
      throw new TProtocolError(
          TProtocolErrorType.UNKNOWN,
          "Required field 'total_duration_in_us' was not found in serialized data! Struct: " +
              toString());
    }

    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ROWS_FIELD_DESC);
    oprot.writeI64(this.rows);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_EXEC_DURATION_IN_US_FIELD_DESC);
    oprot.writeI64(this.exec_duration_in_us);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TOTAL_DURATION_IN_US_FIELD_DESC);
    oprot.writeI64(this.total_duration_in_us);
    oprot.writeFieldEnd();
    if (isSetOther_stats()) {
      if (this.other_stats != null) {
        oprot.writeFieldBegin(_OTHER_STATS_FIELD_DESC);
        {
          oprot.writeMapBegin(
              new TMap(TType.STRING, TType.STRING, this.other_stats?.length));
          for (var elem5 in this.other_stats?.keys ?? <Int8List>[]) {
            oprot.writeBinary(elem5);
            oprot.writeBinary(this.other_stats?[elem5]);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ProfilingStats(");

    ret.write("rows:");
    ret.write(this.rows);

    ret.write(", ");
    ret.write("exec_duration_in_us:");
    ret.write(this.exec_duration_in_us);

    ret.write(", ");
    ret.write("total_duration_in_us:");
    ret.write(this.total_duration_in_us);

    if (isSetOther_stats()) {
      ret.write(", ");
      ret.write("other_stats:");
      if (this.other_stats == null) {
        ret.write("null");
      } else {
        ret.write(this.other_stats);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // alas, we cannot check 'rows' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'exec_duration_in_us' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'total_duration_in_us' because it's a primitive and you chose the non-beans generator.
    // check that fields of type enum have valid values
  }
}
