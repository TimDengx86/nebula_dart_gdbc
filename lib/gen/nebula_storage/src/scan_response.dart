// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.scan_response;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class ScanResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ScanResponse");
  static final TField _RESULT_FIELD_DESC =
      new TField("result", TType.STRUCT, 1);
  static final TField _PROPS_FIELD_DESC = new TField("props", TType.STRUCT, 2);
  static final TField _CURSORS_FIELD_DESC = new TField("cursors", TType.MAP, 3);

  ResponseCommon? _result;
  static const int RESULT = 1;
  t_nebula.DataSet? _props;
  static const int PROPS = 2;
  Map<int, ScanCursor>? _cursors;
  static const int CURSORS = 3;

  ScanResponse() {}

  // result
  ResponseCommon? get result => this._result;

  set result(ResponseCommon? result) {
    this._result = result;
  }

  bool isSetResult() => this.result != null;

  unsetResult() {
    this.result = null;
  }

  // props
  t_nebula.DataSet? get props => this._props;

  set props(t_nebula.DataSet? props) {
    this._props = props;
  }

  bool isSetProps() => this.props != null;

  unsetProps() {
    this.props = null;
  }

  // cursors
  Map<int, ScanCursor>? get cursors => this._cursors;

  set cursors(Map<int, ScanCursor>? cursors) {
    this._cursors = cursors;
  }

  bool isSetCursors() => this.cursors != null;

  unsetCursors() {
    this.cursors = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case RESULT:
        return this.result;
      case PROPS:
        return this.props;
      case CURSORS:
        return this.cursors;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case RESULT:
        if (value == null) {
          unsetResult();
        } else {
          this.result = value as ResponseCommon?;
        }
        break;

      case PROPS:
        if (value == null) {
          unsetProps();
        } else {
          this.props = value as t_nebula.DataSet?;
        }
        break;

      case CURSORS:
        if (value == null) {
          unsetCursors();
        } else {
          this.cursors = value as Map<int, ScanCursor>?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case RESULT:
        return isSetResult();
      case PROPS:
        return isSetProps();
      case CURSORS:
        return isSetCursors();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case RESULT:
          if (field.type == TType.STRUCT) {
            this.result = new ResponseCommon();
            this.result?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROPS:
          if (field.type == TType.STRUCT) {
            this.props = new t_nebula.DataSet();
            this.props?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURSORS:
          if (field.type == TType.MAP) {
            {
              TMap _map240 = iprot.readMapBegin();
              this.cursors = <int, ScanCursor>{};
              for (int _i241 = 0; _i241 < _map240.length; ++_i241) {
                int _key242;
                ScanCursor _val243;
                _key242 = iprot.readI32();
                _val243 = new ScanCursor();
                _val243.read(iprot);
                this.cursors?[_key242] = _val243;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.result != null) {
      oprot.writeFieldBegin(_RESULT_FIELD_DESC);
      this.result?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetProps()) {
      if (this.props != null) {
        oprot.writeFieldBegin(_PROPS_FIELD_DESC);
        this.props?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.cursors != null) {
      oprot.writeFieldBegin(_CURSORS_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.I32, TType.STRUCT, this.cursors?.length));
        for (var elem245 in this.cursors?.keys ?? <int>[]) {
          oprot.writeI32(elem245);
          this.cursors?[elem245]?.write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ScanResponse(");

    ret.write("result:");
    if (this.result == null) {
      ret.write("null");
    } else {
      ret.write(this.result);
    }

    if (isSetProps()) {
      ret.write(", ");
      ret.write("props:");
      if (this.props == null) {
        ret.write("null");
      } else {
        ret.write(this.props);
      }
    }

    ret.write(", ");
    ret.write("cursors:");
    if (this.cursors == null) {
      ret.write("null");
    } else {
      ret.write(this.cursors);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    if (result == null) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'result' was not present! Struct: ${toString()}");
    }
    // check that fields of type enum have valid values
  }
}
