// ignore_for_file: unnecessary_this, unnecessary_new, non_constant_identifier_names, annotate_overrides, no_leading_underscores_for_local_identifiers, constant_identifier_names, unused_import, import_of_legacy_library_into_null_safe, slash_for_doc_comments, empty_constructor_bodies

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.kv_get_response;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class KVGetResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("KVGetResponse");
  static final TField _RESULT_FIELD_DESC =
      new TField("result", TType.STRUCT, 1);
  static final TField _KEY_VALUES_FIELD_DESC =
      new TField("key_values", TType.MAP, 2);

  ResponseCommon? _result;
  static const int RESULT = 1;
  Map<Int8List, Int8List>? _key_values;
  static const int KEY_VALUES = 2;

  KVGetResponse() {}

  // result
  ResponseCommon? get result => this._result;

  set result(ResponseCommon? result) {
    this._result = result;
  }

  bool isSetResult() => this.result != null;

  unsetResult() {
    this.result = null;
  }

  // key_values
  Map<Int8List, Int8List>? get key_values => this._key_values;

  set key_values(Map<Int8List, Int8List>? key_values) {
    this._key_values = key_values;
  }

  bool isSetKey_values() => this.key_values != null;

  unsetKey_values() {
    this.key_values = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case RESULT:
        return this.result;
      case KEY_VALUES:
        return this.key_values;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case RESULT:
        if (value == null) {
          unsetResult();
        } else {
          this.result = value as ResponseCommon?;
        }
        break;

      case KEY_VALUES:
        if (value == null) {
          unsetKey_values();
        } else {
          this.key_values = value as Map<Int8List, Int8List>?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case RESULT:
        return isSetResult();
      case KEY_VALUES:
        return isSetKey_values();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case RESULT:
          if (field.type == TType.STRUCT) {
            this.result = new ResponseCommon();
            this.result?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case KEY_VALUES:
          if (field.type == TType.MAP) {
            {
              TMap _map264 = iprot.readMapBegin();
              this.key_values = <Int8List, Int8List>{};
              for (int _i265 = 0; _i265 < _map264.length; ++_i265) {
                Int8List _key266;
                Int8List _val267;
                _key266 = iprot.readBinary();
                _val267 = iprot.readBinary();
                this.key_values?[_key266] = _val267;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.result != null) {
      oprot.writeFieldBegin(_RESULT_FIELD_DESC);
      this.result?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.key_values != null) {
      oprot.writeFieldBegin(_KEY_VALUES_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.STRING, TType.STRING, this.key_values?.length));
        for (var elem269 in this.key_values?.keys ?? <Int8List>[]) {
          oprot.writeBinary(elem269);
          oprot.writeBinary(this.key_values?[elem269]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("KVGetResponse(");

    ret.write("result:");
    if (this.result == null) {
      ret.write("null");
    } else {
      ret.write(this.result);
    }

    ret.write(", ");
    ret.write("key_values:");
    if (this.key_values == null) {
      ret.write("null");
    } else {
      ret.write(this.key_values);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    if (result == null) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'result' was not present! Struct: ${toString()}");
    }
    // check that fields of type enum have valid values
  }
}
