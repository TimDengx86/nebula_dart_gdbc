// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.lookup_index_request;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class LookupIndexRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("LookupIndexRequest");
  static final TField _SPACE_ID_FIELD_DESC =
      new TField("space_id", TType.I32, 1);
  static final TField _PARTS_FIELD_DESC = new TField("parts", TType.LIST, 2);
  static final TField _INDICES_FIELD_DESC =
      new TField("indices", TType.STRUCT, 3);
  static final TField _RETURN_COLUMNS_FIELD_DESC =
      new TField("return_columns", TType.LIST, 4);
  static final TField _COMMON_FIELD_DESC =
      new TField("common", TType.STRUCT, 5);
  static final TField _LIMIT_FIELD_DESC = new TField("limit", TType.I64, 6);
  static final TField _ORDER_BY_FIELD_DESC =
      new TField("order_by", TType.LIST, 7);
  static final TField _STAT_COLUMNS_FIELD_DESC =
      new TField("stat_columns", TType.LIST, 8);

  int _space_id = 0;
  static const int SPACE_ID = 1;
  List<int>? _parts;
  static const int PARTS = 2;
  IndexSpec? _indices;
  static const int INDICES = 3;
  List<Int8List>? _return_columns;
  static const int RETURN_COLUMNS = 4;
  RequestCommon? _common;
  static const int COMMON = 5;
  int? _limit;
  static const int LIMIT = 6;
  List<OrderBy>? _order_by;
  static const int ORDER_BY = 7;
  List<StatProp>? _stat_columns;
  static const int STAT_COLUMNS = 8;

  bool __isset_space_id = false;
  bool __isset_limit = false;

  LookupIndexRequest() {}

  // space_id
  int get space_id => this._space_id;

  set space_id(int space_id) {
    this._space_id = space_id;
    this.__isset_space_id = true;
  }

  bool isSetSpace_id() => this.__isset_space_id;

  unsetSpace_id() {
    this.__isset_space_id = false;
  }

  // parts
  List<int>? get parts => this._parts;

  set parts(List<int>? parts) {
    this._parts = parts;
  }

  bool isSetParts() => this.parts != null;

  unsetParts() {
    this.parts = null;
  }

  // indices
  IndexSpec? get indices => this._indices;

  set indices(IndexSpec? indices) {
    this._indices = indices;
  }

  bool isSetIndices() => this.indices != null;

  unsetIndices() {
    this.indices = null;
  }

  // return_columns
  List<Int8List>? get return_columns => this._return_columns;

  set return_columns(List<Int8List>? return_columns) {
    this._return_columns = return_columns;
  }

  bool isSetReturn_columns() => this.return_columns != null;

  unsetReturn_columns() {
    this.return_columns = null;
  }

  // common
  RequestCommon? get common => this._common;

  set common(RequestCommon? common) {
    this._common = common;
  }

  bool isSetCommon() => this.common != null;

  unsetCommon() {
    this.common = null;
  }

  // limit
  int? get limit => this._limit;

  set limit(int? limit) {
    this._limit = limit;
    this.__isset_limit = true;
  }

  bool isSetLimit() => this.__isset_limit;

  unsetLimit() {
    this.__isset_limit = false;
  }

  // order_by
  List<OrderBy>? get order_by => this._order_by;

  set order_by(List<OrderBy>? order_by) {
    this._order_by = order_by;
  }

  bool isSetOrder_by() => this.order_by != null;

  unsetOrder_by() {
    this.order_by = null;
  }

  // stat_columns
  List<StatProp>? get stat_columns => this._stat_columns;

  set stat_columns(List<StatProp>? stat_columns) {
    this._stat_columns = stat_columns;
  }

  bool isSetStat_columns() => this.stat_columns != null;

  unsetStat_columns() {
    this.stat_columns = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return this.space_id;
      case PARTS:
        return this.parts;
      case INDICES:
        return this.indices;
      case RETURN_COLUMNS:
        return this.return_columns;
      case COMMON:
        return this.common;
      case LIMIT:
        return this.limit;
      case ORDER_BY:
        return this.order_by;
      case STAT_COLUMNS:
        return this.stat_columns;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          this.space_id = value as int;
        }
        break;

      case PARTS:
        if (value == null) {
          unsetParts();
        } else {
          this.parts = value as List<int>;
        }
        break;

      case INDICES:
        if (value == null) {
          unsetIndices();
        } else {
          this.indices = value as IndexSpec;
        }
        break;

      case RETURN_COLUMNS:
        if (value == null) {
          unsetReturn_columns();
        } else {
          this.return_columns = value as List<Int8List>;
        }
        break;

      case COMMON:
        if (value == null) {
          unsetCommon();
        } else {
          this.common = value as RequestCommon;
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          this.limit = value as int;
        }
        break;

      case ORDER_BY:
        if (value == null) {
          unsetOrder_by();
        } else {
          this.order_by = value as List<OrderBy>;
        }
        break;

      case STAT_COLUMNS:
        if (value == null) {
          unsetStat_columns();
        } else {
          this.stat_columns = value as List<StatProp>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return isSetSpace_id();
      case PARTS:
        return isSetParts();
      case INDICES:
        return isSetIndices();
      case RETURN_COLUMNS:
        return isSetReturn_columns();
      case COMMON:
        return isSetCommon();
      case LIMIT:
        return isSetLimit();
      case ORDER_BY:
        return isSetOrder_by();
      case STAT_COLUMNS:
        return isSetStat_columns();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            this.__isset_space_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARTS:
          if (field.type == TType.LIST) {
            {
              TList _list200 = iprot.readListBegin();
              this.parts = <int>[];
              for (int _i201 = 0; _i201 < _list200.length; ++_i201) {
                int _elem202;
                _elem202 = iprot.readI32();
                this.parts?.add(_elem202);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INDICES:
          if (field.type == TType.STRUCT) {
            this.indices = new IndexSpec();
            this.indices?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RETURN_COLUMNS:
          if (field.type == TType.LIST) {
            {
              TList _list203 = iprot.readListBegin();
              this.return_columns = <Int8List>[];
              for (int _i204 = 0; _i204 < _list203.length; ++_i204) {
                Int8List _elem205;
                _elem205 = iprot.readBinary();
                this.return_columns?.add(_elem205);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMON:
          if (field.type == TType.STRUCT) {
            this.common = new RequestCommon();
            this.common?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIMIT:
          if (field.type == TType.I64) {
            this.limit = iprot.readI64();
            this.__isset_limit = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ORDER_BY:
          if (field.type == TType.LIST) {
            {
              TList _list206 = iprot.readListBegin();
              this.order_by = <OrderBy>[];
              for (int _i207 = 0; _i207 < _list206.length; ++_i207) {
                OrderBy _elem208;
                _elem208 = new OrderBy();
                _elem208.read(iprot);
                this.order_by?.add(_elem208);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STAT_COLUMNS:
          if (field.type == TType.LIST) {
            {
              TList _list209 = iprot.readListBegin();
              this.stat_columns = <StatProp>[];
              for (int _i210 = 0; _i210 < _list209.length; ++_i210) {
                StatProp _elem211;
                _elem211 = new StatProp();
                _elem211.read(iprot);
                this.stat_columns?.add(_elem211);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!__isset_space_id) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'space_id' was not found in serialized data! Struct: ${toString()}");
    }

    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    if (this.parts != null) {
      oprot.writeFieldBegin(_PARTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.parts?.length));
        for (var elem212 in this.parts ?? []) {
          oprot.writeI32(elem212);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.indices != null) {
      oprot.writeFieldBegin(_INDICES_FIELD_DESC);
      this.indices?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetReturn_columns()) {
      if (this.return_columns != null) {
        oprot.writeFieldBegin(_RETURN_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(
              new TList(TType.STRING, this.return_columns?.length));
          for (var elem213 in this.return_columns ?? []) {
            oprot.writeBinary(elem213);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetCommon()) {
      if (this.common != null) {
        oprot.writeFieldBegin(_COMMON_FIELD_DESC);
        this.common?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetLimit()) {
      oprot.writeFieldBegin(_LIMIT_FIELD_DESC);
      oprot.writeI64(this.limit);
      oprot.writeFieldEnd();
    }
    if (isSetOrder_by()) {
      if (this.order_by != null) {
        oprot.writeFieldBegin(_ORDER_BY_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.order_by?.length));
          for (var elem214 in this.order_by ?? []) {
            elem214.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetStat_columns()) {
      if (this.stat_columns != null) {
        oprot.writeFieldBegin(_STAT_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(
              new TList(TType.STRUCT, this.stat_columns?.length));
          for (var elem215 in this.stat_columns ?? []) {
            elem215.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("LookupIndexRequest(");

    ret.write("space_id:");
    ret.write(this.space_id);

    ret.write(", ");
    ret.write("parts:");
    if (this.parts == null) {
      ret.write("null");
    } else {
      ret.write(this.parts);
    }

    ret.write(", ");
    ret.write("indices:");
    if (this.indices == null) {
      ret.write("null");
    } else {
      ret.write(this.indices);
    }

    if (isSetReturn_columns()) {
      ret.write(", ");
      ret.write("return_columns:");
      if (this.return_columns == null) {
        ret.write("null");
      } else {
        ret.write(this.return_columns);
      }
    }

    if (isSetCommon()) {
      ret.write(", ");
      ret.write("common:");
      if (this.common == null) {
        ret.write("null");
      } else {
        ret.write(this.common);
      }
    }

    if (isSetLimit()) {
      ret.write(", ");
      ret.write("limit:");
      ret.write(this.limit);
    }

    if (isSetOrder_by()) {
      ret.write(", ");
      ret.write("order_by:");
      if (this.order_by == null) {
        ret.write("null");
      } else {
        ret.write(this.order_by);
      }
    }

    if (isSetStat_columns()) {
      ret.write(", ");
      ret.write("stat_columns:");
      if (this.stat_columns == null) {
        ret.write("null");
      } else {
        ret.write(this.stat_columns);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // alas, we cannot check 'space_id' because it's a primitive and you chose the non-beans generator.
    if (parts == null) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'parts' was not present! Struct: ${toString()}");
    }
    // check that fields of type enum have valid values
  }
}
