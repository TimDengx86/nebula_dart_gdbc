// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.stat_prop;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class StatProp implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("StatProp");
  static final TField _ALIAS_FIELD_DESC = new TField("alias", TType.STRING, 1);
  static final TField _PROP_FIELD_DESC = new TField("prop", TType.STRING, 2);
  static final TField _STAT_FIELD_DESC = new TField("stat", TType.I32, 3);

  Int8List? _alias;
  static const int ALIAS = 1;
  Int8List? _prop;
  static const int PROP = 2;
  int? _stat;
  static const int STAT = 3;

  bool __isset_stat = false;

  StatProp() {}

  // alias
  Int8List? get alias => this._alias;

  set alias(Int8List? alias) {
    this._alias = alias;
  }

  bool isSetAlias() => this.alias != null;

  unsetAlias() {
    this.alias = null;
  }

  // prop
  Int8List? get prop => this._prop;

  set prop(Int8List? prop) {
    this._prop = prop;
  }

  bool isSetProp() => this.prop != null;

  unsetProp() {
    this.prop = null;
  }

  // stat
  int? get stat => this._stat;

  set stat(int? stat) {
    this._stat = stat;
    this.__isset_stat = true;
  }

  bool isSetStat() => this.__isset_stat;

  unsetStat() {
    this.__isset_stat = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ALIAS:
        return this.alias;
      case PROP:
        return this.prop;
      case STAT:
        return this.stat;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case ALIAS:
        if (value == null) {
          unsetAlias();
        } else {
          this.alias = value as Int8List?;
        }
        break;

      case PROP:
        if (value == null) {
          unsetProp();
        } else {
          this.prop = value as Int8List?;
        }
        break;

      case STAT:
        if (value == null) {
          unsetStat();
        } else {
          this.stat = value as int?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ALIAS:
        return isSetAlias();
      case PROP:
        return isSetProp();
      case STAT:
        return isSetStat();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ALIAS:
          if (field.type == TType.STRING) {
            this.alias = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROP:
          if (field.type == TType.STRING) {
            this.prop = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STAT:
          if (field.type == TType.I32) {
            this.stat = iprot.readI32();
            this.__isset_stat = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.alias != null) {
      oprot.writeFieldBegin(_ALIAS_FIELD_DESC);
      oprot.writeBinary(this.alias);
      oprot.writeFieldEnd();
    }
    if (this.prop != null) {
      oprot.writeFieldBegin(_PROP_FIELD_DESC);
      oprot.writeBinary(this.prop);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_STAT_FIELD_DESC);
    oprot.writeI32(this.stat);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("StatProp(");

    ret.write("alias:");
    if (this.alias == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("prop:");
    if (this.prop == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("stat:");
    String? stat_name = StatType.VALUES_TO_NAMES[this.stat];
    if (stat_name != null) {
      ret.write(stat_name);
      ret.write(" (");
    }
    ret.write(this.stat);
    if (stat_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStat() && !StatType.VALID_VALUES.contains(stat)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'stat' has been assigned the invalid value $stat");
    }
  }
}
