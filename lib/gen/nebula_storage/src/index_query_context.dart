// ignore_for_file: unnecessary_this, unnecessary_new, non_constant_identifier_names, annotate_overrides, no_leading_underscores_for_local_identifiers, constant_identifier_names, unused_import, import_of_legacy_library_into_null_safe, slash_for_doc_comments, empty_constructor_bodies

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.index_query_context;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class IndexQueryContext implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("IndexQueryContext");
  static final TField _INDEX_ID_FIELD_DESC =
      new TField("index_id", TType.I32, 1);
  static final TField _FILTER_FIELD_DESC =
      new TField("filter", TType.STRING, 2);
  static final TField _COLUMN_HINTS_FIELD_DESC =
      new TField("column_hints", TType.LIST, 3);

  int _index_id = 0;
  static const int INDEX_ID = 1;
  Int8List? _filter;
  static const int FILTER = 2;
  List<IndexColumnHint>? _column_hints;
  static const int COLUMN_HINTS = 3;

  bool __isset_index_id = false;

  IndexQueryContext() {}

  // index_id
  int get index_id => this._index_id;

  set index_id(int index_id) {
    this._index_id = index_id;
    this.__isset_index_id = true;
  }

  bool isSetIndex_id() => this.__isset_index_id;

  unsetIndex_id() {
    this.__isset_index_id = false;
  }

  // filter
  Int8List? get filter => this._filter;

  set filter(Int8List? filter) {
    this._filter = filter;
  }

  bool isSetFilter() => this.filter != null;

  unsetFilter() {
    this.filter = null;
  }

  // column_hints
  List<IndexColumnHint>? get column_hints => this._column_hints;

  set column_hints(List<IndexColumnHint>? column_hints) {
    this._column_hints = column_hints;
  }

  bool isSetColumn_hints() => this.column_hints != null;

  unsetColumn_hints() {
    this.column_hints = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case INDEX_ID:
        return this.index_id;
      case FILTER:
        return this.filter;
      case COLUMN_HINTS:
        return this.column_hints;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case INDEX_ID:
        if (value == null) {
          unsetIndex_id();
        } else {
          this.index_id = value as int;
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          this.filter = value as Int8List?;
        }
        break;

      case COLUMN_HINTS:
        if (value == null) {
          unsetColumn_hints();
        } else {
          this.column_hints = value as List<IndexColumnHint>?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case INDEX_ID:
        return isSetIndex_id();
      case FILTER:
        return isSetFilter();
      case COLUMN_HINTS:
        return isSetColumn_hints();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case INDEX_ID:
          if (field.type == TType.I32) {
            this.index_id = iprot.readI32();
            this.__isset_index_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FILTER:
          if (field.type == TType.STRING) {
            this.filter = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COLUMN_HINTS:
          if (field.type == TType.LIST) {
            {
              TList _list192 = iprot.readListBegin();
              this.column_hints = <IndexColumnHint>[];
              for (int _i193 = 0; _i193 < _list192.length; ++_i193) {
                IndexColumnHint _elem194;
                _elem194 = new IndexColumnHint();
                _elem194.read(iprot);
                this.column_hints?.add(_elem194);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_INDEX_ID_FIELD_DESC);
    oprot.writeI32(this.index_id);
    oprot.writeFieldEnd();
    if (this.filter != null) {
      oprot.writeFieldBegin(_FILTER_FIELD_DESC);
      oprot.writeBinary(this.filter);
      oprot.writeFieldEnd();
    }
    if (this.column_hints != null) {
      oprot.writeFieldBegin(_COLUMN_HINTS_FIELD_DESC);
      {
        oprot
            .writeListBegin(new TList(TType.STRUCT, this.column_hints?.length));
        for (var elem195 in this.column_hints ?? []) {
          elem195.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("IndexQueryContext(");

    ret.write("index_id:");
    ret.write(this.index_id);

    ret.write(", ");
    ret.write("filter:");
    if (this.filter == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("column_hints:");
    if (this.column_hints == null) {
      ret.write("null");
    } else {
      ret.write(this.column_hints);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
