// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.get_prop_request;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class GetPropRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("GetPropRequest");
  static final TField _SPACE_ID_FIELD_DESC =
      new TField("space_id", TType.I32, 1);
  static final TField _PARTS_FIELD_DESC = new TField("parts", TType.MAP, 2);
  static final TField _VERTEX_PROPS_FIELD_DESC =
      new TField("vertex_props", TType.LIST, 3);
  static final TField _EDGE_PROPS_FIELD_DESC =
      new TField("edge_props", TType.LIST, 4);
  static final TField _EXPRESSIONS_FIELD_DESC =
      new TField("expressions", TType.LIST, 5);
  static final TField _DEDUP_FIELD_DESC = new TField("dedup", TType.BOOL, 6);
  static final TField _ORDER_BY_FIELD_DESC =
      new TField("order_by", TType.LIST, 7);
  static final TField _LIMIT_FIELD_DESC = new TField("limit", TType.I64, 8);
  static final TField _FILTER_FIELD_DESC =
      new TField("filter", TType.STRING, 9);
  static final TField _COMMON_FIELD_DESC =
      new TField("common", TType.STRUCT, 10);

  int _space_id = 0;
  static const int SPACE_ID = 1;
  Map<int, List<t_nebula.Row>>? _parts;
  static const int PARTS = 2;
  List<VertexProp>? _vertex_props;
  static const int VERTEX_PROPS = 3;
  List<EdgeProp>? _edge_props;
  static const int EDGE_PROPS = 4;
  List<Expr>? _expressions;
  static const int EXPRESSIONS = 5;
  bool _dedup = false;
  static const int DEDUP = 6;
  List<OrderBy>? _order_by;
  static const int ORDER_BY = 7;
  int? _limit;
  static const int LIMIT = 8;
  Int8List? _filter;
  static const int FILTER = 9;
  RequestCommon? _common;
  static const int COMMON = 10;

  bool __isset_space_id = false;
  bool __isset_dedup = false;
  bool __isset_limit = false;

  GetPropRequest() {
    this.dedup = false;
  }

  // space_id
  int get space_id => this._space_id;

  set space_id(int space_id) {
    this._space_id = space_id;
    this.__isset_space_id = true;
  }

  bool isSetSpace_id() => this.__isset_space_id;

  unsetSpace_id() {
    this.__isset_space_id = false;
  }

  // parts
  Map<int, List<t_nebula.Row>>? get parts => this._parts;

  set parts(Map<int, List<t_nebula.Row>>? parts) {
    this._parts = parts;
  }

  bool isSetParts() => this.parts != null;

  unsetParts() {
    this.parts = null;
  }

  // vertex_props
  List<VertexProp>? get vertex_props => this._vertex_props;

  set vertex_props(List<VertexProp>? vertex_props) {
    this._vertex_props = vertex_props;
  }

  bool isSetVertex_props() => this.vertex_props != null;

  unsetVertex_props() {
    this.vertex_props = null;
  }

  // edge_props
  List<EdgeProp>? get edge_props => this._edge_props;

  set edge_props(List<EdgeProp>? edge_props) {
    this._edge_props = edge_props;
  }

  bool isSetEdge_props() => this.edge_props != null;

  unsetEdge_props() {
    this.edge_props = null;
  }

  // expressions
  List<Expr>? get expressions => this._expressions;

  set expressions(List<Expr>? expressions) {
    this._expressions = expressions;
  }

  bool isSetExpressions() => this.expressions != null;

  unsetExpressions() {
    this.expressions = null;
  }

  // dedup
  bool get dedup => this._dedup;

  set dedup(bool dedup) {
    this._dedup = dedup;
    this.__isset_dedup = true;
  }

  bool isSetDedup() => this.__isset_dedup;

  unsetDedup() {
    this.__isset_dedup = false;
  }

  // order_by
  List<OrderBy>? get order_by => this._order_by;

  set order_by(List<OrderBy>? order_by) {
    this._order_by = order_by;
  }

  bool isSetOrder_by() => this.order_by != null;

  unsetOrder_by() {
    this.order_by = null;
  }

  // limit
  int? get limit => this._limit;

  set limit(int? limit) {
    this._limit = limit;
    this.__isset_limit = true;
  }

  bool isSetLimit() => this.__isset_limit;

  unsetLimit() {
    this.__isset_limit = false;
  }

  // filter
  Int8List? get filter => this._filter;

  set filter(Int8List? filter) {
    this._filter = filter;
  }

  bool isSetFilter() => this.filter != null;

  unsetFilter() {
    this.filter = null;
  }

  // common
  RequestCommon? get common => this._common;

  set common(RequestCommon? common) {
    this._common = common;
  }

  bool isSetCommon() => this.common != null;

  unsetCommon() {
    this.common = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return this.space_id;
      case PARTS:
        return this.parts;
      case VERTEX_PROPS:
        return this.vertex_props;
      case EDGE_PROPS:
        return this.edge_props;
      case EXPRESSIONS:
        return this.expressions;
      case DEDUP:
        return this.dedup;
      case ORDER_BY:
        return this.order_by;
      case LIMIT:
        return this.limit;
      case FILTER:
        return this.filter;
      case COMMON:
        return this.common;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          this.space_id = value as int;
        }
        break;

      case PARTS:
        if (value == null) {
          unsetParts();
        } else {
          this.parts = value as Map<int, List<t_nebula.Row>>?;
        }
        break;

      case VERTEX_PROPS:
        if (value == null) {
          unsetVertex_props();
        } else {
          this.vertex_props = value as List<VertexProp>?;
        }
        break;

      case EDGE_PROPS:
        if (value == null) {
          unsetEdge_props();
        } else {
          this.edge_props = value as List<EdgeProp>?;
        }
        break;

      case EXPRESSIONS:
        if (value == null) {
          unsetExpressions();
        } else {
          this.expressions = value as List<Expr>?;
        }
        break;

      case DEDUP:
        if (value == null) {
          unsetDedup();
        } else {
          this.dedup = value as bool;
        }
        break;

      case ORDER_BY:
        if (value == null) {
          unsetOrder_by();
        } else {
          this.order_by = value as List<OrderBy>?;
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          this.limit = value as int?;
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          this.filter = value as Int8List?;
        }
        break;

      case COMMON:
        if (value == null) {
          unsetCommon();
        } else {
          this.common = value as RequestCommon?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return isSetSpace_id();
      case PARTS:
        return isSetParts();
      case VERTEX_PROPS:
        return isSetVertex_props();
      case EDGE_PROPS:
        return isSetEdge_props();
      case EXPRESSIONS:
        return isSetExpressions();
      case DEDUP:
        return isSetDedup();
      case ORDER_BY:
        return isSetOrder_by();
      case LIMIT:
        return isSetLimit();
      case FILTER:
        return isSetFilter();
      case COMMON:
        return isSetCommon();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            this.__isset_space_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARTS:
          if (field.type == TType.MAP) {
            {
              TMap _map70 = iprot.readMapBegin();
              this.parts = new Map<int, List<t_nebula.Row>>();
              for (int _i71 = 0; _i71 < _map70.length; ++_i71) {
                int _key72;
                List<t_nebula.Row> _val73;
                _key72 = iprot.readI32();
                {
                  TList _list74 = iprot.readListBegin();
                  _val73 = <t_nebula.Row>[];
                  for (int _i75 = 0; _i75 < _list74.length; ++_i75) {
                    t_nebula.Row _elem76;
                    _elem76 = new t_nebula.Row();
                    _elem76.read(iprot);
                    _val73.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                this.parts?[_key72] = _val73;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERTEX_PROPS:
          if (field.type == TType.LIST) {
            {
              TList _list77 = iprot.readListBegin();
              this.vertex_props = <VertexProp>[];
              for (int _i78 = 0; _i78 < _list77.length; ++_i78) {
                VertexProp _elem79;
                _elem79 = new VertexProp();
                _elem79.read(iprot);
                this.vertex_props?.add(_elem79);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDGE_PROPS:
          if (field.type == TType.LIST) {
            {
              TList _list80 = iprot.readListBegin();
              this.edge_props = <EdgeProp>[];
              for (int _i81 = 0; _i81 < _list80.length; ++_i81) {
                EdgeProp _elem82;
                _elem82 = new EdgeProp();
                _elem82.read(iprot);
                this.edge_props?.add(_elem82);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXPRESSIONS:
          if (field.type == TType.LIST) {
            {
              TList _list83 = iprot.readListBegin();
              this.expressions = <Expr>[];
              for (int _i84 = 0; _i84 < _list83.length; ++_i84) {
                Expr _elem85;
                _elem85 = new Expr();
                _elem85.read(iprot);
                this.expressions?.add(_elem85);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEDUP:
          if (field.type == TType.BOOL) {
            this.dedup = iprot.readBool();
            this.__isset_dedup = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ORDER_BY:
          if (field.type == TType.LIST) {
            {
              TList _list86 = iprot.readListBegin();
              this.order_by = <OrderBy>[];
              for (int _i87 = 0; _i87 < _list86.length; ++_i87) {
                OrderBy _elem88;
                _elem88 = new OrderBy();
                _elem88.read(iprot);
                this.order_by?.add(_elem88);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIMIT:
          if (field.type == TType.I64) {
            this.limit = iprot.readI64();
            this.__isset_limit = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FILTER:
          if (field.type == TType.STRING) {
            this.filter = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMON:
          if (field.type == TType.STRUCT) {
            this.common = new RequestCommon();
            this.common?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    if (this.parts != null) {
      oprot.writeFieldBegin(_PARTS_FIELD_DESC);
      {
        oprot
            .writeMapBegin(new TMap(TType.I32, TType.LIST, this.parts?.length));
        for (var elem90 in this.parts?.keys ?? <int>[]) {
          oprot.writeI32(elem90);
          {
            oprot.writeListBegin(
                new TList(TType.STRUCT, this.parts?[elem90]?.length));
            for (var elem91 in this.parts?[elem90] ?? <t_nebula.Row>[]) {
              elem91.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (isSetVertex_props()) {
      if (this.vertex_props != null) {
        oprot.writeFieldBegin(_VERTEX_PROPS_FIELD_DESC);
        {
          oprot.writeListBegin(
              new TList(TType.STRUCT, this.vertex_props?.length));
          for (var elem92 in this.vertex_props ?? <VertexProp>[]) {
            elem92.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetEdge_props()) {
      if (this.edge_props != null) {
        oprot.writeFieldBegin(_EDGE_PROPS_FIELD_DESC);
        {
          oprot
              .writeListBegin(new TList(TType.STRUCT, this.edge_props?.length));
          for (var elem93 in this.edge_props ?? <EdgeProp>[]) {
            elem93.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetExpressions()) {
      if (this.expressions != null) {
        oprot.writeFieldBegin(_EXPRESSIONS_FIELD_DESC);
        {
          oprot.writeListBegin(
              new TList(TType.STRUCT, this.expressions?.length));
          for (var elem94 in this.expressions ?? <Expr>[]) {
            elem94.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(_DEDUP_FIELD_DESC);
    oprot.writeBool(this.dedup);
    oprot.writeFieldEnd();
    if (isSetOrder_by()) {
      if (this.order_by != null) {
        oprot.writeFieldBegin(_ORDER_BY_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.order_by?.length));
          for (var elem95 in this.order_by ?? <OrderBy>[]) {
            elem95.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetLimit()) {
      oprot.writeFieldBegin(_LIMIT_FIELD_DESC);
      oprot.writeI64(this.limit);
      oprot.writeFieldEnd();
    }
    if (isSetFilter()) {
      if (this.filter != null) {
        oprot.writeFieldBegin(_FILTER_FIELD_DESC);
        oprot.writeBinary(this.filter);
        oprot.writeFieldEnd();
      }
    }
    if (isSetCommon()) {
      if (this.common != null) {
        oprot.writeFieldBegin(_COMMON_FIELD_DESC);
        this.common?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("GetPropRequest(");

    ret.write("space_id:");
    ret.write(this.space_id);

    ret.write(", ");
    ret.write("parts:");
    if (this.parts == null) {
      ret.write("null");
    } else {
      ret.write(this.parts);
    }

    if (isSetVertex_props()) {
      ret.write(", ");
      ret.write("vertex_props:");
      if (this.vertex_props == null) {
        ret.write("null");
      } else {
        ret.write(this.vertex_props);
      }
    }

    if (isSetEdge_props()) {
      ret.write(", ");
      ret.write("edge_props:");
      if (this.edge_props == null) {
        ret.write("null");
      } else {
        ret.write(this.edge_props);
      }
    }

    if (isSetExpressions()) {
      ret.write(", ");
      ret.write("expressions:");
      if (this.expressions == null) {
        ret.write("null");
      } else {
        ret.write(this.expressions);
      }
    }

    ret.write(", ");
    ret.write("dedup:");
    ret.write(this.dedup);

    if (isSetOrder_by()) {
      ret.write(", ");
      ret.write("order_by:");
      if (this.order_by == null) {
        ret.write("null");
      } else {
        ret.write(this.order_by);
      }
    }

    if (isSetLimit()) {
      ret.write(", ");
      ret.write("limit:");
      ret.write(this.limit);
    }

    if (isSetFilter()) {
      ret.write(", ");
      ret.write("filter:");
      if (this.filter == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetCommon()) {
      ret.write(", ");
      ret.write("common:");
      if (this.common == null) {
        ret.write("null");
      } else {
        ret.write(this.common);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
