// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.task_para;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class TaskPara implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TaskPara");
  static final TField _SPACE_ID_FIELD_DESC =
      new TField("space_id", TType.I32, 1);
  static final TField _PARTS_FIELD_DESC = new TField("parts", TType.LIST, 2);
  static final TField _TASK_SPECIFIC_PARAS_FIELD_DESC =
      new TField("task_specific_paras", TType.LIST, 3);

  int _space_id = 0;
  static const int SPACE_ID = 1;
  List<int>? _parts;
  static const int PARTS = 2;
  List<Int8List>? _task_specific_paras;
  static const int TASK_SPECIFIC_PARAS = 3;

  bool __isset_space_id = false;

  TaskPara() {}

  // space_id
  int get space_id => this._space_id;

  set space_id(int space_id) {
    this._space_id = space_id;
    this.__isset_space_id = true;
  }

  bool isSetSpace_id() => this.__isset_space_id;

  unsetSpace_id() {
    this.__isset_space_id = false;
  }

  // parts
  List<int>? get parts => this._parts;

  set parts(List<int>? parts) {
    this._parts = parts;
  }

  bool isSetParts() => this.parts != null;

  unsetParts() {
    this.parts = null;
  }

  // task_specific_paras
  List<Int8List>? get task_specific_paras => this._task_specific_paras;

  set task_specific_paras(List<Int8List>? task_specific_paras) {
    this._task_specific_paras = task_specific_paras;
  }

  bool isSetTask_specific_paras() => this.task_specific_paras != null;

  unsetTask_specific_paras() {
    this.task_specific_paras = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return this.space_id;
      case PARTS:
        return this.parts;
      case TASK_SPECIFIC_PARAS:
        return this.task_specific_paras;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          this.space_id = value as int;
        }
        break;

      case PARTS:
        if (value == null) {
          unsetParts();
        } else {
          this.parts = value as List<int>;
        }
        break;

      case TASK_SPECIFIC_PARAS:
        if (value == null) {
          unsetTask_specific_paras();
        } else {
          this.task_specific_paras = value as List<Int8List>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return isSetSpace_id();
      case PARTS:
        return isSetParts();
      case TASK_SPECIFIC_PARAS:
        return isSetTask_specific_paras();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            this.__isset_space_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARTS:
          if (field.type == TType.LIST) {
            {
              TList _list246 = iprot.readListBegin();
              this.parts = <int>[];
              for (int _i247 = 0; _i247 < _list246.length; ++_i247) {
                int _elem248;
                _elem248 = iprot.readI32();
                this.parts?.add(_elem248);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TASK_SPECIFIC_PARAS:
          if (field.type == TType.LIST) {
            {
              TList _list249 = iprot.readListBegin();
              this.task_specific_paras = <Int8List>[];
              for (int _i250 = 0; _i250 < _list249.length; ++_i250) {
                Int8List _elem251;
                _elem251 = iprot.readBinary();
                this.task_specific_paras?.add(_elem251);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    if (isSetParts()) {
      if (this.parts != null) {
        oprot.writeFieldBegin(_PARTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.parts?.length));
          for (var elem252 in this.parts ?? []) {
            oprot.writeI32(elem252);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetTask_specific_paras()) {
      if (this.task_specific_paras != null) {
        oprot.writeFieldBegin(_TASK_SPECIFIC_PARAS_FIELD_DESC);
        {
          oprot.writeListBegin(
              new TList(TType.STRING, this.task_specific_paras?.length));
          for (var elem253 in this.task_specific_paras ?? []) {
            oprot.writeBinary(elem253);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TaskPara(");

    ret.write("space_id:");
    ret.write(this.space_id);

    if (isSetParts()) {
      ret.write(", ");
      ret.write("parts:");
      if (this.parts == null) {
        ret.write("null");
      } else {
        ret.write(this.parts);
      }
    }

    if (isSetTask_specific_paras()) {
      ret.write(", ");
      ret.write("task_specific_paras:");
      if (this.task_specific_paras == null) {
        ret.write("null");
      } else {
        ret.write(this.task_specific_paras);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
