// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.request_common;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class RequestCommon implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("RequestCommon");
  static final TField _SESSION_ID_FIELD_DESC =
      new TField("session_id", TType.I64, 1);
  static final TField _PLAN_ID_FIELD_DESC = new TField("plan_id", TType.I64, 2);
  static final TField _PROFILE_DETAIL_FIELD_DESC =
      new TField("profile_detail", TType.BOOL, 3);

  int? _session_id;
  static const int SESSION_ID = 1;
  int? _plan_id;
  static const int PLAN_ID = 2;
  bool? _profile_detail;
  static const int PROFILE_DETAIL = 3;

  bool __isset_session_id = false;
  bool __isset_plan_id = false;
  bool __isset_profile_detail = false;

  RequestCommon() {}

  // session_id
  int? get session_id => this._session_id;

  set session_id(int? session_id) {
    this._session_id = session_id;
    this.__isset_session_id = true;
  }

  bool isSetSession_id() => this.__isset_session_id;

  unsetSession_id() {
    this.__isset_session_id = false;
  }

  // plan_id
  int? get plan_id => this._plan_id;

  set plan_id(int? plan_id) {
    this._plan_id = plan_id;
    this.__isset_plan_id = true;
  }

  bool isSetPlan_id() => this.__isset_plan_id;

  unsetPlan_id() {
    this.__isset_plan_id = false;
  }

  // profile_detail
  bool? get profile_detail => this._profile_detail;

  set profile_detail(bool? profile_detail) {
    this._profile_detail = profile_detail;
    this.__isset_profile_detail = true;
  }

  bool isSetProfile_detail() => this.__isset_profile_detail;

  unsetProfile_detail() {
    this.__isset_profile_detail = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SESSION_ID:
        return this.session_id;
      case PLAN_ID:
        return this.plan_id;
      case PROFILE_DETAIL:
        return this.profile_detail;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SESSION_ID:
        if (value == null) {
          unsetSession_id();
        } else {
          this.session_id = value as int?;
        }
        break;

      case PLAN_ID:
        if (value == null) {
          unsetPlan_id();
        } else {
          this.plan_id = value as int?;
        }
        break;

      case PROFILE_DETAIL:
        if (value == null) {
          unsetProfile_detail();
        } else {
          this.profile_detail = value as bool?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SESSION_ID:
        return isSetSession_id();
      case PLAN_ID:
        return isSetPlan_id();
      case PROFILE_DETAIL:
        return isSetProfile_detail();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SESSION_ID:
          if (field.type == TType.I64) {
            this.session_id = iprot.readI64();
            this.__isset_session_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PLAN_ID:
          if (field.type == TType.I64) {
            this.plan_id = iprot.readI64();
            this.__isset_plan_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROFILE_DETAIL:
          if (field.type == TType.BOOL) {
            this.profile_detail = iprot.readBool();
            this.__isset_profile_detail = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetSession_id()) {
      oprot.writeFieldBegin(_SESSION_ID_FIELD_DESC);
      oprot.writeI64(this.session_id);
      oprot.writeFieldEnd();
    }
    if (isSetPlan_id()) {
      oprot.writeFieldBegin(_PLAN_ID_FIELD_DESC);
      oprot.writeI64(this.plan_id);
      oprot.writeFieldEnd();
    }
    if (isSetProfile_detail()) {
      oprot.writeFieldBegin(_PROFILE_DETAIL_FIELD_DESC);
      oprot.writeBool(this.profile_detail);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("RequestCommon(");

    if (isSetSession_id()) {
      ret.write("session_id:");
      ret.write(this.session_id);
    }

    if (isSetPlan_id()) {
      ret.write(", ");
      ret.write("plan_id:");
      ret.write(this.plan_id);
    }

    if (isSetProfile_detail()) {
      ret.write(", ");
      ret.write("profile_detail:");
      ret.write(this.profile_detail);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
