// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.index_column_hint;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class IndexColumnHint implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("IndexColumnHint");
  static final TField _COLUMN_NAME_FIELD_DESC =
      new TField("column_name", TType.STRING, 1);
  static final TField _SCAN_TYPE_FIELD_DESC =
      new TField("scan_type", TType.I32, 2);
  static final TField _BEGIN_VALUE_FIELD_DESC =
      new TField("begin_value", TType.STRUCT, 3);
  static final TField _END_VALUE_FIELD_DESC =
      new TField("end_value", TType.STRUCT, 4);
  static final TField _INCLUDE_BEGIN_FIELD_DESC =
      new TField("include_begin", TType.BOOL, 5);
  static final TField _INCLUDE_END_FIELD_DESC =
      new TField("include_end", TType.BOOL, 6);

  Int8List? _column_name;
  static const int COLUMN_NAME = 1;
  int? _scan_type;
  static const int SCAN_TYPE = 2;
  t_nebula.Value? _begin_value;
  static const int BEGIN_VALUE = 3;
  t_nebula.Value? _end_value;
  static const int END_VALUE = 4;
  bool _include_begin = false;
  static const int INCLUDE_BEGIN = 5;
  bool _include_end = false;
  static const int INCLUDE_END = 6;

  bool __isset_scan_type = false;
  bool __isset_include_begin = false;
  bool __isset_include_end = false;

  IndexColumnHint() {
    this.include_begin = true;

    this.include_end = false;
  }

  // column_name
  Int8List? get column_name => this._column_name;

  set column_name(Int8List? column_name) {
    this._column_name = column_name;
  }

  bool isSetColumn_name() => this.column_name != null;

  unsetColumn_name() {
    this.column_name = null;
  }

  // scan_type
  int? get scan_type => this._scan_type;

  set scan_type(int? scan_type) {
    this._scan_type = scan_type;
    this.__isset_scan_type = true;
  }

  bool isSetScan_type() => this.__isset_scan_type;

  unsetScan_type() {
    this.__isset_scan_type = false;
  }

  // begin_value
  t_nebula.Value? get begin_value => this._begin_value;

  set begin_value(t_nebula.Value? begin_value) {
    this._begin_value = begin_value;
  }

  bool isSetBegin_value() => this.begin_value != null;

  unsetBegin_value() {
    this.begin_value = null;
  }

  // end_value
  t_nebula.Value? get end_value => this._end_value;

  set end_value(t_nebula.Value? end_value) {
    this._end_value = end_value;
  }

  bool isSetEnd_value() => this.end_value != null;

  unsetEnd_value() {
    this.end_value = null;
  }

  // include_begin
  bool get include_begin => this._include_begin;

  set include_begin(bool include_begin) {
    this._include_begin = include_begin;
    this.__isset_include_begin = true;
  }

  bool isSetInclude_begin() => this.__isset_include_begin;

  unsetInclude_begin() {
    this.__isset_include_begin = false;
  }

  // include_end
  bool get include_end => this._include_end;

  set include_end(bool include_end) {
    this._include_end = include_end;
    this.__isset_include_end = true;
  }

  bool isSetInclude_end() => this.__isset_include_end;

  unsetInclude_end() {
    this.__isset_include_end = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COLUMN_NAME:
        return this.column_name;
      case SCAN_TYPE:
        return this.scan_type;
      case BEGIN_VALUE:
        return this.begin_value;
      case END_VALUE:
        return this.end_value;
      case INCLUDE_BEGIN:
        return this.include_begin;
      case INCLUDE_END:
        return this.include_end;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case COLUMN_NAME:
        if (value == null) {
          unsetColumn_name();
        } else {
          this.column_name = value as Int8List?;
        }
        break;

      case SCAN_TYPE:
        if (value == null) {
          unsetScan_type();
        } else {
          this.scan_type = value as int?;
        }
        break;

      case BEGIN_VALUE:
        if (value == null) {
          unsetBegin_value();
        } else {
          this.begin_value = value as t_nebula.Value?;
        }
        break;

      case END_VALUE:
        if (value == null) {
          unsetEnd_value();
        } else {
          this.end_value = value as t_nebula.Value?;
        }
        break;

      case INCLUDE_BEGIN:
        if (value == null) {
          unsetInclude_begin();
        } else {
          this.include_begin = value as bool;
        }
        break;

      case INCLUDE_END:
        if (value == null) {
          unsetInclude_end();
        } else {
          this.include_end = value as bool;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COLUMN_NAME:
        return isSetColumn_name();
      case SCAN_TYPE:
        return isSetScan_type();
      case BEGIN_VALUE:
        return isSetBegin_value();
      case END_VALUE:
        return isSetEnd_value();
      case INCLUDE_BEGIN:
        return isSetInclude_begin();
      case INCLUDE_END:
        return isSetInclude_end();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COLUMN_NAME:
          if (field.type == TType.STRING) {
            this.column_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCAN_TYPE:
          if (field.type == TType.I32) {
            this.scan_type = iprot.readI32();
            this.__isset_scan_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BEGIN_VALUE:
          if (field.type == TType.STRUCT) {
            this.begin_value = new t_nebula.Value();
            this.begin_value?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case END_VALUE:
          if (field.type == TType.STRUCT) {
            this.end_value = new t_nebula.Value();
            this.end_value?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INCLUDE_BEGIN:
          if (field.type == TType.BOOL) {
            this.include_begin = iprot.readBool();
            this.__isset_include_begin = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INCLUDE_END:
          if (field.type == TType.BOOL) {
            this.include_end = iprot.readBool();
            this.__isset_include_end = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.column_name != null) {
      oprot.writeFieldBegin(_COLUMN_NAME_FIELD_DESC);
      oprot.writeBinary(this.column_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_SCAN_TYPE_FIELD_DESC);
    oprot.writeI32(this.scan_type);
    oprot.writeFieldEnd();
    if (this.begin_value != null) {
      oprot.writeFieldBegin(_BEGIN_VALUE_FIELD_DESC);
      this.begin_value?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.end_value != null) {
      oprot.writeFieldBegin(_END_VALUE_FIELD_DESC);
      this.end_value?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_INCLUDE_BEGIN_FIELD_DESC);
    oprot.writeBool(this.include_begin);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_INCLUDE_END_FIELD_DESC);
    oprot.writeBool(this.include_end);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("IndexColumnHint(");

    ret.write("column_name:");
    if (this.column_name == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("scan_type:");
    String? scan_type_name = ScanType.VALUES_TO_NAMES[this.scan_type];
    if (scan_type_name != null) {
      ret.write(scan_type_name);
      ret.write(" (");
    }
    ret.write(this.scan_type);
    if (scan_type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("begin_value:");
    if (this.begin_value == null) {
      ret.write("null");
    } else {
      ret.write(this.begin_value);
    }

    ret.write(", ");
    ret.write("end_value:");
    if (this.end_value == null) {
      ret.write("null");
    } else {
      ret.write(this.end_value);
    }

    ret.write(", ");
    ret.write("include_begin:");
    ret.write(this.include_begin);

    ret.write(", ");
    ret.write("include_end:");
    ret.write(this.include_end);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetScan_type() && !ScanType.VALID_VALUES.contains(scan_type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'scan_type' has been assigned the invalid value $scan_type");
    }
  }
}
