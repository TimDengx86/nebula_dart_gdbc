// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.index_spec;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class IndexSpec implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("IndexSpec");
  static final TField _CONTEXTS_FIELD_DESC =
      new TField("contexts", TType.LIST, 1);
  static final TField _SCHEMA_ID_FIELD_DESC =
      new TField("schema_id", TType.STRUCT, 2);

  List<IndexQueryContext>? _contexts;
  static const int CONTEXTS = 1;
  t_nebula.SchemaID? _schema_id;
  static const int SCHEMA_ID = 2;

  IndexSpec() {}

  // contexts
  List<IndexQueryContext>? get contexts => this._contexts;

  set contexts(List<IndexQueryContext>? contexts) {
    this._contexts = contexts;
  }

  bool isSetContexts() => this.contexts != null;

  unsetContexts() {
    this.contexts = null;
  }

  // schema_id
  t_nebula.SchemaID? get schema_id => this._schema_id;

  set schema_id(t_nebula.SchemaID? schema_id) {
    this._schema_id = schema_id;
  }

  bool isSetSchema_id() => this.schema_id != null;

  unsetSchema_id() {
    this.schema_id = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CONTEXTS:
        return this.contexts;
      case SCHEMA_ID:
        return this.schema_id;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case CONTEXTS:
        if (value == null) {
          unsetContexts();
        } else {
          this.contexts = value as List<IndexQueryContext>;
        }
        break;

      case SCHEMA_ID:
        if (value == null) {
          unsetSchema_id();
        } else {
          this.schema_id = value as t_nebula.SchemaID;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CONTEXTS:
        return isSetContexts();
      case SCHEMA_ID:
        return isSetSchema_id();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CONTEXTS:
          if (field.type == TType.LIST) {
            {
              TList _list196 = iprot.readListBegin();
              this.contexts = <IndexQueryContext>[];
              for (int _i197 = 0; _i197 < _list196.length; ++_i197) {
                IndexQueryContext _elem198;
                _elem198 = new IndexQueryContext();
                _elem198.read(iprot);
                this.contexts?.add(_elem198);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCHEMA_ID:
          if (field.type == TType.STRUCT) {
            this.schema_id = new t_nebula.SchemaID();
            this.schema_id?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.contexts != null) {
      oprot.writeFieldBegin(_CONTEXTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.contexts?.length));
        for (var elem199 in this.contexts ?? []) {
          elem199.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.schema_id != null) {
      oprot.writeFieldBegin(_SCHEMA_ID_FIELD_DESC);
      this.schema_id?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("IndexSpec(");

    ret.write("contexts:");
    if (this.contexts == null) {
      ret.write("null");
    } else {
      ret.write(this.contexts);
    }

    ret.write(", ");
    ret.write("schema_id:");
    if (this.schema_id == null) {
      ret.write("null");
    } else {
      ret.write(this.schema_id);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    if (contexts == null) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'contexts' was not present! Struct: ${toString()}");
    }
    // check that fields of type enum have valid values
  }
}
