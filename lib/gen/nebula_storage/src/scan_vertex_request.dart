// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.scan_vertex_request;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class ScanVertexRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ScanVertexRequest");
  static final TField _SPACE_ID_FIELD_DESC =
      new TField("space_id", TType.I32, 1);
  static final TField _PARTS_FIELD_DESC = new TField("parts", TType.MAP, 2);
  static final TField _RETURN_COLUMNS_FIELD_DESC =
      new TField("return_columns", TType.LIST, 3);
  static final TField _LIMIT_FIELD_DESC = new TField("limit", TType.I64, 4);
  static final TField _START_TIME_FIELD_DESC =
      new TField("start_time", TType.I64, 5);
  static final TField _END_TIME_FIELD_DESC =
      new TField("end_time", TType.I64, 6);
  static final TField _FILTER_FIELD_DESC =
      new TField("filter", TType.STRING, 7);
  static final TField _ONLY_LATEST_VERSION_FIELD_DESC =
      new TField("only_latest_version", TType.BOOL, 8);
  static final TField _ENABLE_READ_FROM_FOLLOWER_FIELD_DESC =
      new TField("enable_read_from_follower", TType.BOOL, 9);
  static final TField _COMMON_FIELD_DESC =
      new TField("common", TType.STRUCT, 10);

  int _space_id = 0;
  static const int SPACE_ID = 1;
  Map<int, ScanCursor>? _parts;
  static const int PARTS = 2;
  List<VertexProp>? _return_columns;
  static const int RETURN_COLUMNS = 3;
  int _limit = 0;
  static const int LIMIT = 4;
  int? _start_time;
  static const int START_TIME = 5;
  int? _end_time;
  static const int END_TIME = 6;
  Int8List? _filter;
  static const int FILTER = 7;
  bool _only_latest_version = false;
  static const int ONLY_LATEST_VERSION = 8;
  bool _enable_read_from_follower = false;
  static const int ENABLE_READ_FROM_FOLLOWER = 9;
  RequestCommon? _common;
  static const int COMMON = 10;

  bool __isset_space_id = false;
  bool __isset_limit = false;
  bool __isset_start_time = false;
  bool __isset_end_time = false;
  bool __isset_only_latest_version = false;
  bool __isset_enable_read_from_follower = false;

  ScanVertexRequest() {
    this.only_latest_version = false;

    this.enable_read_from_follower = true;
  }

  // space_id
  int get space_id => this._space_id;

  set space_id(int space_id) {
    this._space_id = space_id;
    this.__isset_space_id = true;
  }

  bool isSetSpace_id() => this.__isset_space_id;

  unsetSpace_id() {
    this.__isset_space_id = false;
  }

  // parts
  Map<int, ScanCursor>? get parts => this._parts;

  set parts(Map<int, ScanCursor>? parts) {
    this._parts = parts;
  }

  bool isSetParts() => this.parts != null;

  unsetParts() {
    this.parts = null;
  }

  // return_columns
  List<VertexProp>? get return_columns => this._return_columns;

  set return_columns(List<VertexProp>? return_columns) {
    this._return_columns = return_columns;
  }

  bool isSetReturn_columns() => this.return_columns != null;

  unsetReturn_columns() {
    this.return_columns = null;
  }

  // limit
  int get limit => this._limit;

  set limit(int limit) {
    this._limit = limit;
    this.__isset_limit = true;
  }

  bool isSetLimit() => this.__isset_limit;

  unsetLimit() {
    this.__isset_limit = false;
  }

  // start_time
  int? get start_time => this._start_time;

  set start_time(int? start_time) {
    this._start_time = start_time;
    this.__isset_start_time = true;
  }

  bool isSetStart_time() => this.__isset_start_time;

  unsetStart_time() {
    this.__isset_start_time = false;
  }

  // end_time
  int? get end_time => this._end_time;

  set end_time(int? end_time) {
    this._end_time = end_time;
    this.__isset_end_time = true;
  }

  bool isSetEnd_time() => this.__isset_end_time;

  unsetEnd_time() {
    this.__isset_end_time = false;
  }

  // filter
  Int8List? get filter => this._filter;

  set filter(Int8List? filter) {
    this._filter = filter;
  }

  bool isSetFilter() => this.filter != null;

  unsetFilter() {
    this.filter = null;
  }

  // only_latest_version
  bool get only_latest_version => this._only_latest_version;

  set only_latest_version(bool only_latest_version) {
    this._only_latest_version = only_latest_version;
    this.__isset_only_latest_version = true;
  }

  bool isSetOnly_latest_version() => this.__isset_only_latest_version;

  unsetOnly_latest_version() {
    this.__isset_only_latest_version = false;
  }

  // enable_read_from_follower
  bool get enable_read_from_follower => this._enable_read_from_follower;

  set enable_read_from_follower(bool enable_read_from_follower) {
    this._enable_read_from_follower = enable_read_from_follower;
    this.__isset_enable_read_from_follower = true;
  }

  bool isSetEnable_read_from_follower() =>
      this.__isset_enable_read_from_follower;

  unsetEnable_read_from_follower() {
    this.__isset_enable_read_from_follower = false;
  }

  // common
  RequestCommon? get common => this._common;

  set common(RequestCommon? common) {
    this._common = common;
  }

  bool isSetCommon() => this.common != null;

  unsetCommon() {
    this.common = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return this.space_id;
      case PARTS:
        return this.parts;
      case RETURN_COLUMNS:
        return this.return_columns;
      case LIMIT:
        return this.limit;
      case START_TIME:
        return this.start_time;
      case END_TIME:
        return this.end_time;
      case FILTER:
        return this.filter;
      case ONLY_LATEST_VERSION:
        return this.only_latest_version;
      case ENABLE_READ_FROM_FOLLOWER:
        return this.enable_read_from_follower;
      case COMMON:
        return this.common;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          this.space_id = value as int;
        }
        break;

      case PARTS:
        if (value == null) {
          unsetParts();
        } else {
          this.parts = value as Map<int, ScanCursor>;
        }
        break;

      case RETURN_COLUMNS:
        if (value == null) {
          unsetReturn_columns();
        } else {
          this.return_columns = value as List<VertexProp>;
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          this.limit = value as int;
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStart_time();
        } else {
          this.start_time = value as int;
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEnd_time();
        } else {
          this.end_time = value as int;
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          this.filter = value as Int8List;
        }
        break;

      case ONLY_LATEST_VERSION:
        if (value == null) {
          unsetOnly_latest_version();
        } else {
          this.only_latest_version = value as bool;
        }
        break;

      case ENABLE_READ_FROM_FOLLOWER:
        if (value == null) {
          unsetEnable_read_from_follower();
        } else {
          this.enable_read_from_follower = value as bool;
        }
        break;

      case COMMON:
        if (value == null) {
          unsetCommon();
        } else {
          this.common = value as RequestCommon;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return isSetSpace_id();
      case PARTS:
        return isSetParts();
      case RETURN_COLUMNS:
        return isSetReturn_columns();
      case LIMIT:
        return isSetLimit();
      case START_TIME:
        return isSetStart_time();
      case END_TIME:
        return isSetEnd_time();
      case FILTER:
        return isSetFilter();
      case ONLY_LATEST_VERSION:
        return isSetOnly_latest_version();
      case ENABLE_READ_FROM_FOLLOWER:
        return isSetEnable_read_from_follower();
      case COMMON:
        return isSetCommon();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            this.__isset_space_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARTS:
          if (field.type == TType.MAP) {
            {
              TMap _map220 = iprot.readMapBegin();
              this.parts = <int, ScanCursor>{};
              for (int _i221 = 0; _i221 < _map220.length; ++_i221) {
                int _key222;
                ScanCursor _val223;
                _key222 = iprot.readI32();
                _val223 = new ScanCursor();
                _val223.read(iprot);
                this.parts?[_key222] = _val223;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RETURN_COLUMNS:
          if (field.type == TType.LIST) {
            {
              TList _list224 = iprot.readListBegin();
              this.return_columns = <VertexProp>[];
              for (int _i225 = 0; _i225 < _list224.length; ++_i225) {
                VertexProp _elem226;
                _elem226 = new VertexProp();
                _elem226.read(iprot);
                this.return_columns?.add(_elem226);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIMIT:
          if (field.type == TType.I64) {
            this.limit = iprot.readI64();
            this.__isset_limit = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case START_TIME:
          if (field.type == TType.I64) {
            this.start_time = iprot.readI64();
            this.__isset_start_time = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case END_TIME:
          if (field.type == TType.I64) {
            this.end_time = iprot.readI64();
            this.__isset_end_time = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FILTER:
          if (field.type == TType.STRING) {
            this.filter = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONLY_LATEST_VERSION:
          if (field.type == TType.BOOL) {
            this.only_latest_version = iprot.readBool();
            this.__isset_only_latest_version = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENABLE_READ_FROM_FOLLOWER:
          if (field.type == TType.BOOL) {
            this.enable_read_from_follower = iprot.readBool();
            this.__isset_enable_read_from_follower = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMON:
          if (field.type == TType.STRUCT) {
            this.common = new RequestCommon();
            this.common?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    if (this.parts != null) {
      oprot.writeFieldBegin(_PARTS_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.I32, TType.STRUCT, this.parts?.length));
        for (var elem228 in this.parts?.keys ?? <int>[]) {
          oprot.writeI32(elem228);
          this.parts?[elem228]?.write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.return_columns != null) {
      oprot.writeFieldBegin(_RETURN_COLUMNS_FIELD_DESC);
      {
        oprot.writeListBegin(
            new TList(TType.STRUCT, this.return_columns?.length));
        for (var elem229 in this.return_columns ?? <VertexProp>[]) {
          elem229.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_LIMIT_FIELD_DESC);
    oprot.writeI64(this.limit);
    oprot.writeFieldEnd();
    if (isSetStart_time()) {
      oprot.writeFieldBegin(_START_TIME_FIELD_DESC);
      oprot.writeI64(this.start_time);
      oprot.writeFieldEnd();
    }
    if (isSetEnd_time()) {
      oprot.writeFieldBegin(_END_TIME_FIELD_DESC);
      oprot.writeI64(this.end_time);
      oprot.writeFieldEnd();
    }
    if (isSetFilter()) {
      if (this.filter != null) {
        oprot.writeFieldBegin(_FILTER_FIELD_DESC);
        oprot.writeBinary(this.filter);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(_ONLY_LATEST_VERSION_FIELD_DESC);
    oprot.writeBool(this.only_latest_version);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ENABLE_READ_FROM_FOLLOWER_FIELD_DESC);
    oprot.writeBool(this.enable_read_from_follower);
    oprot.writeFieldEnd();
    if (isSetCommon()) {
      if (this.common != null) {
        oprot.writeFieldBegin(_COMMON_FIELD_DESC);
        this.common?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ScanVertexRequest(");

    ret.write("space_id:");
    ret.write(this.space_id);

    ret.write(", ");
    ret.write("parts:");
    if (this.parts == null) {
      ret.write("null");
    } else {
      ret.write(this.parts);
    }

    ret.write(", ");
    ret.write("return_columns:");
    if (this.return_columns == null) {
      ret.write("null");
    } else {
      ret.write(this.return_columns);
    }

    ret.write(", ");
    ret.write("limit:");
    ret.write(this.limit);

    if (isSetStart_time()) {
      ret.write(", ");
      ret.write("start_time:");
      ret.write(this.start_time);
    }

    if (isSetEnd_time()) {
      ret.write(", ");
      ret.write("end_time:");
      ret.write(this.end_time);
    }

    if (isSetFilter()) {
      ret.write(", ");
      ret.write("filter:");
      if (this.filter == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    ret.write(", ");
    ret.write("only_latest_version:");
    ret.write(this.only_latest_version);

    ret.write(", ");
    ret.write("enable_read_from_follower:");
    ret.write(this.enable_read_from_follower);

    if (isSetCommon()) {
      ret.write(", ");
      ret.write("common:");
      if (this.common == null) {
        ret.write("null");
      } else {
        ret.write(this.common);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
