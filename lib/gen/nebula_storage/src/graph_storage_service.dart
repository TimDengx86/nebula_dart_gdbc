// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.graph_storage_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

abstract class GraphStorageService {
  Future<GetNeighborsResponse> getNeighbors(GetNeighborsRequest? req);

  Future<GetDstBySrcResponse> getDstBySrc(GetDstBySrcRequest? req);

  Future<GetPropResponse> getProps(GetPropRequest? req);

  Future<ExecResponse> addVertices(AddVerticesRequest? req);

  Future<ExecResponse> addEdges(AddEdgesRequest? req);

  Future<ExecResponse> deleteEdges(DeleteEdgesRequest? req);

  Future<ExecResponse> deleteVertices(DeleteVerticesRequest? req);

  Future<ExecResponse> deleteTags(DeleteTagsRequest? req);

  Future<UpdateResponse> updateVertex(UpdateVertexRequest? req);

  Future<UpdateResponse> updateEdge(UpdateEdgeRequest? req);

  Future<ScanResponse> scanVertex(ScanVertexRequest? req);

  Future<ScanResponse> scanEdge(ScanEdgeRequest? req);

  Future<GetUUIDResp> getUUID(GetUUIDReq? req);

  Future<LookupIndexResp> lookupIndex(LookupIndexRequest? req);

  Future<GetNeighborsResponse> lookupAndTraverse(LookupAndTraverseRequest? req);

  Future<UpdateResponse> chainUpdateEdge(UpdateEdgeRequest? req);

  Future<ExecResponse> chainAddEdges(AddEdgesRequest? req);

  Future<ExecResponse> chainDeleteEdges(DeleteEdgesRequest? req);

  Future<KVGetResponse> get(KVGetRequest? req);

  Future<ExecResponse> put(KVPutRequest? req);

  Future<ExecResponse> remove(KVRemoveRequest? req);
}

class GraphStorageServiceClient implements GraphStorageService {
  GraphStorageServiceClient(TProtocol iprot, [TProtocol? oprot]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  late TProtocol _iprot;

  TProtocol get iprot => _iprot;

  late TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<GetNeighborsResponse> getNeighbors(GetNeighborsRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("getNeighbors", TMessageType.CALL, nextSeqid()));
    getNeighbors_args args = new getNeighbors_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getNeighbors_result result = new getNeighbors_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "getNeighbors failed: unknown result");
  }

  Future<GetDstBySrcResponse> getDstBySrc(GetDstBySrcRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("getDstBySrc", TMessageType.CALL, nextSeqid()));
    getDstBySrc_args args = new getDstBySrc_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getDstBySrc_result result = new getDstBySrc_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "getDstBySrc failed: unknown result");
  }

  Future<GetPropResponse> getProps(GetPropRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("getProps", TMessageType.CALL, nextSeqid()));
    getProps_args args = new getProps_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getProps_result result = new getProps_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "getProps failed: unknown result");
  }

  Future<ExecResponse> addVertices(AddVerticesRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("addVertices", TMessageType.CALL, nextSeqid()));
    addVertices_args args = new addVertices_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    addVertices_result result = new addVertices_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "addVertices failed: unknown result");
  }

  Future<ExecResponse> addEdges(AddEdgesRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("addEdges", TMessageType.CALL, nextSeqid()));
    addEdges_args args = new addEdges_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    addEdges_result result = new addEdges_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "addEdges failed: unknown result");
  }

  Future<ExecResponse> deleteEdges(DeleteEdgesRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("deleteEdges", TMessageType.CALL, nextSeqid()));
    deleteEdges_args args = new deleteEdges_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    deleteEdges_result result = new deleteEdges_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "deleteEdges failed: unknown result");
  }

  Future<ExecResponse> deleteVertices(DeleteVerticesRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("deleteVertices", TMessageType.CALL, nextSeqid()));
    deleteVertices_args args = new deleteVertices_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    deleteVertices_result result = new deleteVertices_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "deleteVertices failed: unknown result");
  }

  Future<ExecResponse> deleteTags(DeleteTagsRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("deleteTags", TMessageType.CALL, nextSeqid()));
    deleteTags_args args = new deleteTags_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    deleteTags_result result = new deleteTags_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "deleteTags failed: unknown result");
  }

  Future<UpdateResponse> updateVertex(UpdateVertexRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("updateVertex", TMessageType.CALL, nextSeqid()));
    updateVertex_args args = new updateVertex_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateVertex_result result = new updateVertex_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "updateVertex failed: unknown result");
  }

  Future<UpdateResponse> updateEdge(UpdateEdgeRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("updateEdge", TMessageType.CALL, nextSeqid()));
    updateEdge_args args = new updateEdge_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    updateEdge_result result = new updateEdge_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "updateEdge failed: unknown result");
  }

  Future<ScanResponse> scanVertex(ScanVertexRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("scanVertex", TMessageType.CALL, nextSeqid()));
    scanVertex_args args = new scanVertex_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    scanVertex_result result = new scanVertex_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "scanVertex failed: unknown result");
  }

  Future<ScanResponse> scanEdge(ScanEdgeRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("scanEdge", TMessageType.CALL, nextSeqid()));
    scanEdge_args args = new scanEdge_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    scanEdge_result result = new scanEdge_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "scanEdge failed: unknown result");
  }

  Future<GetUUIDResp> getUUID(GetUUIDReq? req) async {
    oprot.writeMessageBegin(
        new TMessage("getUUID", TMessageType.CALL, nextSeqid()));
    getUUID_args args = new getUUID_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getUUID_result result = new getUUID_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(
        TApplicationErrorType.MISSING_RESULT, "getUUID failed: unknown result");
  }

  Future<LookupIndexResp> lookupIndex(LookupIndexRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("lookupIndex", TMessageType.CALL, nextSeqid()));
    lookupIndex_args args = new lookupIndex_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    lookupIndex_result result = new lookupIndex_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "lookupIndex failed: unknown result");
  }

  Future<GetNeighborsResponse> lookupAndTraverse(
      LookupAndTraverseRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("lookupAndTraverse", TMessageType.CALL, nextSeqid()));
    lookupAndTraverse_args args = new lookupAndTraverse_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    lookupAndTraverse_result result = new lookupAndTraverse_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "lookupAndTraverse failed: unknown result");
  }

  Future<UpdateResponse> chainUpdateEdge(UpdateEdgeRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("chainUpdateEdge", TMessageType.CALL, nextSeqid()));
    chainUpdateEdge_args args = new chainUpdateEdge_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    chainUpdateEdge_result result = new chainUpdateEdge_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "chainUpdateEdge failed: unknown result");
  }

  Future<ExecResponse> chainAddEdges(AddEdgesRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("chainAddEdges", TMessageType.CALL, nextSeqid()));
    chainAddEdges_args args = new chainAddEdges_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    chainAddEdges_result result = new chainAddEdges_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "chainAddEdges failed: unknown result");
  }

  Future<ExecResponse> chainDeleteEdges(DeleteEdgesRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("chainDeleteEdges", TMessageType.CALL, nextSeqid()));
    chainDeleteEdges_args args = new chainDeleteEdges_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    chainDeleteEdges_result result = new chainDeleteEdges_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT,
        "chainDeleteEdges failed: unknown result");
  }

  Future<KVGetResponse> get(KVGetRequest? req) async {
    oprot
        .writeMessageBegin(new TMessage("get", TMessageType.CALL, nextSeqid()));
    get_args args = new get_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    get_result result = new get_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(
        TApplicationErrorType.MISSING_RESULT, "get failed: unknown result");
  }

  Future<ExecResponse> put(KVPutRequest? req) async {
    oprot
        .writeMessageBegin(new TMessage("put", TMessageType.CALL, nextSeqid()));
    put_args args = new put_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    put_result result = new put_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(
        TApplicationErrorType.MISSING_RESULT, "put failed: unknown result");
  }

  Future<ExecResponse> remove(KVRemoveRequest? req) async {
    oprot.writeMessageBegin(
        new TMessage("remove", TMessageType.CALL, nextSeqid()));
    remove_args args = new remove_args();
    args.req = req;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.trans_.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    remove_result result = new remove_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success!;
    }

    throw new TApplicationError(
        TApplicationErrorType.MISSING_RESULT, "remove failed: unknown result");
  }
}

typedef ProcessFunction = void Function(
    int seqid, TProtocol iprot, TProtocol oprot);

class GraphStorageServiceProcessor implements TProcessor {
  GraphStorageServiceProcessor(GraphStorageService iface) {
    iface_ = iface;
    PROCESS_MAP["getNeighbors"] = getNeighbors;
    PROCESS_MAP["getDstBySrc"] = getDstBySrc;
    PROCESS_MAP["getProps"] = getProps;
    PROCESS_MAP["addVertices"] = addVertices;
    PROCESS_MAP["addEdges"] = addEdges;
    PROCESS_MAP["deleteEdges"] = deleteEdges;
    PROCESS_MAP["deleteVertices"] = deleteVertices;
    PROCESS_MAP["deleteTags"] = deleteTags;
    PROCESS_MAP["updateVertex"] = updateVertex;
    PROCESS_MAP["updateEdge"] = updateEdge;
    PROCESS_MAP["scanVertex"] = scanVertex;
    PROCESS_MAP["scanEdge"] = scanEdge;
    PROCESS_MAP["getUUID"] = getUUID;
    PROCESS_MAP["lookupIndex"] = lookupIndex;
    PROCESS_MAP["lookupAndTraverse"] = lookupAndTraverse;
    PROCESS_MAP["chainUpdateEdge"] = chainUpdateEdge;
    PROCESS_MAP["chainAddEdges"] = chainAddEdges;
    PROCESS_MAP["chainDeleteEdges"] = chainDeleteEdges;
    PROCESS_MAP["get"] = get;
    PROCESS_MAP["put"] = put;
    PROCESS_MAP["remove"] = remove;
  }

  late GraphStorageService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction? fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(
          TApplicationErrorType.UNKNOWN_METHOD,
          "Invalid method name: '${msg.name}'");
      oprot.writeMessageBegin(
          new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.trans_.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  getNeighbors(int seqid, TProtocol iprot, TProtocol oprot) async {
    getNeighbors_args args = new getNeighbors_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getNeighbors_result result = new getNeighbors_result();
    result.success = await iface_.getNeighbors(args.req);
    oprot.writeMessageBegin(
        new TMessage("getNeighbors", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  getDstBySrc(int seqid, TProtocol iprot, TProtocol oprot) async {
    getDstBySrc_args args = new getDstBySrc_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getDstBySrc_result result = new getDstBySrc_result();
    result.success = await iface_.getDstBySrc(args.req);
    oprot.writeMessageBegin(
        new TMessage("getDstBySrc", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  getProps(int seqid, TProtocol iprot, TProtocol oprot) async {
    getProps_args args = new getProps_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getProps_result result = new getProps_result();
    result.success = await iface_.getProps(args.req);
    oprot
        .writeMessageBegin(new TMessage("getProps", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  addVertices(int seqid, TProtocol iprot, TProtocol oprot) async {
    addVertices_args args = new addVertices_args();
    args.read(iprot);
    iprot.readMessageEnd();
    addVertices_result result = new addVertices_result();
    result.success = await iface_.addVertices(args.req);
    oprot.writeMessageBegin(
        new TMessage("addVertices", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  addEdges(int seqid, TProtocol iprot, TProtocol oprot) async {
    addEdges_args args = new addEdges_args();
    args.read(iprot);
    iprot.readMessageEnd();
    addEdges_result result = new addEdges_result();
    result.success = await iface_.addEdges(args.req);
    oprot
        .writeMessageBegin(new TMessage("addEdges", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  deleteEdges(int seqid, TProtocol iprot, TProtocol oprot) async {
    deleteEdges_args args = new deleteEdges_args();
    args.read(iprot);
    iprot.readMessageEnd();
    deleteEdges_result result = new deleteEdges_result();
    result.success = await iface_.deleteEdges(args.req);
    oprot.writeMessageBegin(
        new TMessage("deleteEdges", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  deleteVertices(int seqid, TProtocol iprot, TProtocol oprot) async {
    deleteVertices_args args = new deleteVertices_args();
    args.read(iprot);
    iprot.readMessageEnd();
    deleteVertices_result result = new deleteVertices_result();
    result.success = await iface_.deleteVertices(args.req);
    oprot.writeMessageBegin(
        new TMessage("deleteVertices", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  deleteTags(int seqid, TProtocol iprot, TProtocol oprot) async {
    deleteTags_args args = new deleteTags_args();
    args.read(iprot);
    iprot.readMessageEnd();
    deleteTags_result result = new deleteTags_result();
    result.success = await iface_.deleteTags(args.req);
    oprot.writeMessageBegin(
        new TMessage("deleteTags", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  updateVertex(int seqid, TProtocol iprot, TProtocol oprot) async {
    updateVertex_args args = new updateVertex_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateVertex_result result = new updateVertex_result();
    result.success = await iface_.updateVertex(args.req);
    oprot.writeMessageBegin(
        new TMessage("updateVertex", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  updateEdge(int seqid, TProtocol iprot, TProtocol oprot) async {
    updateEdge_args args = new updateEdge_args();
    args.read(iprot);
    iprot.readMessageEnd();
    updateEdge_result result = new updateEdge_result();
    result.success = await iface_.updateEdge(args.req);
    oprot.writeMessageBegin(
        new TMessage("updateEdge", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  scanVertex(int seqid, TProtocol iprot, TProtocol oprot) async {
    scanVertex_args args = new scanVertex_args();
    args.read(iprot);
    iprot.readMessageEnd();
    scanVertex_result result = new scanVertex_result();
    result.success = await iface_.scanVertex(args.req);
    oprot.writeMessageBegin(
        new TMessage("scanVertex", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  scanEdge(int seqid, TProtocol iprot, TProtocol oprot) async {
    scanEdge_args args = new scanEdge_args();
    args.read(iprot);
    iprot.readMessageEnd();
    scanEdge_result result = new scanEdge_result();
    result.success = await iface_.scanEdge(args.req);
    oprot
        .writeMessageBegin(new TMessage("scanEdge", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  getUUID(int seqid, TProtocol iprot, TProtocol oprot) async {
    getUUID_args args = new getUUID_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getUUID_result result = new getUUID_result();
    result.success = await iface_.getUUID(args.req);
    oprot.writeMessageBegin(new TMessage("getUUID", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  lookupIndex(int seqid, TProtocol iprot, TProtocol oprot) async {
    lookupIndex_args args = new lookupIndex_args();
    args.read(iprot);
    iprot.readMessageEnd();
    lookupIndex_result result = new lookupIndex_result();
    result.success = await iface_.lookupIndex(args.req);
    oprot.writeMessageBegin(
        new TMessage("lookupIndex", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  lookupAndTraverse(int seqid, TProtocol iprot, TProtocol oprot) async {
    lookupAndTraverse_args args = new lookupAndTraverse_args();
    args.read(iprot);
    iprot.readMessageEnd();
    lookupAndTraverse_result result = new lookupAndTraverse_result();
    result.success = await iface_.lookupAndTraverse(args.req);
    oprot.writeMessageBegin(
        new TMessage("lookupAndTraverse", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  chainUpdateEdge(int seqid, TProtocol iprot, TProtocol oprot) async {
    chainUpdateEdge_args args = new chainUpdateEdge_args();
    args.read(iprot);
    iprot.readMessageEnd();
    chainUpdateEdge_result result = new chainUpdateEdge_result();
    result.success = await iface_.chainUpdateEdge(args.req);
    oprot.writeMessageBegin(
        new TMessage("chainUpdateEdge", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  chainAddEdges(int seqid, TProtocol iprot, TProtocol oprot) async {
    chainAddEdges_args args = new chainAddEdges_args();
    args.read(iprot);
    iprot.readMessageEnd();
    chainAddEdges_result result = new chainAddEdges_result();
    result.success = await iface_.chainAddEdges(args.req);
    oprot.writeMessageBegin(
        new TMessage("chainAddEdges", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  chainDeleteEdges(int seqid, TProtocol iprot, TProtocol oprot) async {
    chainDeleteEdges_args args = new chainDeleteEdges_args();
    args.read(iprot);
    iprot.readMessageEnd();
    chainDeleteEdges_result result = new chainDeleteEdges_result();
    result.success = await iface_.chainDeleteEdges(args.req);
    oprot.writeMessageBegin(
        new TMessage("chainDeleteEdges", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  get(int seqid, TProtocol iprot, TProtocol oprot) async {
    get_args args = new get_args();
    args.read(iprot);
    iprot.readMessageEnd();
    get_result result = new get_result();
    result.success = await iface_.get(args.req);
    oprot.writeMessageBegin(new TMessage("get", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  put(int seqid, TProtocol iprot, TProtocol oprot) async {
    put_args args = new put_args();
    args.read(iprot);
    iprot.readMessageEnd();
    put_result result = new put_result();
    result.success = await iface_.put(args.req);
    oprot.writeMessageBegin(new TMessage("put", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }

  remove(int seqid, TProtocol iprot, TProtocol oprot) async {
    remove_args args = new remove_args();
    args.read(iprot);
    iprot.readMessageEnd();
    remove_result result = new remove_result();
    result.success = await iface_.remove(args.req);
    oprot.writeMessageBegin(new TMessage("remove", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.trans_.flush();
  }
}

class getNeighbors_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getNeighbors_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  GetNeighborsRequest? _req;
  static const int REQ = 1;

  getNeighbors_args() {}

  // req
  GetNeighborsRequest? get req => this._req;

  set req(GetNeighborsRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as GetNeighborsRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new GetNeighborsRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getNeighbors_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class getNeighbors_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getNeighbors_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  GetNeighborsResponse? _success;
  static const int SUCCESS = 0;

  getNeighbors_result() {}

  // success
  GetNeighborsResponse? get success => this._success;

  set success(GetNeighborsResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as GetNeighborsResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new GetNeighborsResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getNeighbors_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class getDstBySrc_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getDstBySrc_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  GetDstBySrcRequest? _req;
  static const int REQ = 1;

  getDstBySrc_args() {}

  // req
  GetDstBySrcRequest? get req => this._req;

  set req(GetDstBySrcRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as GetDstBySrcRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new GetDstBySrcRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getDstBySrc_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class getDstBySrc_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getDstBySrc_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  GetDstBySrcResponse? _success;
  static const int SUCCESS = 0;

  getDstBySrc_result() {}

  // success
  GetDstBySrcResponse? get success => this._success;

  set success(GetDstBySrcResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as GetDstBySrcResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new GetDstBySrcResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getDstBySrc_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class getProps_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getProps_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  GetPropRequest? _req;
  static const int REQ = 1;

  getProps_args() {}

  // req
  GetPropRequest? get req => this._req;

  set req(GetPropRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as GetPropRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new GetPropRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getProps_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class getProps_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getProps_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  GetPropResponse? _success;
  static const int SUCCESS = 0;

  getProps_result() {}

  // success
  GetPropResponse? get success => this._success;

  set success(GetPropResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as GetPropResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new GetPropResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getProps_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class addVertices_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("addVertices_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  AddVerticesRequest? _req;
  static const int REQ = 1;

  addVertices_args() {}

  // req
  AddVerticesRequest? get req => this._req;

  set req(AddVerticesRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as AddVerticesRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new AddVerticesRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("addVertices_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class addVertices_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("addVertices_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ExecResponse? _success;
  static const int SUCCESS = 0;

  addVertices_result() {}

  // success
  ExecResponse? get success => this._success;

  set success(ExecResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ExecResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ExecResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("addVertices_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class addEdges_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("addEdges_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  AddEdgesRequest? _req;
  static const int REQ = 1;

  addEdges_args() {}

  // req
  AddEdgesRequest? get req => this._req;

  set req(AddEdgesRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as AddEdgesRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new AddEdgesRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("addEdges_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class addEdges_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("addEdges_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ExecResponse? _success;
  static const int SUCCESS = 0;

  addEdges_result() {}

  // success
  ExecResponse? get success => this._success;

  set success(ExecResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ExecResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ExecResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("addEdges_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class deleteEdges_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("deleteEdges_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  DeleteEdgesRequest? _req;
  static const int REQ = 1;

  deleteEdges_args() {}

  // req
  DeleteEdgesRequest? get req => this._req;

  set req(DeleteEdgesRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as DeleteEdgesRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new DeleteEdgesRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("deleteEdges_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class deleteEdges_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("deleteEdges_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ExecResponse? _success;
  static const int SUCCESS = 0;

  deleteEdges_result() {}

  // success
  ExecResponse? get success => this._success;

  set success(ExecResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ExecResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ExecResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("deleteEdges_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class deleteVertices_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("deleteVertices_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  DeleteVerticesRequest? _req;
  static const int REQ = 1;

  deleteVertices_args() {}

  // req
  DeleteVerticesRequest? get req => this._req;

  set req(DeleteVerticesRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as DeleteVerticesRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new DeleteVerticesRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("deleteVertices_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class deleteVertices_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("deleteVertices_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ExecResponse? _success;
  static const int SUCCESS = 0;

  deleteVertices_result() {}

  // success
  ExecResponse? get success => this._success;

  set success(ExecResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ExecResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ExecResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("deleteVertices_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class deleteTags_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("deleteTags_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  DeleteTagsRequest? _req;
  static const int REQ = 1;

  deleteTags_args() {}

  // req
  DeleteTagsRequest? get req => this._req;

  set req(DeleteTagsRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as DeleteTagsRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new DeleteTagsRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("deleteTags_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class deleteTags_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("deleteTags_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ExecResponse? _success;
  static const int SUCCESS = 0;

  deleteTags_result() {}

  // success
  ExecResponse? get success => this._success;

  set success(ExecResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ExecResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ExecResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("deleteTags_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class updateVertex_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateVertex_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  UpdateVertexRequest? _req;
  static const int REQ = 1;

  updateVertex_args() {}

  // req
  UpdateVertexRequest? get req => this._req;

  set req(UpdateVertexRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as UpdateVertexRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new UpdateVertexRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateVertex_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class updateVertex_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateVertex_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  UpdateResponse? _success;
  static const int SUCCESS = 0;

  updateVertex_result() {}

  // success
  UpdateResponse? get success => this._success;

  set success(UpdateResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as UpdateResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new UpdateResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateVertex_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class updateEdge_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateEdge_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  UpdateEdgeRequest? _req;
  static const int REQ = 1;

  updateEdge_args() {}

  // req
  UpdateEdgeRequest? get req => this._req;

  set req(UpdateEdgeRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as UpdateEdgeRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new UpdateEdgeRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateEdge_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class updateEdge_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("updateEdge_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  UpdateResponse? _success;
  static const int SUCCESS = 0;

  updateEdge_result() {}

  // success
  UpdateResponse? get success => this._success;

  set success(UpdateResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as UpdateResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new UpdateResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("updateEdge_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class scanVertex_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("scanVertex_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  ScanVertexRequest? _req;
  static const int REQ = 1;

  scanVertex_args() {}

  // req
  ScanVertexRequest? get req => this._req;

  set req(ScanVertexRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as ScanVertexRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new ScanVertexRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("scanVertex_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class scanVertex_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("scanVertex_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ScanResponse? _success;
  static const int SUCCESS = 0;

  scanVertex_result() {}

  // success
  ScanResponse? get success => this._success;

  set success(ScanResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ScanResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ScanResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("scanVertex_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class scanEdge_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("scanEdge_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  ScanEdgeRequest? _req;
  static const int REQ = 1;

  scanEdge_args() {}

  // req
  ScanEdgeRequest? get req => this._req;

  set req(ScanEdgeRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as ScanEdgeRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new ScanEdgeRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("scanEdge_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class scanEdge_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("scanEdge_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ScanResponse? _success;
  static const int SUCCESS = 0;

  scanEdge_result() {}

  // success
  ScanResponse? get success => this._success;

  set success(ScanResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ScanResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ScanResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("scanEdge_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class getUUID_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getUUID_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  GetUUIDReq? _req;
  static const int REQ = 1;

  getUUID_args() {}

  // req
  GetUUIDReq? get req => this._req;

  set req(GetUUIDReq? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as GetUUIDReq;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new GetUUIDReq();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getUUID_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class getUUID_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getUUID_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  GetUUIDResp? _success;
  static const int SUCCESS = 0;

  getUUID_result() {}

  // success
  GetUUIDResp? get success => this._success;

  set success(GetUUIDResp? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as GetUUIDResp;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new GetUUIDResp();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getUUID_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class lookupIndex_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("lookupIndex_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  LookupIndexRequest? _req;
  static const int REQ = 1;

  lookupIndex_args() {}

  // req
  LookupIndexRequest? get req => this._req;

  set req(LookupIndexRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as LookupIndexRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new LookupIndexRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("lookupIndex_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class lookupIndex_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("lookupIndex_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  LookupIndexResp? _success;
  static const int SUCCESS = 0;

  lookupIndex_result() {}

  // success
  LookupIndexResp? get success => this._success;

  set success(LookupIndexResp? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as LookupIndexResp;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new LookupIndexResp();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("lookupIndex_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class lookupAndTraverse_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("lookupAndTraverse_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  LookupAndTraverseRequest? _req;
  static const int REQ = 1;

  lookupAndTraverse_args() {}

  // req
  LookupAndTraverseRequest? get req => this._req;

  set req(LookupAndTraverseRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as LookupAndTraverseRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new LookupAndTraverseRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("lookupAndTraverse_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class lookupAndTraverse_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("lookupAndTraverse_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  GetNeighborsResponse? _success;
  static const int SUCCESS = 0;

  lookupAndTraverse_result() {}

  // success
  GetNeighborsResponse? get success => this._success;

  set success(GetNeighborsResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as GetNeighborsResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new GetNeighborsResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("lookupAndTraverse_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class chainUpdateEdge_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("chainUpdateEdge_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  UpdateEdgeRequest? _req;
  static const int REQ = 1;

  chainUpdateEdge_args() {}

  // req
  UpdateEdgeRequest? get req => this._req;

  set req(UpdateEdgeRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as UpdateEdgeRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new UpdateEdgeRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("chainUpdateEdge_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class chainUpdateEdge_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("chainUpdateEdge_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  UpdateResponse? _success;
  static const int SUCCESS = 0;

  chainUpdateEdge_result() {}

  // success
  UpdateResponse? get success => this._success;

  set success(UpdateResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as UpdateResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new UpdateResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("chainUpdateEdge_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class chainAddEdges_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("chainAddEdges_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  AddEdgesRequest? _req;
  static const int REQ = 1;

  chainAddEdges_args() {}

  // req
  AddEdgesRequest? get req => this._req;

  set req(AddEdgesRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as AddEdgesRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new AddEdgesRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("chainAddEdges_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class chainAddEdges_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("chainAddEdges_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ExecResponse? _success;
  static const int SUCCESS = 0;

  chainAddEdges_result() {}

  // success
  ExecResponse? get success => this._success;

  set success(ExecResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ExecResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ExecResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("chainAddEdges_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class chainDeleteEdges_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("chainDeleteEdges_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  DeleteEdgesRequest? _req;
  static const int REQ = 1;

  chainDeleteEdges_args() {}

  // req
  DeleteEdgesRequest? get req => this._req;

  set req(DeleteEdgesRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as DeleteEdgesRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new DeleteEdgesRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("chainDeleteEdges_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class chainDeleteEdges_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("chainDeleteEdges_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ExecResponse? _success;
  static const int SUCCESS = 0;

  chainDeleteEdges_result() {}

  // success
  ExecResponse? get success => this._success;

  set success(ExecResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ExecResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ExecResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("chainDeleteEdges_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class get_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("get_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  KVGetRequest? _req;
  static const int REQ = 1;

  get_args() {}

  // req
  KVGetRequest? get req => this._req;

  set req(KVGetRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as KVGetRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new KVGetRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("get_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class get_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("get_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  KVGetResponse? _success;
  static const int SUCCESS = 0;

  get_result() {}

  // success
  KVGetResponse? get success => this._success;

  set success(KVGetResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as KVGetResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new KVGetResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("get_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class put_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("put_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  KVPutRequest? _req;
  static const int REQ = 1;

  put_args() {}

  // req
  KVPutRequest? get req => this._req;

  set req(KVPutRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as KVPutRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new KVPutRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("put_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class put_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("put_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ExecResponse? _success;
  static const int SUCCESS = 0;

  put_result() {}

  // success
  ExecResponse? get success => this._success;

  set success(ExecResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ExecResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ExecResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("put_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class remove_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("remove_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);

  KVRemoveRequest? _req;
  static const int REQ = 1;

  remove_args() {}

  // req
  KVRemoveRequest? get req => this._req;

  set req(KVRemoveRequest? req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value as KVRemoveRequest;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new KVRemoveRequest();
            this.req?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("remove_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}

class remove_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("remove_result");
  static final TField _SUCCESS_FIELD_DESC =
      new TField("success", TType.STRUCT, 0);

  ExecResponse? _success;
  static const int SUCCESS = 0;

  remove_result() {}

  // success
  ExecResponse? get success => this._success;

  set success(ExecResponse? success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value as ExecResponse;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new ExecResponse();
            this.success?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("remove_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
