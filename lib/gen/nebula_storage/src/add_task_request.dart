// ignore_for_file: unnecessary_this, unnecessary_new, non_constant_identifier_names, annotate_overrides, no_leading_underscores_for_local_identifiers, constant_identifier_names, unused_import, import_of_legacy_library_into_null_safe, slash_for_doc_comments

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.add_task_request;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class AddTaskRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AddTaskRequest");
  static final TField _JOB_TYPE_FIELD_DESC =
      new TField("job_type", TType.I32, 1);
  static final TField _JOB_ID_FIELD_DESC = new TField("job_id", TType.I32, 2);
  static final TField _TASK_ID_FIELD_DESC = new TField("task_id", TType.I32, 3);
  static final TField _PARA_FIELD_DESC = new TField("para", TType.STRUCT, 4);

  int? _job_type;
  static const int JOB_TYPE = 1;
  int _job_id = 0;
  static const int JOB_ID = 2;
  int _task_id = 0;
  static const int TASK_ID = 3;
  TaskPara? _para;
  static const int PARA = 4;

  bool __isset_job_type = false;
  bool __isset_job_id = false;
  bool __isset_task_id = false;

  AddTaskRequest() {}

  // job_type
  int? get job_type => this._job_type;

  set job_type(int? job_type) {
    this._job_type = job_type;
    this.__isset_job_type = true;
  }

  bool isSetJob_type() => this.__isset_job_type;

  unsetJob_type() {
    this.__isset_job_type = false;
  }

  // job_id
  int get job_id => this._job_id;

  set job_id(int job_id) {
    this._job_id = job_id;
    this.__isset_job_id = true;
  }

  bool isSetJob_id() => this.__isset_job_id;

  unsetJob_id() {
    this.__isset_job_id = false;
  }

  // task_id
  int get task_id => this._task_id;

  set task_id(int task_id) {
    this._task_id = task_id;
    this.__isset_task_id = true;
  }

  bool isSetTask_id() => this.__isset_task_id;

  unsetTask_id() {
    this.__isset_task_id = false;
  }

  // para
  TaskPara? get para => this._para;

  set para(TaskPara? para) {
    this._para = para;
  }

  bool isSetPara() => this.para != null;

  unsetPara() {
    this.para = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case JOB_TYPE:
        return this.job_type;
      case JOB_ID:
        return this.job_id;
      case TASK_ID:
        return this.task_id;
      case PARA:
        return this.para;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case JOB_TYPE:
        if (value == null) {
          unsetJob_type();
        } else {
          this.job_type = value as int?;
        }
        break;

      case JOB_ID:
        if (value == null) {
          unsetJob_id();
        } else {
          this.job_id = value as int;
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTask_id();
        } else {
          this.task_id = value as int;
        }
        break;

      case PARA:
        if (value == null) {
          unsetPara();
        } else {
          this.para = value as TaskPara?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case JOB_TYPE:
        return isSetJob_type();
      case JOB_ID:
        return isSetJob_id();
      case TASK_ID:
        return isSetTask_id();
      case PARA:
        return isSetPara();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case JOB_TYPE:
          if (field.type == TType.I32) {
            this.job_type = iprot.readI32();
            this.__isset_job_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case JOB_ID:
          if (field.type == TType.I32) {
            this.job_id = iprot.readI32();
            this.__isset_job_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TASK_ID:
          if (field.type == TType.I32) {
            this.task_id = iprot.readI32();
            this.__isset_task_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARA:
          if (field.type == TType.STRUCT) {
            this.para = new TaskPara();
            this.para?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_JOB_TYPE_FIELD_DESC);
    oprot.writeI32(this.job_type);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_JOB_ID_FIELD_DESC);
    oprot.writeI32(this.job_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TASK_ID_FIELD_DESC);
    oprot.writeI32(this.task_id);
    oprot.writeFieldEnd();
    if (this.para != null) {
      oprot.writeFieldBegin(_PARA_FIELD_DESC);
      this.para?.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AddTaskRequest(");

    ret.write("job_type:");
    String? job_type_name =
        t_nebula_meta.JobType.VALUES_TO_NAMES[this.job_type];
    if (job_type_name != null) {
      ret.write(job_type_name);
      ret.write(" (");
    }
    ret.write(this.job_type);
    if (job_type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("job_id:");
    ret.write(this.job_id);

    ret.write(", ");
    ret.write("task_id:");
    ret.write(this.task_id);

    ret.write(", ");
    ret.write("para:");
    if (this.para == null) {
      ret.write("null");
    } else {
      ret.write(this.para);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetJob_type() &&
        !t_nebula_meta.JobType.VALID_VALUES.contains(job_type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'job_type' has been assigned the invalid value $job_type");
    }
  }
}
