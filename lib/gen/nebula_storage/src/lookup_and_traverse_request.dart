// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.lookup_and_traverse_request;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class LookupAndTraverseRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("LookupAndTraverseRequest");
  static final TField _SPACE_ID_FIELD_DESC =
      new TField("space_id", TType.I32, 1);
  static final TField _PARTS_FIELD_DESC = new TField("parts", TType.LIST, 2);
  static final TField _INDICES_FIELD_DESC =
      new TField("indices", TType.STRUCT, 3);
  static final TField _TRAVERSE_SPEC_FIELD_DESC =
      new TField("traverse_spec", TType.STRUCT, 4);
  static final TField _COMMON_FIELD_DESC =
      new TField("common", TType.STRUCT, 5);

  int _space_id = 0;
  static const int SPACE_ID = 1;
  List<int>? _parts;
  static const int PARTS = 2;
  IndexSpec? _indices;
  static const int INDICES = 3;
  TraverseSpec? _traverse_spec;
  static const int TRAVERSE_SPEC = 4;
  RequestCommon? _common;
  static const int COMMON = 5;

  bool __isset_space_id = false;

  LookupAndTraverseRequest() {}

  // space_id
  int get space_id => this._space_id;

  set space_id(int space_id) {
    this._space_id = space_id;
    this.__isset_space_id = true;
  }

  bool isSetSpace_id() => this.__isset_space_id;

  unsetSpace_id() {
    this.__isset_space_id = false;
  }

  // parts
  List<int>? get parts => this._parts;

  set parts(List<int>? parts) {
    this._parts = parts;
  }

  bool isSetParts() => this.parts != null;

  unsetParts() {
    this.parts = null;
  }

  // indices
  IndexSpec? get indices => this._indices;

  set indices(IndexSpec? indices) {
    this._indices = indices;
  }

  bool isSetIndices() => this.indices != null;

  unsetIndices() {
    this.indices = null;
  }

  // traverse_spec
  TraverseSpec? get traverse_spec => this._traverse_spec;

  set traverse_spec(TraverseSpec? traverse_spec) {
    this._traverse_spec = traverse_spec;
  }

  bool isSetTraverse_spec() => this.traverse_spec != null;

  unsetTraverse_spec() {
    this.traverse_spec = null;
  }

  // common
  RequestCommon? get common => this._common;

  set common(RequestCommon? common) {
    this._common = common;
  }

  bool isSetCommon() => this.common != null;

  unsetCommon() {
    this.common = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return this.space_id;
      case PARTS:
        return this.parts;
      case INDICES:
        return this.indices;
      case TRAVERSE_SPEC:
        return this.traverse_spec;
      case COMMON:
        return this.common;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          this.space_id = value as int;
        }
        break;

      case PARTS:
        if (value == null) {
          unsetParts();
        } else {
          this.parts = value as List<int>;
        }
        break;

      case INDICES:
        if (value == null) {
          unsetIndices();
        } else {
          this.indices = value as IndexSpec;
        }
        break;

      case TRAVERSE_SPEC:
        if (value == null) {
          unsetTraverse_spec();
        } else {
          this.traverse_spec = value as TraverseSpec;
        }
        break;

      case COMMON:
        if (value == null) {
          unsetCommon();
        } else {
          this.common = value as RequestCommon;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPACE_ID:
        return isSetSpace_id();
      case PARTS:
        return isSetParts();
      case INDICES:
        return isSetIndices();
      case TRAVERSE_SPEC:
        return isSetTraverse_spec();
      case COMMON:
        return isSetCommon();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPACE_ID:
          if (field.type == TType.I32) {
            this.space_id = iprot.readI32();
            this.__isset_space_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARTS:
          if (field.type == TType.LIST) {
            {
              TList _list216 = iprot.readListBegin();
              this.parts = <int>[];
              for (int _i217 = 0; _i217 < _list216.length; ++_i217) {
                int _elem218;
                _elem218 = iprot.readI32();
                this.parts?.add(_elem218);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INDICES:
          if (field.type == TType.STRUCT) {
            this.indices = new IndexSpec();
            this.indices?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TRAVERSE_SPEC:
          if (field.type == TType.STRUCT) {
            this.traverse_spec = new TraverseSpec();
            this.traverse_spec?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMON:
          if (field.type == TType.STRUCT) {
            this.common = new RequestCommon();
            this.common?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!__isset_space_id) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'space_id' was not found in serialized data! Struct: ${toString()}");
    }

    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SPACE_ID_FIELD_DESC);
    oprot.writeI32(this.space_id);
    oprot.writeFieldEnd();
    if (this.parts != null) {
      oprot.writeFieldBegin(_PARTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.parts?.length));
        for (var elem219 in this.parts ?? []) {
          oprot.writeI32(elem219);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.indices != null) {
      oprot.writeFieldBegin(_INDICES_FIELD_DESC);
      this.indices?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.traverse_spec != null) {
      oprot.writeFieldBegin(_TRAVERSE_SPEC_FIELD_DESC);
      this.traverse_spec?.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetCommon()) {
      if (this.common != null) {
        oprot.writeFieldBegin(_COMMON_FIELD_DESC);
        this.common?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("LookupAndTraverseRequest(");

    ret.write("space_id:");
    ret.write(this.space_id);

    ret.write(", ");
    ret.write("parts:");
    if (this.parts == null) {
      ret.write("null");
    } else {
      ret.write(this.parts);
    }

    ret.write(", ");
    ret.write("indices:");
    if (this.indices == null) {
      ret.write("null");
    } else {
      ret.write(this.indices);
    }

    ret.write(", ");
    ret.write("traverse_spec:");
    if (this.traverse_spec == null) {
      ret.write("null");
    } else {
      ret.write(this.traverse_spec);
    }

    if (isSetCommon()) {
      ret.write(", ");
      ret.write("common:");
      if (this.common == null) {
        ret.write("null");
      } else {
        ret.write(this.common);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // alas, we cannot check 'space_id' because it's a primitive and you chose the non-beans generator.
    if (parts == null) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'parts' was not present! Struct: ${toString()}");
    }
    // check that fields of type enum have valid values
  }
}
