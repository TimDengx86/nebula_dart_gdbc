// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_storage.src.response_common;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import 'package:nebula_dart_gdbc/gen/nebula_storage/nebula_storage.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;
import 'package:nebula_dart_gdbc/gen/nebula_meta/nebula_meta.dart'
    as t_nebula_meta;

class ResponseCommon implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ResponseCommon");
  static final TField _FAILED_PARTS_FIELD_DESC =
      new TField("failed_parts", TType.LIST, 1);
  static final TField _LATENCY_IN_US_FIELD_DESC =
      new TField("latency_in_us", TType.I64, 2);
  static final TField _LATENCY_DETAIL_US_FIELD_DESC =
      new TField("latency_detail_us", TType.MAP, 3);

  List<PartitionResult>? _failed_parts;
  static const int FAILED_PARTS = 1;
  int _latency_in_us = 0;
  static const int LATENCY_IN_US = 2;
  Map<String, int>? _latency_detail_us;
  static const int LATENCY_DETAIL_US = 3;

  bool __isset_latency_in_us = false;

  ResponseCommon() {}

  // failed_parts
  List<PartitionResult>? get failed_parts => this._failed_parts;

  set failed_parts(List<PartitionResult>? failed_parts) {
    this._failed_parts = failed_parts;
  }

  bool isSetFailed_parts() => this.failed_parts != null;

  unsetFailed_parts() {
    this.failed_parts = null;
  }

  // latency_in_us
  int get latency_in_us => this._latency_in_us;

  set latency_in_us(int latency_in_us) {
    this._latency_in_us = latency_in_us;
    this.__isset_latency_in_us = true;
  }

  bool isSetLatency_in_us() => this.__isset_latency_in_us;

  unsetLatency_in_us() {
    this.__isset_latency_in_us = false;
  }

  // latency_detail_us
  Map<String, int>? get latency_detail_us => this._latency_detail_us;

  set latency_detail_us(Map<String, int>? latency_detail_us) {
    this._latency_detail_us = latency_detail_us;
  }

  bool isSetLatency_detail_us() => this.latency_detail_us != null;

  unsetLatency_detail_us() {
    this.latency_detail_us = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case FAILED_PARTS:
        return this.failed_parts;
      case LATENCY_IN_US:
        return this.latency_in_us;
      case LATENCY_DETAIL_US:
        return this.latency_detail_us;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case FAILED_PARTS:
        if (value == null) {
          unsetFailed_parts();
        } else {
          this.failed_parts = value as List<PartitionResult>;
        }
        break;

      case LATENCY_IN_US:
        if (value == null) {
          unsetLatency_in_us();
        } else {
          this.latency_in_us = value as int;
        }
        break;

      case LATENCY_DETAIL_US:
        if (value == null) {
          unsetLatency_detail_us();
        } else {
          this.latency_detail_us = value as Map<String, int>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case FAILED_PARTS:
        return isSetFailed_parts();
      case LATENCY_IN_US:
        return isSetLatency_in_us();
      case LATENCY_DETAIL_US:
        return isSetLatency_detail_us();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case FAILED_PARTS:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.failed_parts = <PartitionResult>[];
              for (int _i1 = 0; _i1 < _list0.length; ++_i1) {
                PartitionResult _elem2;
                _elem2 = new PartitionResult();
                _elem2.read(iprot);
                this.failed_parts?.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LATENCY_IN_US:
          if (field.type == TType.I64) {
            this.latency_in_us = iprot.readI64();
            this.__isset_latency_in_us = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LATENCY_DETAIL_US:
          if (field.type == TType.MAP) {
            {
              TMap _map3 = iprot.readMapBegin();
              this.latency_detail_us = <String, int>{};
              for (int _i4 = 0; _i4 < _map3.length; ++_i4) {
                String _key5;
                int _val6;
                _key5 = iprot.readString();
                _val6 = iprot.readI32();
                this.latency_detail_us?[_key5] = _val6;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!__isset_latency_in_us) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'latency_in_us' was not found in serialized data! Struct: ${toString()}");
    }

    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.failed_parts != null) {
      oprot.writeFieldBegin(_FAILED_PARTS_FIELD_DESC);
      {
        oprot
            .writeListBegin(new TList(TType.STRUCT, this.failed_parts?.length));
        for (var elem7 in this.failed_parts ?? []) {
          elem7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_LATENCY_IN_US_FIELD_DESC);
    oprot.writeI64(this.latency_in_us);
    oprot.writeFieldEnd();
    if (isSetLatency_detail_us()) {
      if (this.latency_detail_us != null) {
        oprot.writeFieldBegin(_LATENCY_DETAIL_US_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(
              TType.STRING, TType.I32, this.latency_detail_us?.length));
          for (var elem9 in this.latency_detail_us?.keys ?? <String>[]) {
            oprot.writeString(elem9);
            oprot.writeI32(this.latency_detail_us?[elem9]);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ResponseCommon(");

    ret.write("failed_parts:");
    if (this.failed_parts == null) {
      ret.write("null");
    } else {
      ret.write(this.failed_parts);
    }

    ret.write(", ");
    ret.write("latency_in_us:");
    ret.write(this.latency_in_us);

    if (isSetLatency_detail_us()) {
      ret.write(", ");
      ret.write("latency_detail_us:");
      if (this.latency_detail_us == null) {
        ret.write("null");
      } else {
        ret.write(this.latency_detail_us);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    if (failed_parts == null) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "Required field 'failed_parts' was not present! Struct: ${toString()}");
    }
    // alas, we cannot check 'latency_in_us' because it's a primitive and you chose the non-beans generator.
    // check that fields of type enum have valid values
  }
}
