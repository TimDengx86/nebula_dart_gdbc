// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.log_info;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class LogInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("LogInfo");
  static final TField _LOG_ID_FIELD_DESC = new TField("log_id", TType.I64, 1);
  static final TField _TERM_ID_FIELD_DESC = new TField("term_id", TType.I64, 2);
  static final TField _COMMIT_LOG_ID_FIELD_DESC =
      new TField("commit_log_id", TType.I64, 3);
  static final TField _CHECKPOINT_PATH_FIELD_DESC =
      new TField("checkpoint_path", TType.STRING, 4);

  int _log_id = 0;
  static const int LOG_ID = 1;
  int _term_id = 0;
  static const int TERM_ID = 2;
  int _commit_log_id = 0;
  static const int COMMIT_LOG_ID = 3;
  Int8List? _checkpoint_path;
  static const int CHECKPOINT_PATH = 4;

  bool __isset_log_id = false;
  bool __isset_term_id = false;
  bool __isset_commit_log_id = false;

  LogInfo() {}

  // log_id
  int get log_id => this._log_id;

  set log_id(int log_id) {
    this._log_id = log_id;
    this.__isset_log_id = true;
  }

  bool isSetLog_id() => this.__isset_log_id;

  unsetLog_id() {
    this.__isset_log_id = false;
  }

  // term_id
  int get term_id => this._term_id;

  set term_id(int term_id) {
    this._term_id = term_id;
    this.__isset_term_id = true;
  }

  bool isSetTerm_id() => this.__isset_term_id;

  unsetTerm_id() {
    this.__isset_term_id = false;
  }

  // commit_log_id
  int get commit_log_id => this._commit_log_id;

  set commit_log_id(int commit_log_id) {
    this._commit_log_id = commit_log_id;
    this.__isset_commit_log_id = true;
  }

  bool isSetCommit_log_id() => this.__isset_commit_log_id;

  unsetCommit_log_id() {
    this.__isset_commit_log_id = false;
  }

  // checkpoint_path
  Int8List? get checkpoint_path => this._checkpoint_path;

  set checkpoint_path(Int8List? checkpoint_path) {
    this._checkpoint_path = checkpoint_path;
  }

  bool isSetCheckpoint_path() => this.checkpoint_path != null;

  unsetCheckpoint_path() {
    this.checkpoint_path = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LOG_ID:
        return this.log_id;
      case TERM_ID:
        return this.term_id;
      case COMMIT_LOG_ID:
        return this.commit_log_id;
      case CHECKPOINT_PATH:
        return this.checkpoint_path;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LOG_ID:
        if (value == null) {
          unsetLog_id();
        } else {
          this.log_id = value as int;
        }
        break;

      case TERM_ID:
        if (value == null) {
          unsetTerm_id();
        } else {
          this.term_id = value as int;
        }
        break;

      case COMMIT_LOG_ID:
        if (value == null) {
          unsetCommit_log_id();
        } else {
          this.commit_log_id = value as int;
        }
        break;

      case CHECKPOINT_PATH:
        if (value == null) {
          unsetCheckpoint_path();
        } else {
          this.checkpoint_path = value as Int8List;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LOG_ID:
        return isSetLog_id();
      case TERM_ID:
        return isSetTerm_id();
      case COMMIT_LOG_ID:
        return isSetCommit_log_id();
      case CHECKPOINT_PATH:
        return isSetCheckpoint_path();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case LOG_ID:
          if (field.type == TType.I64) {
            this.log_id = iprot.readI64();
            this.__isset_log_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TERM_ID:
          if (field.type == TType.I64) {
            this.term_id = iprot.readI64();
            this.__isset_term_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMMIT_LOG_ID:
          if (field.type == TType.I64) {
            this.commit_log_id = iprot.readI64();
            this.__isset_commit_log_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHECKPOINT_PATH:
          if (field.type == TType.STRING) {
            this.checkpoint_path = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_LOG_ID_FIELD_DESC);
    oprot.writeI64(this.log_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TERM_ID_FIELD_DESC);
    oprot.writeI64(this.term_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_COMMIT_LOG_ID_FIELD_DESC);
    oprot.writeI64(this.commit_log_id);
    oprot.writeFieldEnd();
    if (this.checkpoint_path != null) {
      oprot.writeFieldBegin(_CHECKPOINT_PATH_FIELD_DESC);
      oprot.writeBinary(this.checkpoint_path);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("LogInfo(");

    ret.write("log_id:");
    ret.write(this.log_id);

    ret.write(", ");
    ret.write("term_id:");
    ret.write(this.term_id);

    ret.write(", ");
    ret.write("commit_log_id:");
    ret.write(this.commit_log_id);

    ret.write(", ");
    ret.write("checkpoint_path:");
    if (this.checkpoint_path == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
