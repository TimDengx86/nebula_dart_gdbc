/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.dir_info;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class DirInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("DirInfo");
  static final TField _ROOT_FIELD_DESC = new TField("root", TType.STRING, 1);
  static final TField _DATA_FIELD_DESC = new TField("data", TType.LIST, 2);

  Int8List? _root;
  static const int ROOT = 1;
  List<Int8List>? _data;
  static const int DATA = 2;

  DirInfo() {}

  // root
  Int8List? get root => this._root;

  set root(Int8List? root) {
    this._root = root;
  }

  bool isSetRoot() => this.root != null;

  unsetRoot() {
    this.root = null;
  }

  // data
  List<Int8List>? get data => this._data;

  set data(List<Int8List>? data) {
    this._data = data;
  }

  bool isSetData() => this.data != null;

  unsetData() {
    this.data = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ROOT:
        return this.root;
      case DATA:
        return this.data;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ROOT:
        if (value == null) {
          unsetRoot();
        } else {
          this.root = value as Int8List?;
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          this.data = value as List<Int8List>?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ROOT:
        return isSetRoot();
      case DATA:
        return isSetData();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ROOT:
          if (field.type == TType.STRING) {
            this.root = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DATA:
          if (field.type == TType.LIST) {
            {
              TList _list64 = iprot.readListBegin();
              this.data = <Int8List>[];
              for (int _i65 = 0; _i65 < _list64.length; ++_i65) {
                Int8List _elem66;
                _elem66 = iprot.readBinary();
                this.data?.add(_elem66);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.root != null) {
      oprot.writeFieldBegin(_ROOT_FIELD_DESC);
      oprot.writeBinary(this.root);
      oprot.writeFieldEnd();
    }
    if (this.data != null) {
      oprot.writeFieldBegin(_DATA_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.data?.length));
        for (var elem67 in this.data ?? []) {
          oprot.writeBinary(elem67);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("DirInfo(");

    ret.write("root:");
    if (this.root == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("data:");
    if (this.data == null) {
      ret.write("null");
    } else {
      ret.write(this.data);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
