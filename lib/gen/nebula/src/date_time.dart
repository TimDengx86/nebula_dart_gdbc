/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.date_time;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class DateTime implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("DateTime");
  static final TField _YEAR_FIELD_DESC = new TField("year", TType.I16, 1);
  static final TField _MONTH_FIELD_DESC = new TField("month", TType.BYTE, 2);
  static final TField _DAY_FIELD_DESC = new TField("day", TType.BYTE, 3);
  static final TField _HOUR_FIELD_DESC = new TField("hour", TType.BYTE, 4);
  static final TField _MINUTE_FIELD_DESC = new TField("minute", TType.BYTE, 5);
  static final TField _SEC_FIELD_DESC = new TField("sec", TType.BYTE, 6);
  static final TField _MICROSEC_FIELD_DESC =
      new TField("microsec", TType.I32, 7);

  int _year = 0;
  static const int YEAR = 1;
  int _month = 0;
  static const int MONTH = 2;
  int _day = 0;
  static const int DAY = 3;
  int _hour = 0;
  static const int HOUR = 4;
  int _minute = 0;
  static const int MINUTE = 5;
  int _sec = 0;
  static const int SEC = 6;
  int _microsec = 0;
  static const int MICROSEC = 7;

  bool __isset_year = false;
  bool __isset_month = false;
  bool __isset_day = false;
  bool __isset_hour = false;
  bool __isset_minute = false;
  bool __isset_sec = false;
  bool __isset_microsec = false;

  DateTime() {}

  // year
  int get year => this._year;

  set year(int year) {
    this._year = year;
    this.__isset_year = true;
  }

  bool isSetYear() => this.__isset_year;

  unsetYear() {
    this.__isset_year = false;
  }

  // month
  int get month => this._month;

  set month(int month) {
    this._month = month;
    this.__isset_month = true;
  }

  bool isSetMonth() => this.__isset_month;

  unsetMonth() {
    this.__isset_month = false;
  }

  // day
  int get day => this._day;

  set day(int day) {
    this._day = day;
    this.__isset_day = true;
  }

  bool isSetDay() => this.__isset_day;

  unsetDay() {
    this.__isset_day = false;
  }

  // hour
  int get hour => this._hour;

  set hour(int hour) {
    this._hour = hour;
    this.__isset_hour = true;
  }

  bool isSetHour() => this.__isset_hour;

  unsetHour() {
    this.__isset_hour = false;
  }

  // minute
  int get minute => this._minute;

  set minute(int minute) {
    this._minute = minute;
    this.__isset_minute = true;
  }

  bool isSetMinute() => this.__isset_minute;

  unsetMinute() {
    this.__isset_minute = false;
  }

  // sec
  int get sec => this._sec;

  set sec(int sec) {
    this._sec = sec;
    this.__isset_sec = true;
  }

  bool isSetSec() => this.__isset_sec;

  unsetSec() {
    this.__isset_sec = false;
  }

  // microsec
  int get microsec => this._microsec;

  set microsec(int microsec) {
    this._microsec = microsec;
    this.__isset_microsec = true;
  }

  bool isSetMicrosec() => this.__isset_microsec;

  unsetMicrosec() {
    this.__isset_microsec = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case YEAR:
        return this.year;
      case MONTH:
        return this.month;
      case DAY:
        return this.day;
      case HOUR:
        return this.hour;
      case MINUTE:
        return this.minute;
      case SEC:
        return this.sec;
      case MICROSEC:
        return this.microsec;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case YEAR:
        if (value == null) {
          unsetYear();
        } else {
          this.year = value as int;
        }
        break;

      case MONTH:
        if (value == null) {
          unsetMonth();
        } else {
          this.month = value as int;
        }
        break;

      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          this.day = value as int;
        }
        break;

      case HOUR:
        if (value == null) {
          unsetHour();
        } else {
          this.hour = value as int;
        }
        break;

      case MINUTE:
        if (value == null) {
          unsetMinute();
        } else {
          this.minute = value as int;
        }
        break;

      case SEC:
        if (value == null) {
          unsetSec();
        } else {
          this.sec = value as int;
        }
        break;

      case MICROSEC:
        if (value == null) {
          unsetMicrosec();
        } else {
          this.microsec = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case YEAR:
        return isSetYear();
      case MONTH:
        return isSetMonth();
      case DAY:
        return isSetDay();
      case HOUR:
        return isSetHour();
      case MINUTE:
        return isSetMinute();
      case SEC:
        return isSetSec();
      case MICROSEC:
        return isSetMicrosec();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case YEAR:
          if (field.type == TType.I16) {
            this.year = iprot.readI16();
            this.__isset_year = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MONTH:
          if (field.type == TType.BYTE) {
            this.month = iprot.readByte();
            this.__isset_month = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DAY:
          if (field.type == TType.BYTE) {
            this.day = iprot.readByte();
            this.__isset_day = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOUR:
          if (field.type == TType.BYTE) {
            this.hour = iprot.readByte();
            this.__isset_hour = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MINUTE:
          if (field.type == TType.BYTE) {
            this.minute = iprot.readByte();
            this.__isset_minute = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SEC:
          if (field.type == TType.BYTE) {
            this.sec = iprot.readByte();
            this.__isset_sec = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MICROSEC:
          if (field.type == TType.I32) {
            this.microsec = iprot.readI32();
            this.__isset_microsec = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_YEAR_FIELD_DESC);
    oprot.writeI16(this.year);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MONTH_FIELD_DESC);
    oprot.writeByte(this.month);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_DAY_FIELD_DESC);
    oprot.writeByte(this.day);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_HOUR_FIELD_DESC);
    oprot.writeByte(this.hour);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MINUTE_FIELD_DESC);
    oprot.writeByte(this.minute);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SEC_FIELD_DESC);
    oprot.writeByte(this.sec);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MICROSEC_FIELD_DESC);
    oprot.writeI32(this.microsec);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("DateTime(");

    ret.write("year:");
    ret.write(this.year);

    ret.write(", ");
    ret.write("month:");
    ret.write(this.month);

    ret.write(", ");
    ret.write("day:");
    ret.write(this.day);

    ret.write(", ");
    ret.write("hour:");
    ret.write(this.hour);

    ret.write(", ");
    ret.write("minute:");
    ret.write(this.minute);

    ret.write(", ");
    ret.write("sec:");
    ret.write(this.sec);

    ret.write(", ");
    ret.write("microsec:");
    ret.write(this.microsec);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
