// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.coordinate;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class Coordinate implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Coordinate");
  static final TField _X_FIELD_DESC = new TField("x", TType.DOUBLE, 1);
  static final TField _Y_FIELD_DESC = new TField("y", TType.DOUBLE, 2);

  double _x = 0.0;
  static const int X = 1;
  double _y = 0.0;
  static const int Y = 2;

  bool __isset_x = false;
  bool __isset_y = false;

  Coordinate() {}

  // x
  double get x => this._x;

  set x(double x) {
    this._x = x;
    this.__isset_x = true;
  }

  bool isSetX() => this.__isset_x;

  unsetX() {
    this.__isset_x = false;
  }

  // y
  double get y => this._y;

  set y(double y) {
    this._y = y;
    this.__isset_y = true;
  }

  bool isSetY() => this.__isset_y;

  unsetY() {
    this.__isset_y = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case X:
        return this.x;
      case Y:
        return this.y;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case X:
        if (value == null) {
          unsetX();
        } else {
          this.x = value as double;
        }
        break;

      case Y:
        if (value == null) {
          unsetY();
        } else {
          this.y = value as double;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case X:
        return isSetX();
      case Y:
        return isSetY();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case X:
          if (field.type == TType.DOUBLE) {
            this.x = iprot.readDouble();
            this.__isset_x = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case Y:
          if (field.type == TType.DOUBLE) {
            this.y = iprot.readDouble();
            this.__isset_y = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_X_FIELD_DESC);
    oprot.writeDouble(this.x);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_Y_FIELD_DESC);
    oprot.writeDouble(this.y);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Coordinate(");

    ret.write("x:");
    ret.write(this.x);

    ret.write(", ");
    ret.write("y:");
    ret.write(this.y);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
