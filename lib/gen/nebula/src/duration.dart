/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.duration;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class Duration implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Duration");
  static final TField _SECONDS_FIELD_DESC = new TField("seconds", TType.I64, 1);
  static final TField _MICROSECONDS_FIELD_DESC =
      new TField("microseconds", TType.I32, 2);
  static final TField _MONTHS_FIELD_DESC = new TField("months", TType.I32, 3);

  int _seconds = 0;
  static const int SECONDS = 1;
  int _microseconds = 0;
  static const int MICROSECONDS = 2;
  int _months = 0;
  static const int MONTHS = 3;

  bool __isset_seconds = false;
  bool __isset_microseconds = false;
  bool __isset_months = false;

  Duration() {}

  // seconds
  int get seconds => this._seconds;

  set seconds(int seconds) {
    this._seconds = seconds;
    this.__isset_seconds = true;
  }

  bool isSetSeconds() => this.__isset_seconds;

  unsetSeconds() {
    this.__isset_seconds = false;
  }

  // microseconds
  int get microseconds => this._microseconds;

  set microseconds(int microseconds) {
    this._microseconds = microseconds;
    this.__isset_microseconds = true;
  }

  bool isSetMicroseconds() => this.__isset_microseconds;

  unsetMicroseconds() {
    this.__isset_microseconds = false;
  }

  // months
  int get months => this._months;

  set months(int months) {
    this._months = months;
    this.__isset_months = true;
  }

  bool isSetMonths() => this.__isset_months;

  unsetMonths() {
    this.__isset_months = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SECONDS:
        return this.seconds;
      case MICROSECONDS:
        return this.microseconds;
      case MONTHS:
        return this.months;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SECONDS:
        if (value == null) {
          unsetSeconds();
        } else {
          this.seconds = value as int;
        }
        break;

      case MICROSECONDS:
        if (value == null) {
          unsetMicroseconds();
        } else {
          this.microseconds = value as int;
        }
        break;

      case MONTHS:
        if (value == null) {
          unsetMonths();
        } else {
          this.months = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SECONDS:
        return isSetSeconds();
      case MICROSECONDS:
        return isSetMicroseconds();
      case MONTHS:
        return isSetMonths();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SECONDS:
          if (field.type == TType.I64) {
            this.seconds = iprot.readI64();
            this.__isset_seconds = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MICROSECONDS:
          if (field.type == TType.I32) {
            this.microseconds = iprot.readI32();
            this.__isset_microseconds = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MONTHS:
          if (field.type == TType.I32) {
            this.months = iprot.readI32();
            this.__isset_months = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SECONDS_FIELD_DESC);
    oprot.writeI64(this.seconds);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MICROSECONDS_FIELD_DESC);
    oprot.writeI32(this.microseconds);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MONTHS_FIELD_DESC);
    oprot.writeI32(this.months);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Duration(");

    ret.write("seconds:");
    ret.write(this.seconds);

    ret.write(", ");
    ret.write("microseconds:");
    ret.write(this.microseconds);

    ret.write(", ");
    ret.write("months:");
    ret.write(this.months);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
