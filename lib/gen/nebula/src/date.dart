// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.date;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class Date implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Date");
  static final TField _YEAR_FIELD_DESC = new TField("year", TType.I16, 1);
  static final TField _MONTH_FIELD_DESC = new TField("month", TType.BYTE, 2);
  static final TField _DAY_FIELD_DESC = new TField("day", TType.BYTE, 3);

  int _year = 0;
  static const int YEAR = 1;
  int _month = 0;
  static const int MONTH = 2;
  int _day = 0;
  static const int DAY = 3;

  bool __isset_year = false;
  bool __isset_month = false;
  bool __isset_day = false;

  Date() {}

  // year
  int get year => this._year;

  set year(int year) {
    this._year = year;
    this.__isset_year = true;
  }

  bool isSetYear() => this.__isset_year;

  unsetYear() {
    this.__isset_year = false;
  }

  // month
  int get month => this._month;

  set month(int month) {
    this._month = month;
    this.__isset_month = true;
  }

  bool isSetMonth() => this.__isset_month;

  unsetMonth() {
    this.__isset_month = false;
  }

  // day
  int get day => this._day;

  set day(int day) {
    this._day = day;
    this.__isset_day = true;
  }

  bool isSetDay() => this.__isset_day;

  unsetDay() {
    this.__isset_day = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case YEAR:
        return this.year;
      case MONTH:
        return this.month;
      case DAY:
        return this.day;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case YEAR:
        if (value == null) {
          unsetYear();
        } else {
          this.year = value as int;
        }
        break;

      case MONTH:
        if (value == null) {
          unsetMonth();
        } else {
          this.month = value as int;
        }
        break;

      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          this.day = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case YEAR:
        return isSetYear();
      case MONTH:
        return isSetMonth();
      case DAY:
        return isSetDay();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case YEAR:
          if (field.type == TType.I16) {
            this.year = iprot.readI16();
            this.__isset_year = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MONTH:
          if (field.type == TType.BYTE) {
            this.month = iprot.readByte();
            this.__isset_month = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DAY:
          if (field.type == TType.BYTE) {
            this.day = iprot.readByte();
            this.__isset_day = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_YEAR_FIELD_DESC);
    oprot.writeI16(this.year);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MONTH_FIELD_DESC);
    oprot.writeByte(this.month);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_DAY_FIELD_DESC);
    oprot.writeByte(this.day);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Date(");

    ret.write("year:");
    ret.write(this.year);

    ret.write(", ");
    ret.write("month:");
    ret.write(this.month);

    ret.write(", ");
    ret.write("day:");
    ret.write(this.day);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
