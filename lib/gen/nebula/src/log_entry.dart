/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.log_entry;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class LogEntry implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("LogEntry");
  static final TField _CLUSTER_FIELD_DESC = new TField("cluster", TType.I64, 1);
  static final TField _LOG_STR_FIELD_DESC =
      new TField("log_str", TType.STRING, 2);

  int _cluster = 0;
  static const int CLUSTER = 1;
  Int8List? _log_str;
  static const int LOG_STR = 2;

  bool __isset_cluster = false;

  LogEntry() {}

  // cluster
  int get cluster => this._cluster;

  set cluster(int cluster) {
    this._cluster = cluster;
    this.__isset_cluster = true;
  }

  bool isSetCluster() => this.__isset_cluster;

  unsetCluster() {
    this.__isset_cluster = false;
  }

  // log_str
  Int8List? get log_str => this._log_str;

  set log_str(Int8List? log_str) {
    this._log_str = log_str;
  }

  bool isSetLog_str() => this.log_str != null;

  unsetLog_str() {
    this.log_str = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CLUSTER:
        return this.cluster;
      case LOG_STR:
        return this.log_str;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CLUSTER:
        if (value == null) {
          unsetCluster();
        } else {
          this.cluster = value as int;
        }
        break;

      case LOG_STR:
        if (value == null) {
          unsetLog_str();
        } else {
          this.log_str = value as Int8List;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CLUSTER:
        return isSetCluster();
      case LOG_STR:
        return isSetLog_str();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CLUSTER:
          if (field.type == TType.I64) {
            this.cluster = iprot.readI64();
            this.__isset_cluster = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOG_STR:
          if (field.type == TType.STRING) {
            this.log_str = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_CLUSTER_FIELD_DESC);
    oprot.writeI64(this.cluster);
    oprot.writeFieldEnd();
    if (this.log_str != null) {
      oprot.writeFieldBegin(_LOG_STR_FIELD_DESC);
      oprot.writeBinary(this.log_str);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("LogEntry(");

    ret.write("cluster:");
    ret.write(this.cluster);

    ret.write(", ");
    ret.write("log_str:");
    if (this.log_str == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
