/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.n_map;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class NMap implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("NMap");
  static final TField _KVS_FIELD_DESC = new TField("kvs", TType.MAP, 1);

  Map<Int8List, Value>? _kvs;
  static const int KVS = 1;

  NMap() {}

  // kvs
  Map<Int8List, Value>? get kvs => this._kvs;

  set kvs(Map<Int8List, Value>? kvs) {
    this._kvs = kvs;
  }

  bool isSetKvs() => this.kvs != null;

  unsetKvs() {
    this.kvs = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case KVS:
        return this.kvs;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case KVS:
        if (value == null) {
          unsetKvs();
        } else {
          this.kvs = value as Map<Int8List, Value>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case KVS:
        return isSetKvs();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case KVS:
          if (field.type == TType.MAP) {
            {
              TMap _map4 = iprot.readMapBegin();
              this.kvs = new Map<Int8List, Value>();
              for (int _i5 = 0; _i5 < _map4.length; ++_i5) {
                Int8List _key6;
                Value _val7;
                _key6 = iprot.readBinary();
                _val7 = new Value();
                _val7.read(iprot);
                this.kvs?[_key6] = _val7;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.kvs != null) {
      oprot.writeFieldBegin(_KVS_FIELD_DESC);
      {
        oprot.writeMapBegin(
            new TMap(TType.STRING, TType.STRUCT, this.kvs?.length));
        for (var elem9 in this.kvs?.keys ?? <Int8List>[]) {
          oprot.writeBinary(elem9);
          this.kvs?[elem9]?.write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("NMap(");

    ret.write("kvs:");
    if (this.kvs == null) {
      ret.write("null");
    } else {
      ret.write(this.kvs);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
