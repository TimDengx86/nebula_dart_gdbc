/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.value;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';
import './duration.dart' as ng;

class Value implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Value");
  static final TField _N_VAL_FIELD_DESC = new TField("nVal", TType.I32, 1);
  static final TField _B_VAL_FIELD_DESC = new TField("bVal", TType.BOOL, 2);
  static final TField _I_VAL_FIELD_DESC = new TField("iVal", TType.I64, 3);
  static final TField _F_VAL_FIELD_DESC = new TField("fVal", TType.DOUBLE, 4);
  static final TField _S_VAL_FIELD_DESC = new TField("sVal", TType.STRING, 5);
  static final TField _D_VAL_FIELD_DESC = new TField("dVal", TType.STRUCT, 6);
  static final TField _T_VAL_FIELD_DESC = new TField("tVal", TType.STRUCT, 7);
  static final TField _DT_VAL_FIELD_DESC = new TField("dtVal", TType.STRUCT, 8);
  static final TField _V_VAL_FIELD_DESC = new TField("vVal", TType.STRUCT, 9);
  static final TField _E_VAL_FIELD_DESC = new TField("eVal", TType.STRUCT, 10);
  static final TField _P_VAL_FIELD_DESC = new TField("pVal", TType.STRUCT, 11);
  static final TField _L_VAL_FIELD_DESC = new TField("lVal", TType.STRUCT, 12);
  static final TField _M_VAL_FIELD_DESC = new TField("mVal", TType.STRUCT, 13);
  static final TField _U_VAL_FIELD_DESC = new TField("uVal", TType.STRUCT, 14);
  static final TField _G_VAL_FIELD_DESC = new TField("gVal", TType.STRUCT, 15);
  static final TField _GG_VAL_FIELD_DESC =
      new TField("ggVal", TType.STRUCT, 16);
  static final TField _DU_VAL_FIELD_DESC =
      new TField("duVal", TType.STRUCT, 17);

  int? _nVal;
  static const int NVAL = 1;
  bool? _bVal;
  static const int BVAL = 2;
  int? _iVal;
  static const int IVAL = 3;
  double? _fVal;
  static const int FVAL = 4;
  Int8List? _sVal;
  static const int SVAL = 5;
  Date? _dVal;
  static const int DVAL = 6;
  Time? _tVal;
  static const int TVAL = 7;
  DateTime? _dtVal;
  static const int DTVAL = 8;
  Vertex? _vVal;
  static const int VVAL = 9;
  Edge? _eVal;
  static const int EVAL = 10;
  Path? _pVal;
  static const int PVAL = 11;
  NList? _lVal;
  static const int LVAL = 12;
  NMap? _mVal;
  static const int MVAL = 13;
  NSet? _uVal;
  static const int UVAL = 14;
  DataSet? _gVal;
  static const int GVAL = 15;
  Geography? _ggVal;
  static const int GGVAL = 16;
  ng.Duration? _duVal;
  static const int DUVAL = 17;

  bool __isset_nVal = false;
  bool __isset_bVal = false;
  bool __isset_iVal = false;
  bool __isset_fVal = false;

  Value() {}

  // nVal
  int? get nVal => this._nVal;

  set nVal(int? nVal) {
    this._nVal = nVal;
    this.__isset_nVal = true;
  }

  bool isSetNVal() => this.__isset_nVal;

  unsetNVal() {
    this.__isset_nVal = false;
  }

  // bVal
  bool? get bVal => this._bVal;

  set bVal(bool? bVal) {
    this._bVal = bVal;
    this.__isset_bVal = true;
  }

  bool isSetBVal() => this.__isset_bVal;

  unsetBVal() {
    this.__isset_bVal = false;
  }

  // iVal
  int? get iVal => this._iVal;

  set iVal(int? iVal) {
    this._iVal = iVal;
    this.__isset_iVal = true;
  }

  bool isSetIVal() => this.__isset_iVal;

  unsetIVal() {
    this.__isset_iVal = false;
  }

  // fVal
  double? get fVal => this._fVal;

  set fVal(double? fVal) {
    this._fVal = fVal;
    this.__isset_fVal = true;
  }

  bool isSetFVal() => this.__isset_fVal;

  unsetFVal() {
    this.__isset_fVal = false;
  }

  // sVal
  Int8List? get sVal => this._sVal;

  set sVal(Int8List? sVal) {
    this._sVal = sVal;
  }

  bool isSetSVal() => this.sVal != null;

  unsetSVal() {
    this.sVal = null;
  }

  // dVal
  Date? get dVal => this._dVal;

  set dVal(Date? dVal) {
    this._dVal = dVal;
  }

  bool isSetDVal() => this.dVal != null;

  unsetDVal() {
    this.dVal = null;
  }

  // tVal
  Time? get tVal => this._tVal;

  set tVal(Time? tVal) {
    this._tVal = tVal;
  }

  bool isSetTVal() => this.tVal != null;

  unsetTVal() {
    this.tVal = null;
  }

  // dtVal
  DateTime? get dtVal => this._dtVal;

  set dtVal(DateTime? dtVal) {
    this._dtVal = dtVal;
  }

  bool isSetDtVal() => this.dtVal != null;

  unsetDtVal() {
    this.dtVal = null;
  }

  // vVal
  Vertex? get vVal => this._vVal;

  set vVal(Vertex? vVal) {
    this._vVal = vVal;
  }

  bool isSetVVal() => this.vVal != null;

  unsetVVal() {
    this.vVal = null;
  }

  // eVal
  Edge? get eVal => this._eVal;

  set eVal(Edge? eVal) {
    this._eVal = eVal;
  }

  bool isSetEVal() => this.eVal != null;

  unsetEVal() {
    this.eVal = null;
  }

  // pVal
  Path? get pVal => this._pVal;

  set pVal(Path? pVal) {
    this._pVal = pVal;
  }

  bool isSetPVal() => this.pVal != null;

  unsetPVal() {
    this.pVal = null;
  }

  // lVal
  NList? get lVal => this._lVal;

  set lVal(NList? lVal) {
    this._lVal = lVal;
  }

  bool isSetLVal() => this.lVal != null;

  unsetLVal() {
    this.lVal = null;
  }

  // mVal
  NMap? get mVal => this._mVal;

  set mVal(NMap? mVal) {
    this._mVal = mVal;
  }

  bool isSetMVal() => this.mVal != null;

  unsetMVal() {
    this.mVal = null;
  }

  // uVal
  NSet? get uVal => this._uVal;

  set uVal(NSet? uVal) {
    this._uVal = uVal;
  }

  bool isSetUVal() => this.uVal != null;

  unsetUVal() {
    this.uVal = null;
  }

  // gVal
  DataSet? get gVal => this._gVal;

  set gVal(DataSet? gVal) {
    this._gVal = gVal;
  }

  bool isSetGVal() => this.gVal != null;

  unsetGVal() {
    this.gVal = null;
  }

  // ggVal
  Geography? get ggVal => this._ggVal;

  set ggVal(Geography? ggVal) {
    this._ggVal = ggVal;
  }

  bool isSetGgVal() => this.ggVal != null;

  unsetGgVal() {
    this.ggVal = null;
  }

  // duVal
  ng.Duration? get duVal => this._duVal;

  set duVal(ng.Duration? duVal) {
    this._duVal = duVal;
  }

  bool isSetDuVal() => this.duVal != null;

  unsetDuVal() {
    this.duVal = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NVAL:
        return this.nVal;
      case BVAL:
        return this.bVal;
      case IVAL:
        return this.iVal;
      case FVAL:
        return this.fVal;
      case SVAL:
        return this.sVal;
      case DVAL:
        return this.dVal;
      case TVAL:
        return this.tVal;
      case DTVAL:
        return this.dtVal;
      case VVAL:
        return this.vVal;
      case EVAL:
        return this.eVal;
      case PVAL:
        return this.pVal;
      case LVAL:
        return this.lVal;
      case MVAL:
        return this.mVal;
      case UVAL:
        return this.uVal;
      case GVAL:
        return this.gVal;
      case GGVAL:
        return this.ggVal;
      case DUVAL:
        return this.duVal;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NVAL:
        if (value == null) {
          unsetNVal();
        } else {
          this.nVal = value as int?;
        }
        break;

      case BVAL:
        if (value == null) {
          unsetBVal();
        } else {
          this.bVal = value as bool?;
        }
        break;

      case IVAL:
        if (value == null) {
          unsetIVal();
        } else {
          this.iVal = value as int?;
        }
        break;

      case FVAL:
        if (value == null) {
          unsetFVal();
        } else {
          this.fVal = value as double?;
        }
        break;

      case SVAL:
        if (value == null) {
          unsetSVal();
        } else {
          this.sVal = value as Int8List?;
        }
        break;

      case DVAL:
        if (value == null) {
          unsetDVal();
        } else {
          this.dVal = value as Date?;
        }
        break;

      case TVAL:
        if (value == null) {
          unsetTVal();
        } else {
          this.tVal = value as Time?;
        }
        break;

      case DTVAL:
        if (value == null) {
          unsetDtVal();
        } else {
          this.dtVal = value as DateTime?;
        }
        break;

      case VVAL:
        if (value == null) {
          unsetVVal();
        } else {
          this.vVal = value as Vertex?;
        }
        break;

      case EVAL:
        if (value == null) {
          unsetEVal();
        } else {
          this.eVal = value as Edge?;
        }
        break;

      case PVAL:
        if (value == null) {
          unsetPVal();
        } else {
          this.pVal = value as Path?;
        }
        break;

      case LVAL:
        if (value == null) {
          unsetLVal();
        } else {
          this.lVal = value as NList?;
        }
        break;

      case MVAL:
        if (value == null) {
          unsetMVal();
        } else {
          this.mVal = value as NMap?;
        }
        break;

      case UVAL:
        if (value == null) {
          unsetUVal();
        } else {
          this.uVal = value as NSet?;
        }
        break;

      case GVAL:
        if (value == null) {
          unsetGVal();
        } else {
          this.gVal = value as DataSet?;
        }
        break;

      case GGVAL:
        if (value == null) {
          unsetGgVal();
        } else {
          this.ggVal = value as Geography?;
        }
        break;

      case DUVAL:
        if (value == null) {
          unsetDuVal();
        } else {
          this.duVal = value as ng.Duration?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NVAL:
        return isSetNVal();
      case BVAL:
        return isSetBVal();
      case IVAL:
        return isSetIVal();
      case FVAL:
        return isSetFVal();
      case SVAL:
        return isSetSVal();
      case DVAL:
        return isSetDVal();
      case TVAL:
        return isSetTVal();
      case DTVAL:
        return isSetDtVal();
      case VVAL:
        return isSetVVal();
      case EVAL:
        return isSetEVal();
      case PVAL:
        return isSetPVal();
      case LVAL:
        return isSetLVal();
      case MVAL:
        return isSetMVal();
      case UVAL:
        return isSetUVal();
      case GVAL:
        return isSetGVal();
      case GGVAL:
        return isSetGgVal();
      case DUVAL:
        return isSetDuVal();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NVAL:
          if (field.type == TType.I32) {
            this.nVal = iprot.readI32();
            this.__isset_nVal = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BVAL:
          if (field.type == TType.BOOL) {
            this.bVal = iprot.readBool();
            this.__isset_bVal = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IVAL:
          if (field.type == TType.I64) {
            this.iVal = iprot.readI64();
            this.__isset_iVal = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FVAL:
          if (field.type == TType.DOUBLE) {
            this.fVal = iprot.readDouble();
            this.__isset_fVal = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SVAL:
          if (field.type == TType.STRING) {
            this.sVal = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DVAL:
          if (field.type == TType.STRUCT) {
            this.dVal = new Date();
            this.dVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TVAL:
          if (field.type == TType.STRUCT) {
            this.tVal = new Time();
            this.tVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DTVAL:
          if (field.type == TType.STRUCT) {
            this.dtVal = new DateTime();
            this.dtVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VVAL:
          if (field.type == TType.STRUCT) {
            this.vVal = new Vertex();
            this.vVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVAL:
          if (field.type == TType.STRUCT) {
            this.eVal = new Edge();
            this.eVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PVAL:
          if (field.type == TType.STRUCT) {
            this.pVal = new Path();
            this.pVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LVAL:
          if (field.type == TType.STRUCT) {
            this.lVal = new NList();
            this.lVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MVAL:
          if (field.type == TType.STRUCT) {
            this.mVal = new NMap();
            this.mVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UVAL:
          if (field.type == TType.STRUCT) {
            this.uVal = new NSet();
            this.uVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GVAL:
          if (field.type == TType.STRUCT) {
            this.gVal = new DataSet();
            this.gVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GGVAL:
          if (field.type == TType.STRUCT) {
            this.ggVal = new Geography();
            this.ggVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DUVAL:
          if (field.type == TType.STRUCT) {
            this.duVal = new ng.Duration();
            this.duVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetNVal()) {
      oprot.writeFieldBegin(_N_VAL_FIELD_DESC);
      oprot.writeI32(this.nVal);
      oprot.writeFieldEnd();
    }
    if (isSetBVal()) {
      oprot.writeFieldBegin(_B_VAL_FIELD_DESC);
      oprot.writeBool(this.bVal);
      oprot.writeFieldEnd();
    }
    if (isSetIVal()) {
      oprot.writeFieldBegin(_I_VAL_FIELD_DESC);
      oprot.writeI64(this.iVal);
      oprot.writeFieldEnd();
    }
    if (isSetFVal()) {
      oprot.writeFieldBegin(_F_VAL_FIELD_DESC);
      oprot.writeDouble(this.fVal);
      oprot.writeFieldEnd();
    }
    if (isSetSVal()) {
      if (this.sVal != null) {
        oprot.writeFieldBegin(_S_VAL_FIELD_DESC);
        oprot.writeBinary(this.sVal);
        oprot.writeFieldEnd();
      }
    }
    if (isSetDVal()) {
      if (this.dVal != null) {
        oprot.writeFieldBegin(_D_VAL_FIELD_DESC);
        this.dVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetTVal()) {
      if (this.tVal != null) {
        oprot.writeFieldBegin(_T_VAL_FIELD_DESC);
        this.tVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetDtVal()) {
      if (this.dtVal != null) {
        oprot.writeFieldBegin(_DT_VAL_FIELD_DESC);
        this.dtVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetVVal()) {
      if (this.vVal != null) {
        oprot.writeFieldBegin(_V_VAL_FIELD_DESC);
        this.vVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetEVal()) {
      if (this.eVal != null) {
        oprot.writeFieldBegin(_E_VAL_FIELD_DESC);
        this.eVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetPVal()) {
      if (this.pVal != null) {
        oprot.writeFieldBegin(_P_VAL_FIELD_DESC);
        this.pVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetLVal()) {
      if (this.lVal != null) {
        oprot.writeFieldBegin(_L_VAL_FIELD_DESC);
        this.lVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetMVal()) {
      if (this.mVal != null) {
        oprot.writeFieldBegin(_M_VAL_FIELD_DESC);
        this.mVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetUVal()) {
      if (this.uVal != null) {
        oprot.writeFieldBegin(_U_VAL_FIELD_DESC);
        this.uVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetGVal()) {
      if (this.gVal != null) {
        oprot.writeFieldBegin(_G_VAL_FIELD_DESC);
        this.gVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetGgVal()) {
      if (this.ggVal != null) {
        oprot.writeFieldBegin(_GG_VAL_FIELD_DESC);
        this.ggVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetDuVal()) {
      if (this.duVal != null) {
        oprot.writeFieldBegin(_DU_VAL_FIELD_DESC);
        this.duVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Value(");

    if (isSetNVal()) {
      ret.write("nVal:");
      String? nVal_name = NullType.VALUES_TO_NAMES[this.nVal];
      if (nVal_name != null) {
        ret.write(nVal_name);
        ret.write(" (");
      }
      ret.write(this.nVal);
      if (nVal_name != null) {
        ret.write(")");
      }
    }

    if (isSetBVal()) {
      ret.write(", ");
      ret.write("bVal:");
      ret.write(this.bVal);
    }

    if (isSetIVal()) {
      ret.write(", ");
      ret.write("iVal:");
      ret.write(this.iVal);
    }

    if (isSetFVal()) {
      ret.write(", ");
      ret.write("fVal:");
      ret.write(this.fVal);
    }

    if (isSetSVal()) {
      ret.write(", ");
      ret.write("sVal:");
      if (this.sVal == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetDVal()) {
      ret.write(", ");
      ret.write("dVal:");
      if (this.dVal == null) {
        ret.write("null");
      } else {
        ret.write(this.dVal);
      }
    }

    if (isSetTVal()) {
      ret.write(", ");
      ret.write("tVal:");
      if (this.tVal == null) {
        ret.write("null");
      } else {
        ret.write(this.tVal);
      }
    }

    if (isSetDtVal()) {
      ret.write(", ");
      ret.write("dtVal:");
      if (this.dtVal == null) {
        ret.write("null");
      } else {
        ret.write(this.dtVal);
      }
    }

    if (isSetVVal()) {
      ret.write(", ");
      ret.write("vVal:");
      if (this.vVal == null) {
        ret.write("null");
      } else {
        ret.write(this.vVal);
      }
    }

    if (isSetEVal()) {
      ret.write(", ");
      ret.write("eVal:");
      if (this.eVal == null) {
        ret.write("null");
      } else {
        ret.write(this.eVal);
      }
    }

    if (isSetPVal()) {
      ret.write(", ");
      ret.write("pVal:");
      if (this.pVal == null) {
        ret.write("null");
      } else {
        ret.write(this.pVal);
      }
    }

    if (isSetLVal()) {
      ret.write(", ");
      ret.write("lVal:");
      if (this.lVal == null) {
        ret.write("null");
      } else {
        ret.write(this.lVal);
      }
    }

    if (isSetMVal()) {
      ret.write(", ");
      ret.write("mVal:");
      if (this.mVal == null) {
        ret.write("null");
      } else {
        ret.write(this.mVal);
      }
    }

    if (isSetUVal()) {
      ret.write(", ");
      ret.write("uVal:");
      if (this.uVal == null) {
        ret.write("null");
      } else {
        ret.write(this.uVal);
      }
    }

    if (isSetGVal()) {
      ret.write(", ");
      ret.write("gVal:");
      if (this.gVal == null) {
        ret.write("null");
      } else {
        ret.write(this.gVal);
      }
    }

    if (isSetGgVal()) {
      ret.write(", ");
      ret.write("ggVal:");
      if (this.ggVal == null) {
        ret.write("null");
      } else {
        ret.write(this.ggVal);
      }
    }

    if (isSetDuVal()) {
      ret.write(", ");
      ret.write("duVal:");
      if (this.duVal == null) {
        ret.write("null");
      } else {
        ret.write(this.duVal);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetNVal() && !NullType.VALID_VALUES.contains(nVal)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'nVal' has been assigned the invalid value $nVal");
    }
  }
}
