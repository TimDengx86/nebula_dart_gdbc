// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.geography;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class Geography implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Geography");
  static final TField _PT_VAL_FIELD_DESC = new TField("ptVal", TType.STRUCT, 1);
  static final TField _LS_VAL_FIELD_DESC = new TField("lsVal", TType.STRUCT, 2);
  static final TField _PG_VAL_FIELD_DESC = new TField("pgVal", TType.STRUCT, 3);

  Point? _ptVal;
  static const int PTVAL = 1;
  LineString? _lsVal;
  static const int LSVAL = 2;
  Polygon? _pgVal;
  static const int PGVAL = 3;

  Geography() {}

  // ptVal
  Point? get ptVal => this._ptVal;

  set ptVal(Point? ptVal) {
    this._ptVal = ptVal;
  }

  bool isSetPtVal() => this.ptVal != null;

  unsetPtVal() {
    this.ptVal = null;
  }

  // lsVal
  LineString? get lsVal => this._lsVal;

  set lsVal(LineString? lsVal) {
    this._lsVal = lsVal;
  }

  bool isSetLsVal() => this.lsVal != null;

  unsetLsVal() {
    this.lsVal = null;
  }

  // pgVal
  Polygon? get pgVal => this._pgVal;

  set pgVal(Polygon? pgVal) {
    this._pgVal = pgVal;
  }

  bool isSetPgVal() => this.pgVal != null;

  unsetPgVal() {
    this.pgVal = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PTVAL:
        return this.ptVal;
      case LSVAL:
        return this.lsVal;
      case PGVAL:
        return this.pgVal;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PTVAL:
        if (value == null) {
          unsetPtVal();
        } else {
          this.ptVal = value as Point;
        }
        break;

      case LSVAL:
        if (value == null) {
          unsetLsVal();
        } else {
          this.lsVal = value as LineString;
        }
        break;

      case PGVAL:
        if (value == null) {
          unsetPgVal();
        } else {
          this.pgVal = value as Polygon;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PTVAL:
        return isSetPtVal();
      case LSVAL:
        return isSetLsVal();
      case PGVAL:
        return isSetPgVal();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PTVAL:
          if (field.type == TType.STRUCT) {
            this.ptVal = new Point();
            this.ptVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LSVAL:
          if (field.type == TType.STRUCT) {
            this.lsVal = new LineString();
            this.lsVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PGVAL:
          if (field.type == TType.STRUCT) {
            this.pgVal = new Polygon();
            this.pgVal?.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetPtVal()) {
      if (this.ptVal != null) {
        oprot.writeFieldBegin(_PT_VAL_FIELD_DESC);
        this.ptVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetLsVal()) {
      if (this.lsVal != null) {
        oprot.writeFieldBegin(_LS_VAL_FIELD_DESC);
        this.lsVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetPgVal()) {
      if (this.pgVal != null) {
        oprot.writeFieldBegin(_PG_VAL_FIELD_DESC);
        this.pgVal?.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Geography(");

    if (isSetPtVal()) {
      ret.write("ptVal:");
      if (this.ptVal == null) {
        ret.write("null");
      } else {
        ret.write(this.ptVal);
      }
    }

    if (isSetLsVal()) {
      ret.write(", ");
      ret.write("lsVal:");
      if (this.lsVal == null) {
        ret.write("null");
      } else {
        ret.write(this.lsVal);
      }
    }

    if (isSetPgVal()) {
      ret.write(", ");
      ret.write("pgVal:");
      if (this.pgVal == null) {
        ret.write("null");
      } else {
        ret.write(this.pgVal);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
