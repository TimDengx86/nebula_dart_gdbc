// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.data_set;

import 'dart:typed_data' show Int8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class DataSet implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("DataSet");
  static final TField _COLUMN_NAMES_FIELD_DESC =
      new TField("column_names", TType.LIST, 1);
  static final TField _ROWS_FIELD_DESC = new TField("rows", TType.LIST, 2);

  List<Int8List>? _column_names;
  static const int COLUMN_NAMES = 1;
  List<Row>? _rows;
  static const int ROWS = 2;

  DataSet() {}

  // column_names
  List<Int8List>? get column_names => this._column_names;

  set column_names(List<Int8List>? column_names) {
    this._column_names = column_names;
  }

  bool isSetColumn_names() => this.column_names != null;

  unsetColumn_names() {
    this.column_names = null;
  }

  // rows
  List<Row>? get rows => this._rows;

  set rows(List<Row>? rows) {
    this._rows = rows;
  }

  bool isSetRows() => this.rows != null;

  unsetRows() {
    this.rows = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COLUMN_NAMES:
        return this.column_names;
      case ROWS:
        return this.rows;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COLUMN_NAMES:
        if (value == null) {
          unsetColumn_names();
        } else {
          this.column_names = value as List<Int8List>;
        }
        break;

      case ROWS:
        if (value == null) {
          unsetRows();
        } else {
          this.rows = value as List<Row>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COLUMN_NAMES:
        return isSetColumn_names();
      case ROWS:
        return isSetRows();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COLUMN_NAMES:
          if (field.type == TType.LIST) {
            {
              TList _list18 = iprot.readListBegin();
              this.column_names = <Int8List>[];
              for (int _i19 = 0; _i19 < _list18.length; ++_i19) {
                Int8List _elem20;
                _elem20 = iprot.readBinary();
                this.column_names?.add(_elem20);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROWS:
          if (field.type == TType.LIST) {
            {
              TList _list21 = iprot.readListBegin();
              this.rows = <Row>[];
              for (int _i22 = 0; _i22 < _list21.length; ++_i22) {
                Row _elem23;
                _elem23 = new Row();
                _elem23.read(iprot);
                this.rows?.add(_elem23);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.column_names != null) {
      oprot.writeFieldBegin(_COLUMN_NAMES_FIELD_DESC);
      {
        oprot
            .writeListBegin(new TList(TType.STRING, this.column_names?.length));
        for (var elem24 in this.column_names ?? []) {
          oprot.writeBinary(elem24);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.rows != null) {
      oprot.writeFieldBegin(_ROWS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.rows?.length));
        for (var elem25 in this.rows ?? []) {
          elem25.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("DataSet(");

    ret.write("column_names:");
    if (this.column_names == null) {
      ret.write("null");
    } else {
      ret.write(this.column_names);
    }

    ret.write(", ");
    ret.write("rows:");
    if (this.rows == null) {
      ret.write("null");
    } else {
      ret.write(this.rows);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
