// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.host_addr;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class HostAddr implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("HostAddr");
  static final TField _HOST_FIELD_DESC = new TField("host", TType.STRING, 1);
  static final TField _PORT_FIELD_DESC = new TField("port", TType.I32, 2);

  String? _host;
  static const int HOST = 1;
  int _port = 0;
  static const int PORT = 2;

  bool __isset_port = false;

  HostAddr() {}

  // host
  String? get host => this._host;

  set host(String? host) {
    this._host = host;
  }

  bool isSetHost() => this.host != null;

  unsetHost() {
    this.host = null;
  }

  // port
  int get port => this._port;

  set port(int port) {
    this._port = port;
    this.__isset_port = true;
  }

  bool isSetPort() => this.__isset_port;

  unsetPort() {
    this.__isset_port = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HOST:
        return this.host;
      case PORT:
        return this.port;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          this.host = value as String;
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          this.port = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HOST:
        return isSetHost();
      case PORT:
        return isSetPort();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HOST:
          if (field.type == TType.STRING) {
            this.host = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PORT:
          if (field.type == TType.I32) {
            this.port = iprot.readI32();
            this.__isset_port = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.host != null) {
      oprot.writeFieldBegin(_HOST_FIELD_DESC);
      oprot.writeString(this.host);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PORT_FIELD_DESC);
    oprot.writeI32(this.port);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("HostAddr(");

    ret.write("host:");
    if (this.host == null) {
      ret.write("null");
    } else {
      ret.write(this.host);
    }

    ret.write(", ");
    ret.write("port:");
    ret.write(this.port);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
