// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, unnecessary_import, prefer_interpolation_to_compose_strings, camel_case_types, prefer_generic_function_type_aliases, avoid_init_to_null, prefer_final_fields, unused_field

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula.src.polygon;

import 'dart:typed_data' show Uint8List;
import 'package:fbthrift/fbthrift.dart';
import '../nebula.dart';

class Polygon implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Polygon");
  static final TField _COORD_LIST_LIST_FIELD_DESC =
      new TField("coordListList", TType.LIST, 1);

  List<List<Coordinate>>? _coordListList;
  static const int COORDLISTLIST = 1;

  Polygon() {}

  // coordListList
  List<List<Coordinate>>? get coordListList => this._coordListList;

  set coordListList(List<List<Coordinate>>? coordListList) {
    this._coordListList = coordListList;
  }

  bool isSetCoordListList() => this.coordListList != null;

  unsetCoordListList() {
    this.coordListList = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COORDLISTLIST:
        return this.coordListList;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COORDLISTLIST:
        if (value == null) {
          unsetCoordListList();
        } else {
          this.coordListList = value as List<List<Coordinate>>;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COORDLISTLIST:
        return isSetCoordListList();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COORDLISTLIST:
          if (field.type == TType.LIST) {
            {
              TList _list30 = iprot.readListBegin();
              this.coordListList = <List<Coordinate>>[];
              for (int _i31 = 0; _i31 < _list30.length; ++_i31) {
                List<Coordinate> _elem32;
                {
                  TList _list33 = iprot.readListBegin();
                  _elem32 = <Coordinate>[];
                  for (int _i34 = 0; _i34 < _list33.length; ++_i34) {
                    Coordinate _elem35;
                    _elem35 = new Coordinate();
                    _elem35.read(iprot);
                    _elem32.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                this.coordListList?.add(_elem32);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.coordListList != null) {
      oprot.writeFieldBegin(_COORD_LIST_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.coordListList?.length));
        for (var elem36 in this.coordListList ?? []) {
          {
            oprot.writeListBegin(new TList(TType.STRUCT, elem36.length));
            for (var elem37 in elem36) {
              elem37.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Polygon(");

    ret.write("coordListList:");
    if (this.coordListList == null) {
      ret.write("null");
    } else {
      ret.write(this.coordListList);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
